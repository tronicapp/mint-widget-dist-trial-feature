{"version":3,"file":"static/js/559.60baac25.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/assertThisInitialized.js","../node_modules/@babel/runtime/helpers/asyncToGenerator.js","../node_modules/@babel/runtime/helpers/classCallCheck.js","../node_modules/@babel/runtime/helpers/createClass.js","../node_modules/@babel/runtime/helpers/getPrototypeOf.js","../node_modules/@babel/runtime/helpers/inherits.js","../node_modules/@babel/runtime/helpers/interopRequireDefault.js","../node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","../node_modules/@babel/runtime/helpers/setPrototypeOf.js","../node_modules/@babel/runtime/helpers/toPrimitive.js","../node_modules/@babel/runtime/helpers/toPropertyKey.js","../../src/Layout.ts","../node_modules/@noble/hashes/esm/_assert.js","../node_modules/@noble/hashes/esm/utils.js","../node_modules/@noble/hashes/esm/cryptoBrowser.js","../node_modules/@noble/hashes/esm/_sha2.js","../node_modules/@noble/hashes/esm/_u64.js","../node_modules/@noble/hashes/esm/sha512.js","../node_modules/@noble/ed25519/lib/esm/index.js","../node_modules/@noble/hashes/esm/sha256.js","../node_modules/superstruct/src/error.ts","../node_modules/superstruct/src/utils.ts","../node_modules/superstruct/src/struct.ts","../node_modules/superstruct/src/structs/utilities.ts","../node_modules/superstruct/src/structs/types.ts","../node_modules/superstruct/src/structs/coercions.ts","../node_modules/@noble/hashes/esm/sha3.js","../node_modules/@noble/hashes/esm/hmac.js","../node_modules/@web3auth/solana-provider/node_modules/@noble/secp256k1/lib/esm/index.js","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/utils/ed25519.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/utils/to-buffer.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/utils/borsh-schema.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/publickey.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/bpf-loader-deprecated.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/transaction/constants.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/transaction/expiry-custom-errors.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/message/account-keys.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/layout.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/utils/shortvec-encoding.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/utils/assert.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/message/compiled-keys.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/message/legacy.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/message/v0.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/transaction/legacy.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/sysvar.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/utils/send-and-confirm-transaction.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/utils/sleep.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/instruction.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/fee-calculator.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/nonce-account.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/utils/bigint.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/programs/system.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/loader.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/bpf-loader.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/node_modules/fast-stable-stringify/index.js","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/epoch-schedule.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/errors.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/__forks__/browser/fetch-impl.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/programs/address-lookup-table/state.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/account-data.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/utils/makeWebsocketUrl.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/connection.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/keypair.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/programs/address-lookup-table/index.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/programs/compute-budget.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/programs/ed25519.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/utils/secp256k1.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/programs/secp256k1.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/programs/stake.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/programs/vote.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/validator-info.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/vote-account.ts","../node_modules/@web3auth/solana-provider/src/rpc/JrpcClient.ts","../node_modules/@web3auth/solana-provider/src/rpc/solanaRpcMiddlewares.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/base/baseInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/base/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/injectedProviderProxy.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/phantom/phantomInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/slope/slopeInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/slope/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/solflare/solflareInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/solflare/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/sollet/solletInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/sollet/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/torus/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/torus/torusInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyUtils.ts","../node_modules/@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyProvider.ts","../node_modules/@web3auth/solana-provider/src/solanaWallet.ts","../node_modules/@web3auth/solana-provider/node_modules/buffer/index.js","../node_modules/base-x/src/index.js","../node_modules/bigint-buffer/dist/browser.js","../node_modules/borsh/lib/index.js","../node_modules/bs58/index.js","../node_modules/eventemitter3/index.js","../node_modules/jayson/lib/client/browser/index.js","../node_modules/jayson/lib/generateRequest.js","../node_modules/rpc-websockets/dist/index.browser.js","../node_modules/rpc-websockets/dist/lib/client.js","../node_modules/rpc-websockets/dist/lib/client/websocket.browser.js","../node_modules/text-encoding-utf-8/lib/encoding.lib.mjs"],"sourcesContent":["function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nmodule.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}\nmodule.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _getPrototypeOf(o);\n}\nmodule.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var setPrototypeOf = require(\"./setPrototypeOf.js\");\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\nmodule.exports = _inherits, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar assertThisInitialized = require(\"./assertThisInitialized.js\");\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}\nmodule.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _setPrototypeOf(o, p);\n}\nmodule.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nmodule.exports = _toPrimitive, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar toPrimitive = require(\"./toPrimitive.js\");\nfunction _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nmodule.exports = _toPropertyKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;",null,"export function number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nexport function bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nexport function bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new TypeError('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexport function hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nexport function exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nexport function output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output,\n};\nexport default assert;\n","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// The import here is via the package name. This is to ensure\n// that exports mapping/resolution does fall into place.\nimport { crypto } from '@noble/hashes/crypto';\n// Cast array to different type\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// There is almost no big endian hardware, but js typed arrays uses platform specific endianness.\n// So, just to be sure not to corrupt anything.\nif (!isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))\n */\nexport function bytesToHex(uint8a) {\n    // pre-caching improves the speed 6x\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\n/**\n * @example hexToBytes('deadbeef')\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow. However, call to async function will return Promise\n// which will be fullfiled only on next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string') {\n        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n    }\n    return new TextEncoder().encode(str);\n}\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!(data instanceof Uint8Array))\n        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n    return data;\n}\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nexport function concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\n// For runtime check if class implements interface\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n        throw new TypeError('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexport function wrapConstructor(hashConstructor) {\n    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();\n    const tmp = hashConstructor();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashConstructor();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG\n */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto.web) {\n        return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    }\n    else if (crypto.node) {\n        return new Uint8Array(crypto.node.randomBytes(bytesLength).buffer);\n    }\n    else {\n        throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n}\n","export const crypto = {\n    node: undefined,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\n","import assert from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nexport class SHA2 extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        assert.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        assert.exists(this);\n        assert.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const state = this.get();\n        const outLen = len / 4;\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n","const U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nexport function fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nexport function split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nexport const toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h, l) => l;\nconst rotr32L = (h, l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nexport function add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n","import { SHA2 } from './_sha2.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n)));\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = new Uint32Array(80);\nconst SHA512_W_L = new Uint32Array(80);\nexport class SHA512 extends SHA2 {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexport const sha512 = wrapConstructor(() => new SHA512());\nexport const sha512_256 = wrapConstructor(() => new SHA512_256());\nexport const sha384 = wrapConstructor(() => new SHA384());\n","/*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst CU_O = BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989');\nconst CURVE = Object.freeze({\n    a: BigInt(-1),\n    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n    P: BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949'),\n    l: CU_O,\n    n: CU_O,\n    h: BigInt(8),\n    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n});\nexport { CURVE };\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nconst SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\nconst SQRT_D = BigInt('6853475219497561581579357271197624642482790079785650197046958215289687604742');\nconst SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\nconst INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\nconst ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\nconst D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\nclass ExtendedPoint {\n    constructor(x, y, z, t) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.t = t;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('ExtendedPoint#fromAffine: expected Point');\n        }\n        if (p.equals(Point.ZERO))\n            return ExtendedPoint.ZERO;\n        return new ExtendedPoint(p.x, p.y, _1n, mod(p.x * p.y));\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return this.toAffineBatch(points).map(this.fromAffine);\n    }\n    equals(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const X1Z2 = mod(X1 * Z2);\n        const X2Z1 = mod(X2 * Z1);\n        const Y1Z2 = mod(Y1 * Z2);\n        const Y2Z1 = mod(Y2 * Z1);\n        return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n    negate() {\n        return new ExtendedPoint(mod(-this.x), this.y, this.z, mod(-this.t));\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { a } = CURVE;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(_2n * mod(Z1 * Z1));\n        const D = mod(a * A);\n        const x1y1 = X1 + Y1;\n        const E = mod(mod(x1y1 * x1y1) - A - B);\n        const G = D + B;\n        const F = G - C;\n        const H = D - B;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    add(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1, t: T1 } = this;\n        const { x: X2, y: Y2, z: Z2, t: T2 } = other;\n        const A = mod((Y1 - X1) * (Y2 + X2));\n        const B = mod((Y1 + X1) * (Y2 - X2));\n        const F = mod(B - A);\n        if (F === _0n)\n            return this.double();\n        const C = mod(Z1 * _2n * T2);\n        const D = mod(T1 * _2n * Z2);\n        const E = D + C;\n        const G = B + A;\n        const H = D - C;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    precomputeWindow(W) {\n        const windows = 1 + 256 / W;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(ExtendedPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = ExtendedPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = ExtendedPoint.ZERO;\n        let f = ExtendedPoint.ZERO;\n        const windows = 1 + 256 / W;\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            if (wbits === 0) {\n                let pr = precomputes[offset];\n                if (window % 2)\n                    pr = pr.negate();\n                f = f.add(pr);\n            }\n            else {\n                let cached = precomputes[offset + Math.abs(wbits) - 1];\n                if (wbits < 0)\n                    cached = cached.negate();\n                p = p.add(cached);\n            }\n        }\n        return ExtendedPoint.normalizeZ([p, f])[0];\n    }\n    multiply(scalar, affinePoint) {\n        return this.wNAF(normalizeScalar(scalar, CURVE.l), affinePoint);\n    }\n    multiplyUnsafe(scalar) {\n        let n = normalizeScalar(scalar, CURVE.l, false);\n        const G = ExtendedPoint.BASE;\n        const P0 = ExtendedPoint.ZERO;\n        if (n === _0n)\n            return P0;\n        if (this.equals(P0) || n === _1n)\n            return this;\n        if (this.equals(G))\n            return this.wNAF(n);\n        let p = P0;\n        let d = this;\n        while (n > _0n) {\n            if (n & _1n)\n                p = p.add(d);\n            d = d.double();\n            n >>= _1n;\n        }\n        return p;\n    }\n    isSmallOrder() {\n        return this.multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n    }\n    isTorsionFree() {\n        return this.multiplyUnsafe(CURVE.l).equals(ExtendedPoint.ZERO);\n    }\n    toAffine(invZ = invert(this.z)) {\n        const { x, y, z } = this;\n        const ax = mod(x * invZ);\n        const ay = mod(y * invZ);\n        const zz = mod(z * invZ);\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n    fromRistrettoBytes() {\n        legacyRist();\n    }\n    toRistrettoBytes() {\n        legacyRist();\n    }\n    fromRistrettoHash() {\n        legacyRist();\n    }\n}\nExtendedPoint.BASE = new ExtendedPoint(CURVE.Gx, CURVE.Gy, _1n, mod(CURVE.Gx * CURVE.Gy));\nExtendedPoint.ZERO = new ExtendedPoint(_0n, _1n, _1n, _0n);\nfunction assertExtPoint(other) {\n    if (!(other instanceof ExtendedPoint))\n        throw new TypeError('ExtendedPoint expected');\n}\nfunction assertRstPoint(other) {\n    if (!(other instanceof RistrettoPoint))\n        throw new TypeError('RistrettoPoint expected');\n}\nfunction legacyRist() {\n    throw new Error('Legacy method: switch to RistrettoPoint');\n}\nclass RistrettoPoint {\n    constructor(ep) {\n        this.ep = ep;\n    }\n    static calcElligatorRistrettoMap(r0) {\n        const { d } = CURVE;\n        const r = mod(SQRT_M1 * r0 * r0);\n        const Ns = mod((r + _1n) * ONE_MINUS_D_SQ);\n        let c = BigInt(-1);\n        const D = mod((c - d * r) * mod(r + d));\n        let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D);\n        let s_ = mod(s * r0);\n        if (!edIsNegative(s_))\n            s_ = mod(-s_);\n        if (!Ns_D_is_sq)\n            s = s_;\n        if (!Ns_D_is_sq)\n            c = r;\n        const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D);\n        const s2 = s * s;\n        const W0 = mod((s + s) * D);\n        const W1 = mod(Nt * SQRT_AD_MINUS_ONE);\n        const W2 = mod(_1n - s2);\n        const W3 = mod(_1n + s2);\n        return new ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n    }\n    static hashToCurve(hex) {\n        hex = ensureBytes(hex, 64);\n        const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n        const R1 = this.calcElligatorRistrettoMap(r1);\n        const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n        const R2 = this.calcElligatorRistrettoMap(r2);\n        return new RistrettoPoint(R1.add(R2));\n    }\n    static fromHex(hex) {\n        hex = ensureBytes(hex, 32);\n        const { a, d } = CURVE;\n        const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n        const s = bytes255ToNumberLE(hex);\n        if (!equalBytes(numberTo32BytesLE(s), hex) || edIsNegative(s))\n            throw new Error(emsg);\n        const s2 = mod(s * s);\n        const u1 = mod(_1n + a * s2);\n        const u2 = mod(_1n - a * s2);\n        const u1_2 = mod(u1 * u1);\n        const u2_2 = mod(u2 * u2);\n        const v = mod(a * d * u1_2 - u2_2);\n        const { isValid, value: I } = invertSqrt(mod(v * u2_2));\n        const Dx = mod(I * u2);\n        const Dy = mod(I * Dx * v);\n        let x = mod((s + s) * Dx);\n        if (edIsNegative(x))\n            x = mod(-x);\n        const y = mod(u1 * Dy);\n        const t = mod(x * y);\n        if (!isValid || edIsNegative(t) || y === _0n)\n            throw new Error(emsg);\n        return new RistrettoPoint(new ExtendedPoint(x, y, _1n, t));\n    }\n    toRawBytes() {\n        let { x, y, z, t } = this.ep;\n        const u1 = mod(mod(z + y) * mod(z - y));\n        const u2 = mod(x * y);\n        const u2sq = mod(u2 * u2);\n        const { value: invsqrt } = invertSqrt(mod(u1 * u2sq));\n        const D1 = mod(invsqrt * u1);\n        const D2 = mod(invsqrt * u2);\n        const zInv = mod(D1 * D2 * t);\n        let D;\n        if (edIsNegative(t * zInv)) {\n            let _x = mod(y * SQRT_M1);\n            let _y = mod(x * SQRT_M1);\n            x = _x;\n            y = _y;\n            D = mod(D1 * INVSQRT_A_MINUS_D);\n        }\n        else {\n            D = D2;\n        }\n        if (edIsNegative(x * zInv))\n            y = mod(-y);\n        let s = mod((z - y) * D);\n        if (edIsNegative(s))\n            s = mod(-s);\n        return numberTo32BytesLE(s);\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toString() {\n        return this.toHex();\n    }\n    equals(other) {\n        assertRstPoint(other);\n        const a = this.ep;\n        const b = other.ep;\n        const one = mod(a.x * b.y) === mod(a.y * b.x);\n        const two = mod(a.y * b.y) === mod(a.x * b.x);\n        return one || two;\n    }\n    add(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.add(other.ep));\n    }\n    subtract(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.subtract(other.ep));\n    }\n    multiply(scalar) {\n        return new RistrettoPoint(this.ep.multiply(scalar));\n    }\n    multiplyUnsafe(scalar) {\n        return new RistrettoPoint(this.ep.multiplyUnsafe(scalar));\n    }\n}\nRistrettoPoint.BASE = new RistrettoPoint(ExtendedPoint.BASE);\nRistrettoPoint.ZERO = new RistrettoPoint(ExtendedPoint.ZERO);\nconst pointPrecomputes = new WeakMap();\nclass Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    static fromHex(hex, strict = true) {\n        const { d, P } = CURVE;\n        hex = ensureBytes(hex, 32);\n        const normed = hex.slice();\n        normed[31] = hex[31] & ~0x80;\n        const y = bytesToNumberLE(normed);\n        if (strict && y >= P)\n            throw new Error('Expected 0 < hex < P');\n        if (!strict && y >= POW_2_256)\n            throw new Error('Expected 0 < hex < 2**256');\n        const y2 = mod(y * y);\n        const u = mod(y2 - _1n);\n        const v = mod(d * y2 + _1n);\n        let { isValid, value: x } = uvRatio(u, v);\n        if (!isValid)\n            throw new Error('Point.fromHex: invalid y coordinate');\n        const isXOdd = (x & _1n) === _1n;\n        const isLastByteOdd = (hex[31] & 0x80) !== 0;\n        if (isLastByteOdd !== isXOdd) {\n            x = mod(-x);\n        }\n        return new Point(x, y);\n    }\n    static async fromPrivateKey(privateKey) {\n        return (await getExtendedPublicKey(privateKey)).point;\n    }\n    toRawBytes() {\n        const bytes = numberTo32BytesLE(this.y);\n        bytes[31] |= this.x & _1n ? 0x80 : 0;\n        return bytes;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toX25519() {\n        const { y } = this;\n        const u = mod((_1n + y) * invert(_1n - y));\n        return numberTo32BytesLE(u);\n    }\n    isTorsionFree() {\n        return ExtendedPoint.fromAffine(this).isTorsionFree();\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(mod(-this.x), this.y);\n    }\n    add(other) {\n        return ExtendedPoint.fromAffine(this).add(ExtendedPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return ExtendedPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _1n);\nclass Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex, 64);\n        const r = Point.fromHex(bytes.slice(0, 32), false);\n        const s = bytesToNumberLE(bytes.slice(32, 64));\n        return new Signature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!(r instanceof Point))\n            throw new Error('Expected Point instance');\n        normalizeScalar(s, CURVE.l, false);\n        return this;\n    }\n    toRawBytes() {\n        const u8 = new Uint8Array(64);\n        u8.set(this.r.toRawBytes());\n        u8.set(numberTo32BytesLE(this.s), 32);\n        return u8;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n}\nexport { ExtendedPoint, RistrettoPoint, Point, Signature };\nfunction concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array list');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction numberTo32BytesBE(num) {\n    const length = 32;\n    const hex = num.toString(16).padStart(length * 2, '0');\n    return hexToBytes(hex);\n}\nfunction numberTo32BytesLE(num) {\n    return numberTo32BytesBE(num).reverse();\n}\nfunction edIsNegative(num) {\n    return (mod(num) & _1n) === _1n;\n}\nfunction bytesToNumberLE(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    return BigInt('0x' + bytesToHex(Uint8Array.from(uint8a).reverse()));\n}\nconst MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nfunction bytes255ToNumberLE(bytes) {\n    return mod(bytesToNumberLE(bytes) & MAX_255B);\n}\nfunction mod(a, b = CURVE.P) {\n    const res = a % b;\n    return res >= _0n ? res : b + res;\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const tmp = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = mod(acc * tmp[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return tmp;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction pow_2_252_3(x) {\n    const { P } = CURVE;\n    const _5n = BigInt(5);\n    const _10n = BigInt(10);\n    const _20n = BigInt(20);\n    const _40n = BigInt(40);\n    const _80n = BigInt(80);\n    const x2 = (x * x) % P;\n    const b2 = (x2 * x) % P;\n    const b4 = (pow2(b2, _2n) * b2) % P;\n    const b5 = (pow2(b4, _1n) * x) % P;\n    const b10 = (pow2(b5, _5n) * b5) % P;\n    const b20 = (pow2(b10, _10n) * b10) % P;\n    const b40 = (pow2(b20, _20n) * b20) % P;\n    const b80 = (pow2(b40, _40n) * b40) % P;\n    const b160 = (pow2(b80, _80n) * b80) % P;\n    const b240 = (pow2(b160, _80n) * b80) % P;\n    const b250 = (pow2(b240, _10n) * b10) % P;\n    const pow_p_5_8 = (pow2(b250, _2n) * x) % P;\n    return { pow_p_5_8, b2 };\n}\nfunction uvRatio(u, v) {\n    const v3 = mod(v * v * v);\n    const v7 = mod(v3 * v3 * v);\n    const pow = pow_2_252_3(u * v7).pow_p_5_8;\n    let x = mod(u * v3 * pow);\n    const vx2 = mod(v * x * x);\n    const root1 = x;\n    const root2 = mod(x * SQRT_M1);\n    const useRoot1 = vx2 === u;\n    const useRoot2 = vx2 === mod(-u);\n    const noRoot = vx2 === mod(-u * SQRT_M1);\n    if (useRoot1)\n        x = root1;\n    if (useRoot2 || noRoot)\n        x = root2;\n    if (edIsNegative(x))\n        x = mod(-x);\n    return { isValid: useRoot1 || useRoot2, value: x };\n}\nfunction invertSqrt(number) {\n    return uvRatio(_1n, number);\n}\nfunction modlLE(hash) {\n    return mod(bytesToNumberLE(hash), CURVE.l);\n}\nfunction equalBytes(b1, b2) {\n    if (b1.length !== b2.length) {\n        return false;\n    }\n    for (let i = 0; i < b1.length; i++) {\n        if (b1[i] !== b2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction ensureBytes(hex, expectedLength) {\n    const bytes = hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n    if (typeof expectedLength === 'number' && bytes.length !== expectedLength)\n        throw new Error(`Expected ${expectedLength} bytes`);\n    return bytes;\n}\nfunction normalizeScalar(num, max, strict = true) {\n    if (!max)\n        throw new TypeError('Specify max value');\n    if (typeof num === 'number' && Number.isSafeInteger(num))\n        num = BigInt(num);\n    if (typeof num === 'bigint' && num < max) {\n        if (strict) {\n            if (_0n < num)\n                return num;\n        }\n        else {\n            if (_0n <= num)\n                return num;\n        }\n    }\n    throw new TypeError('Expected valid scalar: 0 < scalar < max');\n}\nfunction adjustBytes25519(bytes) {\n    bytes[0] &= 248;\n    bytes[31] &= 127;\n    bytes[31] |= 64;\n    return bytes;\n}\nfunction decodeScalar25519(n) {\n    return bytesToNumberLE(adjustBytes25519(ensureBytes(n, 32)));\n}\nfunction checkPrivateKey(key) {\n    key =\n        typeof key === 'bigint' || typeof key === 'number'\n            ? numberTo32BytesBE(normalizeScalar(key, POW_2_256))\n            : ensureBytes(key);\n    if (key.length !== 32)\n        throw new Error(`Expected 32 bytes`);\n    return key;\n}\nfunction getKeyFromHash(hashed) {\n    const head = adjustBytes25519(hashed.slice(0, 32));\n    const prefix = hashed.slice(32, 64);\n    const scalar = modlLE(head);\n    const point = Point.BASE.multiply(scalar);\n    const pointBytes = point.toRawBytes();\n    return { head, prefix, scalar, point, pointBytes };\n}\nlet _sha512Sync;\nfunction sha512s(...m) {\n    if (typeof _sha512Sync !== 'function')\n        throw new Error('utils.sha512Sync must be set to use sync methods');\n    return _sha512Sync(...m);\n}\nasync function getExtendedPublicKey(key) {\n    return getKeyFromHash(await utils.sha512(checkPrivateKey(key)));\n}\nfunction getExtendedPublicKeySync(key) {\n    return getKeyFromHash(sha512s(checkPrivateKey(key)));\n}\nexport async function getPublicKey(privateKey) {\n    return (await getExtendedPublicKey(privateKey)).pointBytes;\n}\nfunction getPublicKeySync(privateKey) {\n    return getExtendedPublicKeySync(privateKey).pointBytes;\n}\nexport async function sign(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = await getExtendedPublicKey(privateKey);\n    const r = modlLE(await utils.sha512(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(await utils.sha512(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nfunction signSync(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = getExtendedPublicKeySync(privateKey);\n    const r = modlLE(sha512s(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(sha512s(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nfunction prepareVerification(sig, message, publicKey) {\n    message = ensureBytes(message);\n    if (!(publicKey instanceof Point))\n        publicKey = Point.fromHex(publicKey, false);\n    const { r, s } = sig instanceof Signature ? sig.assertValidity() : Signature.fromHex(sig);\n    const SB = ExtendedPoint.BASE.multiplyUnsafe(s);\n    return { r, s, SB, pub: publicKey, msg: message };\n}\nfunction finishVerification(publicKey, r, SB, hashed) {\n    const k = modlLE(hashed);\n    const kA = ExtendedPoint.fromAffine(publicKey).multiplyUnsafe(k);\n    const RkA = ExtendedPoint.fromAffine(r).add(kA);\n    return RkA.subtract(SB).multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n}\nexport async function verify(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = await utils.sha512(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nfunction verifySync(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = sha512s(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nexport const sync = {\n    getExtendedPublicKey: getExtendedPublicKeySync,\n    getPublicKey: getPublicKeySync,\n    sign: signSync,\n    verify: verifySync,\n};\nexport async function getSharedSecret(privateKey, publicKey) {\n    const { head } = await getExtendedPublicKey(privateKey);\n    const u = Point.fromHex(publicKey).toX25519();\n    return curve25519.scalarMult(head, u);\n}\nPoint.BASE._setWindowSize(8);\nfunction cswap(swap, x_2, x_3) {\n    const dummy = mod(swap * (x_2 - x_3));\n    x_2 = mod(x_2 - dummy);\n    x_3 = mod(x_3 + dummy);\n    return [x_2, x_3];\n}\nfunction montgomeryLadder(pointU, scalar) {\n    const { P } = CURVE;\n    const u = normalizeScalar(pointU, P);\n    const k = normalizeScalar(scalar, P);\n    const a24 = BigInt(121665);\n    const x_1 = u;\n    let x_2 = _1n;\n    let z_2 = _0n;\n    let x_3 = u;\n    let z_3 = _1n;\n    let swap = _0n;\n    let sw;\n    for (let t = BigInt(255 - 1); t >= _0n; t--) {\n        const k_t = (k >> t) & _1n;\n        swap ^= k_t;\n        sw = cswap(swap, x_2, x_3);\n        x_2 = sw[0];\n        x_3 = sw[1];\n        sw = cswap(swap, z_2, z_3);\n        z_2 = sw[0];\n        z_3 = sw[1];\n        swap = k_t;\n        const A = x_2 + z_2;\n        const AA = mod(A * A);\n        const B = x_2 - z_2;\n        const BB = mod(B * B);\n        const E = AA - BB;\n        const C = x_3 + z_3;\n        const D = x_3 - z_3;\n        const DA = mod(D * A);\n        const CB = mod(C * B);\n        const dacb = DA + CB;\n        const da_cb = DA - CB;\n        x_3 = mod(dacb * dacb);\n        z_3 = mod(x_1 * mod(da_cb * da_cb));\n        x_2 = mod(AA * BB);\n        z_2 = mod(E * (AA + mod(a24 * E)));\n    }\n    sw = cswap(swap, x_2, x_3);\n    x_2 = sw[0];\n    x_3 = sw[1];\n    sw = cswap(swap, z_2, z_3);\n    z_2 = sw[0];\n    z_3 = sw[1];\n    const { pow_p_5_8, b2 } = pow_2_252_3(z_2);\n    const xp2 = mod(pow2(pow_p_5_8, BigInt(3)) * b2);\n    return mod(x_2 * xp2);\n}\nfunction encodeUCoordinate(u) {\n    return numberTo32BytesLE(mod(u, CURVE.P));\n}\nfunction decodeUCoordinate(uEnc) {\n    const u = ensureBytes(uEnc, 32);\n    u[31] &= 127;\n    return bytesToNumberLE(u);\n}\nexport const curve25519 = {\n    BASE_POINT_U: '0900000000000000000000000000000000000000000000000000000000000000',\n    scalarMult(privateKey, publicKey) {\n        const u = decodeUCoordinate(publicKey);\n        const p = decodeScalar25519(privateKey);\n        const pu = montgomeryLadder(u, p);\n        if (pu === _0n)\n            throw new Error('Invalid private or public key received');\n        return encodeUCoordinate(pu);\n    },\n    scalarMultBase(privateKey) {\n        return curve25519.scalarMult(privateKey, curve25519.BASE_POINT_U);\n    },\n};\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    getExtendedPublicKey,\n    mod,\n    invert,\n    TORSION_SUBGROUP: [\n        '0100000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n        '0000000000000000000000000000000000000000000000000000000000000080',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n        'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n        '0000000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n    ],\n    hashToPrivateScalar: (hash) => {\n        hash = ensureBytes(hash);\n        if (hash.length < 40 || hash.length > 1024)\n            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n        return mod(bytesToNumberLE(hash), CURVE.l - _1n) + _1n;\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return new Uint8Array(randomBytes(bytesLength).buffer);\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => {\n        return utils.randomBytes(32);\n    },\n    sha512: async (...messages) => {\n        const message = concatBytes(...messages);\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-512', message.buffer);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            return Uint8Array.from(crypto.node.createHash('sha512').update(message).digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha512 function\");\n        }\n    },\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point.equals(Point.BASE) ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_2n);\n        return cached;\n    },\n    sha512Sync: undefined,\n};\nObject.defineProperties(utils, {\n    sha512Sync: {\n        configurable: false,\n        get() {\n            return _sha512Sync;\n        },\n        set(val) {\n            if (!_sha512Sync)\n                _sha512Sync = val;\n        },\n    },\n});\n","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = wrapConstructor(() => new SHA256());\n","/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\nexport type Failure = {\n  value: any\n  key: any\n  type: string\n  refinement: string | undefined\n  message: string\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\n\nexport class StructError extends TypeError {\n  value: any\n  key!: any\n  type!: string\n  refinement!: string | undefined\n  path!: Array<any>\n  branch!: Array<any>\n  failures: () => Array<Failure>;\n  [x: string]: any\n\n  constructor(failure: Failure, failures: () => Generator<Failure>) {\n    let cached: Array<Failure> | undefined\n    const { message, ...rest } = failure\n    const { path } = failure\n    const msg =\n      path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`\n    super(msg)\n    Object.assign(this, rest)\n    this.name = this.constructor.name\n    this.failures = () => {\n      return (cached ??= [failure, ...failures()])\n    }\n  }\n}\n","import { Struct, Infer, Result, Context, Describe } from './struct'\nimport { Failure } from './error'\n\n/**\n * Check if a value is an iterator.\n */\n\nfunction isIterable<T>(x: unknown): x is Iterable<T> {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function'\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isObject(x: unknown): x is object {\n  return typeof x === 'object' && x != null\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isPlainObject(x: unknown): x is { [key: string]: any } {\n  if (Object.prototype.toString.call(x) !== '[object Object]') {\n    return false\n  }\n\n  const prototype = Object.getPrototypeOf(x)\n  return prototype === null || prototype === Object.prototype\n}\n\n/**\n * Return a value as a printable string.\n */\n\nexport function print(value: any): string {\n  return typeof value === 'string' ? JSON.stringify(value) : `${value}`\n}\n\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\n\nexport function shiftIterator<T>(input: Iterator<T>): T | undefined {\n  const { done, value } = input.next()\n  return done ? undefined : value\n}\n\n/**\n * Convert a single validation result to a failure.\n */\n\nexport function toFailure<T, S>(\n  result: string | boolean | Partial<Failure>,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): Failure | undefined {\n  if (result === true) {\n    return\n  } else if (result === false) {\n    result = {}\n  } else if (typeof result === 'string') {\n    result = { message: result }\n  }\n\n  const { path, branch } = context\n  const { type } = struct\n  const {\n    refinement,\n    message = `Expected a value of type \\`${type}\\`${\n      refinement ? ` with refinement \\`${refinement}\\`` : ''\n    }, but received: \\`${print(value)}\\``,\n  } = result\n\n  return {\n    value,\n    type,\n    refinement,\n    key: path[path.length - 1],\n    path,\n    branch,\n    ...result,\n    message,\n  }\n}\n\n/**\n * Convert a validation result to an iterable of failures.\n */\n\nexport function* toFailures<T, S>(\n  result: Result,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): IterableIterator<Failure> {\n  if (!isIterable(result)) {\n    result = [result]\n  }\n\n  for (const r of result) {\n    const failure = toFailure(r, context, struct, value)\n\n    if (failure) {\n      yield failure\n    }\n  }\n}\n\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\n\nexport function* run<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    path?: any[]\n    branch?: any[]\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): IterableIterator<[Failure, undefined] | [undefined, T]> {\n  const { path = [], branch = [value], coerce = false, mask = false } = options\n  const ctx: Context = { path, branch }\n\n  if (coerce) {\n    value = struct.coercer(value, ctx)\n\n    if (\n      mask &&\n      struct.type !== 'type' &&\n      isObject(struct.schema) &&\n      isObject(value) &&\n      !Array.isArray(value)\n    ) {\n      for (const key in value) {\n        if (struct.schema[key] === undefined) {\n          delete value[key]\n        }\n      }\n    }\n  }\n\n  let valid = true\n\n  for (const failure of struct.validator(value, ctx)) {\n    valid = false\n    yield [failure, undefined]\n  }\n\n  for (let [k, v, s] of struct.entries(value, ctx)) {\n    const ts = run(v, s as Struct, {\n      path: k === undefined ? path : [...path, k],\n      branch: k === undefined ? branch : [...branch, v],\n      coerce,\n      mask,\n    })\n\n    for (const t of ts) {\n      if (t[0]) {\n        valid = false\n        yield [t[0], undefined]\n      } else if (coerce) {\n        v = t[1]\n\n        if (k === undefined) {\n          value = v\n        } else if (value instanceof Map) {\n          value.set(k, v)\n        } else if (value instanceof Set) {\n          value.add(v)\n        } else if (isObject(value)) {\n          value[k] = v\n        }\n      }\n    }\n  }\n\n  if (valid) {\n    for (const failure of struct.refiner(value as T, ctx)) {\n      valid = false\n      yield [failure, undefined]\n    }\n  }\n\n  if (valid) {\n    yield [undefined, value as T]\n  }\n}\n\n/**\n * Assign properties from one type to another, overwriting existing.\n */\n\nexport type Assign<T, U> = Simplify<U & Omit<T, keyof U>>\n\n/**\n * A schema for enum structs.\n */\n\nexport type EnumSchema<T extends string | number> = { [K in T]: K }\n\n/**\n * Check if a type is an exact match.\n */\n\nexport type IsMatch<T, G> = T extends G ? (G extends T ? T : never) : never\n\n/**\n * Check if a type is a record type.\n */\n\nexport type IsRecord<T> = T extends object\n  ? string extends keyof T\n    ? T\n    : never\n  : never\n/**\n * Check if a type is a tuple.\n */\n\nexport type IsTuple<T> = T extends [any]\n  ? T\n  : T extends [any, any]\n  ? T\n  : T extends [any, any, any]\n  ? T\n  : T extends [any, any, any, any]\n  ? T\n  : T extends [any, any, any, any, any]\n  ? T\n  : never\n\n/**\n * Check if a type is a union.\n */\n\nexport type IsUnion<T, U extends T = T> = (\n  T extends any ? (U extends T ? false : true) : false\n) extends false\n  ? never\n  : T\n\n/**\n * A schema for object structs.\n */\n\nexport type ObjectSchema = Record<string, Struct<any, any>>\n\n/**\n * Infer a type from an object struct schema.\n */\n\nexport type ObjectType<S extends ObjectSchema> = Simplify<\n  Optionalize<{ [K in keyof S]: Infer<S[K]> }>\n>\n\n/**\n * Omit properties from a type that extend from a specific type.\n */\n\nexport type OmitBy<T, V> = Omit<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Normalize properties of a type that allow `undefined` to make them optional.\n */\n\nexport type Optionalize<S extends object> = OmitBy<S, undefined> &\n  Partial<PickBy<S, undefined>>\n\n/**\n * Transform an object schema type to represent a partial.\n */\n\nexport type PartialObjectSchema<S extends ObjectSchema> = {\n  [K in keyof S]: Struct<Infer<S[K]> | undefined>\n}\n\n/**\n * Pick properties from a type that extend from a specific type.\n */\n\nexport type PickBy<T, V> = Pick<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Simplifies a type definition to its most basic representation.\n */\n\nexport type Simplify<T> = T extends any[] | Date\n  ? T\n  : { [K in keyof T]: T[K] } & {}\n\nexport type If<B extends Boolean, Then, Else> = B extends true ? Then : Else\n\n/**\n * A schema for any type of struct.\n */\n\nexport type StructSchema<T> = [T] extends [string]\n  ? [T] extends [IsMatch<T, string>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [number]\n  ? [T] extends [IsMatch<T, number>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [boolean]\n  ? [T] extends [IsMatch<T, boolean>]\n    ? null\n    : T\n  : T extends\n      | bigint\n      | symbol\n      | undefined\n      | null\n      | Function\n      | Date\n      | Error\n      | RegExp\n      | Map<any, any>\n      | WeakMap<any, any>\n      | Set<any>\n      | WeakSet<any>\n      | Promise<any>\n  ? null\n  : T extends Array<infer E>\n  ? T extends IsTuple<T>\n    ? null\n    : Struct<E>\n  : T extends object\n  ? T extends IsRecord<T>\n    ? null\n    : { [K in keyof T]: Describe<T[K]> }\n  : null\n\n/**\n * A schema for tuple structs.\n */\n\nexport type TupleSchema<T> = { [K in keyof T]: Struct<T[K]> }\n","import { toFailures, shiftIterator, StructSchema, run } from './utils'\nimport { StructError, Failure } from './error'\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nexport class Struct<T = unknown, S = unknown> {\n  readonly TYPE!: T\n  type: string\n  schema: S\n  coercer: (value: unknown, context: Context) => unknown\n  validator: (value: unknown, context: Context) => Iterable<Failure>\n  refiner: (value: T, context: Context) => Iterable<Failure>\n  entries: (\n    value: unknown,\n    context: Context\n  ) => Iterable<[string | number, unknown, Struct<any> | Struct<never>]>\n\n  constructor(props: {\n    type: string\n    schema: S\n    coercer?: Coercer\n    validator?: Validator\n    refiner?: Refiner<T>\n    entries?: Struct<T, S>['entries']\n  }) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = (value: unknown) => value,\n      entries = function* () {},\n    } = props\n\n    this.type = type\n    this.schema = schema\n    this.entries = entries\n    this.coercer = coercer\n\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.validator = () => []\n    }\n\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.refiner = () => []\n    }\n  }\n\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n  assert(value: unknown): asserts value is T {\n    return assert(value, this)\n  }\n\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n  create(value: unknown): T {\n    return create(value, this)\n  }\n\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n  is(value: unknown): value is T {\n    return is(value, this)\n  }\n\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n  mask(value: unknown): T {\n    return mask(value, this)\n  }\n\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n  validate(\n    value: unknown,\n    options: {\n      coerce?: boolean\n    } = {}\n  ): [StructError, undefined] | [undefined, T] {\n    return validate(value, this, options)\n  }\n}\n\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nexport function assert<T, S>(\n  value: unknown,\n  struct: Struct<T, S>\n): asserts value is T {\n  const result = validate(value, struct)\n\n  if (result[0]) {\n    throw result[0]\n  }\n}\n\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nexport function create<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nexport function mask<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true, mask: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Check if a value passes a struct.\n */\n\nexport function is<T, S>(value: unknown, struct: Struct<T, S>): value is T {\n  const result = validate(value, struct)\n  return !result[0]\n}\n\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nexport function validate<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): [StructError, undefined] | [undefined, T] {\n  const tuples = run(value, struct, options)\n  const tuple = shiftIterator(tuples)!\n\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0]\n        }\n      }\n    })\n\n    return [error, undefined]\n  } else {\n    const v = tuple[1]\n    return [undefined, v]\n  }\n}\n\n/**\n * A `Context` contains information about the current location of the\n * validation inside the initial input value.\n */\n\nexport type Context = {\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * A type utility to extract the type from a `Struct` class.\n */\n\nexport type Infer<T extends Struct<any, any>> = T['TYPE']\n\n/**\n * A type utility to describe that a struct represents a TypeScript type.\n */\n\nexport type Describe<T> = Struct<T, StructSchema<T>>\n\n/**\n * A `Result` is returned from validation functions.\n */\n\nexport type Result =\n  | boolean\n  | string\n  | Partial<Failure>\n  | Iterable<boolean | string | Partial<Failure>>\n\n/**\n * A `Coercer` takes an unknown value and optionally coerces it.\n */\n\nexport type Coercer<T = unknown> = (value: T, context: Context) => unknown\n\n/**\n * A `Validator` takes an unknown value and validates it.\n */\n\nexport type Validator = (value: unknown, context: Context) => Result\n\n/**\n * A `Refiner` takes a value of a known type and validates it against a further\n * constraint.\n */\n\nexport type Refiner<T> = (value: T, context: Context) => Result\n","import { Struct, Context, Validator } from '../struct'\nimport { object, optional } from './types'\nimport { ObjectSchema, Assign, ObjectType, PartialObjectSchema } from '../utils'\n\n/**\n * Create a new struct that combines the properties properties from multiple\n * object structs.\n *\n * Like JavaScript's `Object.assign` utility.\n */\n\nexport function assign<A extends ObjectSchema, B extends ObjectSchema>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>\n): Struct<ObjectType<Assign<A, B>>, Assign<A, B>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>\n): Struct<ObjectType<Assign<Assign<A, B>, C>>, Assign<Assign<A, B>, C>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>\n): Struct<\n  ObjectType<Assign<Assign<Assign<A, B>, C>, D>>,\n  Assign<Assign<Assign<A, B>, C>, D>\n>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema,\n  E extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>,\n  E: Struct<ObjectType<E>, E>\n): Struct<\n  ObjectType<Assign<Assign<Assign<Assign<A, B>, C>, D>, E>>,\n  Assign<Assign<Assign<Assign<A, B>, C>, D>, E>\n>\nexport function assign(...Structs: Struct<any>[]): any {\n  const schemas = Structs.map((s) => s.schema)\n  const schema = Object.assign({}, ...schemas)\n  return object(schema)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n */\n\nexport function define<T>(name: string, validator: Validator): Struct<T, null> {\n  return new Struct({ type: name, schema: null, validator })\n}\n\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\nexport function deprecated<T>(\n  struct: Struct<T>,\n  log: (value: unknown, ctx: Context) => void\n): Struct<T> {\n  return new Struct({\n    ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true\n      } else {\n        log(value, ctx)\n        return struct.validator(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\nexport function dynamic<T>(\n  fn: (value: unknown, ctx: Context) => Struct<T, any>\n): Struct<T, null> {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n    *entries(value, ctx) {\n      const struct = fn(value, ctx)\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\nexport function lazy<T>(fn: () => Struct<T, any>): Struct<T, null> {\n  let struct: Struct<T, any> | undefined\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n    *entries(value, ctx) {\n      struct ??= fn()\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      struct ??= fn()\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      struct ??= fn()\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\nexport function omit<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Omit<S, K>>, Omit<S, K>> {\n  const { schema } = struct\n  const subschema: any = { ...schema }\n\n  for (const key of keys) {\n    delete subschema[key]\n  }\n\n  return object(subschema as Omit<S, K>)\n}\n\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\nexport function partial<S extends ObjectSchema>(\n  struct: Struct<ObjectType<S>, S> | S\n): Struct<ObjectType<PartialObjectSchema<S>>, PartialObjectSchema<S>> {\n  const schema: any =\n    struct instanceof Struct ? { ...struct.schema } : { ...struct }\n\n  for (const key in schema) {\n    schema[key] = optional(schema[key])\n  }\n\n  return object(schema) as any\n}\n\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\nexport function pick<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Pick<S, K>>, Pick<S, K>> {\n  const { schema } = struct\n  const subschema: any = {}\n\n  for (const key of keys) {\n    subschema[key] = schema[key]\n  }\n\n  return object(subschema as Pick<S, K>)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\nexport function struct<T>(name: string, validator: Validator): Struct<T, null> {\n  console.warn(\n    'superstruct@0.11 - The `struct` helper has been renamed to `define`.'\n  )\n\n  return define(name, validator)\n}\n","import { Infer, Struct } from '../struct'\nimport { define } from './utilities'\nimport {\n  TupleSchema,\n  ObjectSchema,\n  ObjectType,\n  print,\n  run,\n  isObject,\n} from '../utils'\n\n/**\n * Ensure that any value passes validation.\n */\n\nexport function any(): Struct<any, null> {\n  return define('any', () => true)\n}\n\n/**\n * Ensure that a value is an array and that its elements are of a specific type.\n *\n * Note: If you omit the element struct, the arrays elements will not be\n * iterated at all. This can be helpful for cases where performance is critical,\n * and it is preferred to using `array(any())`.\n */\n\nexport function array<T extends Struct<any>>(Element: T): Struct<Infer<T>[], T>\nexport function array(): Struct<unknown[], undefined>\nexport function array<T extends Struct<any>>(Element?: T): any {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array value, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a boolean.\n */\n\nexport function boolean(): Struct<boolean, null> {\n  return define('boolean', (value) => {\n    return typeof value === 'boolean'\n  })\n}\n\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\nexport function date(): Struct<Date, null> {\n  return define('date', (value) => {\n    return (\n      (value instanceof Date && !isNaN(value.getTime())) ||\n      `Expected a valid \\`Date\\` object, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is one of a set of potential values.\n *\n * Note: after creating the struct, you can access the definition of the\n * potential values as `struct.schema`.\n */\n\nexport function enums<T extends number>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends string>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends number | string>(values: readonly T[]): any {\n  const schema: any = {}\n  const description = values.map((v) => print(v)).join()\n\n  for (const key of values) {\n    schema[key] = key\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema,\n    validator(value) {\n      return (\n        values.includes(value as any) ||\n        `Expected one of \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a function.\n */\n\nexport function func(): Struct<Function, null> {\n  return define('func', (value) => {\n    return (\n      typeof value === 'function' ||\n      `Expected a function, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\nexport function instance<T extends { new (...args: any): any }>(\n  Class: T\n): Struct<InstanceType<T>, null> {\n  return define('instance', (value) => {\n    return (\n      value instanceof Class ||\n      `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an integer.\n */\n\nexport function integer(): Struct<number, null> {\n  return define('integer', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n      `Expected an integer, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value matches all of a set of types.\n */\n\nexport function intersection<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function intersection<A, B>(\n  Structs: TupleSchema<[A, B]>\n): Struct<A & B, null>\nexport function intersection<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A & B & C, null>\nexport function intersection<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A & B & C & D, null>\nexport function intersection<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A & B & C & D & E, null>\nexport function intersection<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A & B & C & D & E & F, null>\nexport function intersection<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A & B & C & D & E & F & G, null>\nexport function intersection<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A & B & C & D & E & F & G & H, null>\nexport function intersection<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A & B & C & D & E & F & G & H & I, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A & B & C & D & E & F & G & H & I & J, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q,\n  null\n>\nexport function intersection(Structs: Array<Struct<any, any>>): any {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx)\n      }\n    },\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx)\n      }\n    },\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Ensure that a value is an exact value, using `===` for comparison.\n */\n\nexport function literal<T extends boolean>(constant: T): Struct<T, T>\nexport function literal<T extends number>(constant: T): Struct<T, T>\nexport function literal<T extends string>(constant: T): Struct<T, T>\nexport function literal<T>(constant: T): Struct<T, null>\nexport function literal<T>(constant: T): any {\n  const description = print(constant)\n  const t = typeof constant\n  return new Struct({\n    type: 'literal',\n    schema:\n      t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n    validator(value) {\n      return (\n        value === constant ||\n        `Expected the literal \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `Map` object, and that its keys and values are of\n * specific types.\n */\n\nexport function map(): Struct<Map<unknown, unknown>, null>\nexport function map<K, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Map<K, V>, null>\nexport function map<K, V>(Key?: Struct<K>, Value?: Struct<V>): any {\n  return new Struct({\n    type: 'map',\n    schema: null,\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k as string, k, Key]\n          yield [k as string, v, Value]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Map ||\n        `Expected a \\`Map\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that no value ever passes validation.\n */\n\nexport function never(): Struct<never, null> {\n  return define('never', () => false)\n}\n\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nexport function nullable<T, S>(struct: Struct<T, S>): Struct<T | null, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is a number.\n */\n\nexport function number(): Struct<number, null> {\n  return define('number', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value)) ||\n      `Expected a number, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an object, that is has a known set of properties,\n * and that its properties are of specific types.\n *\n * Note: Unrecognized properties will fail validation.\n */\n\nexport function object(): Struct<Record<string, unknown>, null>\nexport function object<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S>\nexport function object<S extends ObjectSchema>(schema?: S): any {\n  const knowns = schema ? Object.keys(schema) : []\n  const Never = never()\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value))\n\n        for (const key of knowns) {\n          unknowns.delete(key)\n          yield [key, value[key], schema[key]]\n        }\n\n        for (const key of unknowns) {\n          yield [key, value[key], Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n    coercer(value) {\n      return isObject(value) ? { ...value } : value\n    },\n  })\n}\n\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nexport function optional<T, S>(struct: Struct<T, S>): Struct<T | undefined, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) =>\n      value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\nexport function record<K extends string, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Record<K, V>, null> {\n  return new Struct({\n    type: 'record',\n    schema: null,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k]\n          yield [k, k, Key]\n          yield [k, v, Value]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\nexport function regexp(): Struct<RegExp, null> {\n  return define('regexp', (value) => {\n    return value instanceof RegExp\n  })\n}\n\n/**\n * Ensure that a value is a `Set` object, and that its elements are of a\n * specific type.\n */\n\nexport function set(): Struct<Set<unknown>, null>\nexport function set<T>(Element: Struct<T>): Struct<Set<T>, null>\nexport function set<T>(Element?: Struct<T>): any {\n  return new Struct({\n    type: 'set',\n    schema: null,\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v as string, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Set ||\n        `Expected a \\`Set\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a string.\n */\n\nexport function string(): Struct<string, null> {\n  return define('string', (value) => {\n    return (\n      typeof value === 'string' ||\n      `Expected a string, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\n\nexport function tuple<A>(Structs: TupleSchema<[A]>): Struct<[A], null>\nexport function tuple<A, B>(Structs: TupleSchema<[A, B]>): Struct<[A, B], null>\nexport function tuple<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<[A, B, C], null>\nexport function tuple<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<[A, B, C, D], null>\nexport function tuple<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<[A, B, C, D, E], null>\nexport function tuple<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<[A, B, C, D, E, F], null>\nexport function tuple<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<[A, B, C, D, E, F, G], null>\nexport function tuple<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<[A, B, C, D, E, F, G, H], null>\nexport function tuple<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<[A, B, C, D, E, F, G, H, I], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<[A, B, C, D, E, F, G, H, I, J], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q], null>\nexport function tuple(Elements: Struct<any>[]): any {\n  const Never = never()\n\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Elements.length, value.length)\n\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Elements[i] || Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nexport function type<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S> {\n  const keys = Object.keys(schema)\n  return new Struct({\n    type: 'type',\n    schema,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value matches one of a set of types.\n */\n\nexport function union<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function union<A, B>(Structs: TupleSchema<[A, B]>): Struct<A | B, null>\nexport function union<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A | B | C, null>\nexport function union<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A | B | C | D, null>\nexport function union<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A | B | C | D | E, null>\nexport function union<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A | B | C | D | E | F, null>\nexport function union<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A | B | C | D | E | F | G, null>\nexport function union<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A | B | C | D | E | F | G | H, null>\nexport function union<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A | B | C | D | E | F | G | H | I, null>\nexport function union<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A | B | C | D | E | F | G | H | I | J, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q,\n  null\n>\nexport function union(Structs: Struct<any>[]): any {\n  const description = Structs.map((s) => s.type).join(' | ')\n  return new Struct({\n    type: 'union',\n    schema: null,\n    validator(value, ctx) {\n      const failures = []\n\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx)\n        const [first] = tuples\n\n        if (!first[0]) {\n          return []\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure)\n            }\n          }\n        }\n      }\n\n      return [\n        `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(\n          value\n        )}`,\n        ...failures,\n      ]\n    },\n  })\n}\n\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nexport function unknown(): Struct<unknown, null> {\n  return define('unknown', () => true)\n}\n","import { Struct, is, Coercer } from '../struct'\nimport { isPlainObject } from '../utils'\nimport { string, unknown } from './types'\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function coerce<T, S, C>(\n  struct: Struct<T, S>,\n  condition: Struct<C, any>,\n  coercer: Coercer<C>\n): Struct<T, S> {\n  return new Struct({\n    ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition)\n        ? struct.coercer(coercer(value, ctx), ctx)\n        : struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function defaulted<T, S>(\n  struct: Struct<T, S>,\n  fallback: any,\n  options: {\n    strict?: boolean\n  } = {}\n): Struct<T, S> {\n  return coerce(struct, unknown(), (x) => {\n    const f = typeof fallback === 'function' ? fallback() : fallback\n\n    if (x === undefined) {\n      return f\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = { ...x }\n      let changed = false\n\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key]\n          changed = true\n        }\n      }\n\n      if (changed) {\n        return ret\n      }\n    }\n\n    return x\n  })\n}\n\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function trimmed<T, S>(struct: Struct<T, S>): Struct<T, S> {\n  return coerce(struct, string(), (x) => x.trim())\n}\n","import assert from './_assert.js';\nimport u64 from './_u64.js';\nimport { Hash, u32, toBytes, wrapConstructor, wrapConstructorWithOpts, } from './utils.js';\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _7n = BigInt(7);\nconst _256n = BigInt(256);\nconst _0x71n = BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = u64.split(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => s > 32 ? u64.rotlBH(h, l, s) : u64.rotlSH(h, l, s);\nconst rotlL = (h, l, s) => s > 32 ? u64.rotlBL(h, l, s) : u64.rotlSL(h, l, s);\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nexport class Keccak extends Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        assert.number(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = u32(this.state);\n    }\n    keccak() {\n        keccakP(this.state32, this.rounds);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        assert.exists(this);\n        const { blockLen, state } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        assert.exists(this, false);\n        assert.bytes(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        assert.number(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        assert.output(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nconst gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\nexport const sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = gen(0x06, 136, 256 / 8);\nexport const sha3_384 = gen(0x06, 104, 384 / 8);\nexport const sha3_512 = gen(0x06, 72, 512 / 8);\nexport const keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = gen(0x01, 136, 256 / 8);\nexport const keccak_384 = gen(0x01, 104, 384 / 8);\nexport const keccak_512 = gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => wrapConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nexport const shake128 = genShake(0x1f, 168, 128 / 8);\nexport const shake256 = genShake(0x1f, 136, 256 / 8);\n","import assert from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nclass HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        assert.hash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new TypeError('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        assert.exists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        assert.exists(this);\n        assert.bytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n","/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _3n = BigInt(3);\nconst _8n = BigInt(8);\nconst CURVE = Object.freeze({\n    a: _0n,\n    b: BigInt(7),\n    P: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n    n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n    h: _1n,\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n});\nexport { CURVE };\nfunction weistrass(x) {\n    const { a, b } = CURVE;\n    const x2 = mod(x * x);\n    const x3 = mod(x2 * x);\n    return mod(x3 + a * x + b);\n}\nconst USE_ENDOMORPHISM = CURVE.a === _0n;\nclass ShaError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\nclass JacobianPoint {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('JacobianPoint#fromAffine: expected Point');\n        }\n        return new JacobianPoint(p.x, p.y, _1n);\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);\n    }\n    equals(other) {\n        if (!(other instanceof JacobianPoint))\n            throw new TypeError('JacobianPoint expected');\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        return U1 === U2 && S1 === S2;\n    }\n    negate() {\n        return new JacobianPoint(this.x, mod(-this.y), this.z);\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(B * B);\n        const x1b = X1 + B;\n        const D = mod(_2n * (mod(x1b * x1b) - A - C));\n        const E = mod(_3n * A);\n        const F = mod(E * E);\n        const X3 = mod(F - _2n * D);\n        const Y3 = mod(E * (D - X3) - _8n * C);\n        const Z3 = mod(_2n * Y1 * Z1);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    add(other) {\n        if (!(other instanceof JacobianPoint))\n            throw new TypeError('JacobianPoint expected');\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        if (X2 === _0n || Y2 === _0n)\n            return this;\n        if (X1 === _0n || Y1 === _0n)\n            return other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        const H = mod(U2 - U1);\n        const r = mod(S2 - S1);\n        if (H === _0n) {\n            if (r === _0n) {\n                return this.double();\n            }\n            else {\n                return JacobianPoint.ZERO;\n            }\n        }\n        const HH = mod(H * H);\n        const HHH = mod(H * HH);\n        const V = mod(U1 * HH);\n        const X3 = mod(r * r - HHH - _2n * V);\n        const Y3 = mod(r * (V - X3) - S1 * HHH);\n        const Z3 = mod(Z1 * Z2 * H);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiplyUnsafe(scalar) {\n        const P0 = JacobianPoint.ZERO;\n        if (typeof scalar === 'bigint' && scalar === _0n)\n            return P0;\n        let n = normalizeScalar(scalar);\n        if (n === _1n)\n            return this;\n        if (!USE_ENDOMORPHISM) {\n            let p = P0;\n            let d = this;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        }\n        let { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);\n        let k1p = P0;\n        let k2p = P0;\n        let d = this;\n        while (k1 > _0n || k2 > _0n) {\n            if (k1 & _1n)\n                k1p = k1p.add(d);\n            if (k2 & _1n)\n                k2p = k2p.add(d);\n            d = d.double();\n            k1 >>= _1n;\n            k2 >>= _1n;\n        }\n        if (k1neg)\n            k1p = k1p.negate();\n        if (k2neg)\n            k2p = k2p.negate();\n        k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n        return k1p.add(k2p);\n    }\n    precomputeWindow(W) {\n        const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(JacobianPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = JacobianPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = JacobianPoint.ZERO;\n        let f = JacobianPoint.ZERO;\n        const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            if (wbits === 0) {\n                let pr = precomputes[offset];\n                if (window % 2)\n                    pr = pr.negate();\n                f = f.add(pr);\n            }\n            else {\n                let cached = precomputes[offset + Math.abs(wbits) - 1];\n                if (wbits < 0)\n                    cached = cached.negate();\n                p = p.add(cached);\n            }\n        }\n        return { p, f };\n    }\n    multiply(scalar, affinePoint) {\n        let n = normalizeScalar(scalar);\n        let point;\n        let fake;\n        if (USE_ENDOMORPHISM) {\n            const { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);\n            let { p: k1p, f: f1p } = this.wNAF(k1, affinePoint);\n            let { p: k2p, f: f2p } = this.wNAF(k2, affinePoint);\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n            point = k1p.add(k2p);\n            fake = f1p.add(f2p);\n        }\n        else {\n            const { p, f } = this.wNAF(n, affinePoint);\n            point = p;\n            fake = f;\n        }\n        return JacobianPoint.normalizeZ([point, fake])[0];\n    }\n    toAffine(invZ = invert(this.z)) {\n        const { x, y, z } = this;\n        const iz1 = invZ;\n        const iz2 = mod(iz1 * iz1);\n        const iz3 = mod(iz2 * iz1);\n        const ax = mod(x * iz2);\n        const ay = mod(y * iz3);\n        const zz = mod(z * iz1);\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n}\nJacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);\nJacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);\nconst pointPrecomputes = new WeakMap();\nexport class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    hasEvenY() {\n        return this.y % _2n === _0n;\n    }\n    static fromCompressedHex(bytes) {\n        const isShort = bytes.length === 32;\n        const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));\n        if (!isValidFieldElement(x))\n            throw new Error('Point is not on curve');\n        const y2 = weistrass(x);\n        let y = sqrtMod(y2);\n        const isYOdd = (y & _1n) === _1n;\n        if (isShort) {\n            if (isYOdd)\n                y = mod(-y);\n        }\n        else {\n            const isFirstByteOdd = (bytes[0] & 1) === 1;\n            if (isFirstByteOdd !== isYOdd)\n                y = mod(-y);\n        }\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromUncompressedHex(bytes) {\n        const x = bytesToNumber(bytes.subarray(1, 33));\n        const y = bytesToNumber(bytes.subarray(33, 65));\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        const len = bytes.length;\n        const header = bytes[0];\n        if (len === 32 || (len === 33 && (header === 0x02 || header === 0x03))) {\n            return this.fromCompressedHex(bytes);\n        }\n        if (len === 65 && header === 0x04)\n            return this.fromUncompressedHex(bytes);\n        throw new Error(`Point.fromHex: received invalid point. Expected 32-33 compressed bytes or 65 uncompressed bytes, not ${len}`);\n    }\n    static fromPrivateKey(privateKey) {\n        return Point.BASE.multiply(normalizePrivateKey(privateKey));\n    }\n    static fromSignature(msgHash, signature, recovery) {\n        msgHash = ensureBytes(msgHash);\n        const h = truncateHash(msgHash);\n        const { r, s } = normalizeSignature(signature);\n        if (recovery !== 0 && recovery !== 1) {\n            throw new Error('Cannot recover signature: invalid recovery bit');\n        }\n        const prefix = recovery & 1 ? '03' : '02';\n        const R = Point.fromHex(prefix + numTo32bStr(r));\n        const { n } = CURVE;\n        const rinv = invert(r, n);\n        const u1 = mod(-h * rinv, n);\n        const u2 = mod(s * rinv, n);\n        const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);\n        if (!Q)\n            throw new Error('Cannot recover signature: point at infinify');\n        Q.assertValidity();\n        return Q;\n    }\n    toRawBytes(isCompressed = false) {\n        return hexToBytes(this.toHex(isCompressed));\n    }\n    toHex(isCompressed = false) {\n        const x = numTo32bStr(this.x);\n        if (isCompressed) {\n            const prefix = this.hasEvenY() ? '02' : '03';\n            return `${prefix}${x}`;\n        }\n        else {\n            return `04${x}${numTo32bStr(this.y)}`;\n        }\n    }\n    toHexX() {\n        return this.toHex(true).slice(2);\n    }\n    toRawX() {\n        return this.toRawBytes(true).slice(1);\n    }\n    assertValidity() {\n        const msg = 'Point is not on elliptic curve';\n        const { x, y } = this;\n        if (!isValidFieldElement(x) || !isValidFieldElement(y))\n            throw new Error(msg);\n        const left = mod(y * y);\n        const right = weistrass(x);\n        if (mod(left - right) !== _0n)\n            throw new Error(msg);\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(this.x, mod(-this.y));\n    }\n    double() {\n        return JacobianPoint.fromAffine(this).double().toAffine();\n    }\n    add(other) {\n        return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n    multiplyAndAddUnsafe(Q, a, b) {\n        const P = JacobianPoint.fromAffine(this);\n        const aP = a === _0n || a === _1n || this !== Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);\n        const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);\n        const sum = aP.add(bQ);\n        return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _0n);\nfunction sliceDER(s) {\n    return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;\n}\nfunction parseDERInt(data) {\n    if (data.length < 2 || data[0] !== 0x02) {\n        throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);\n    }\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) {\n        throw new Error(`Invalid signature integer: wrong length`);\n    }\n    if (res[0] === 0x00 && res[1] <= 0x7f) {\n        throw new Error('Invalid signature integer: trailing length');\n    }\n    return { data: bytesToNumber(res), left: data.subarray(len + 2) };\n}\nfunction parseDERSignature(data) {\n    if (data.length < 2 || data[0] != 0x30) {\n        throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);\n    }\n    if (data[1] !== data.length - 2) {\n        throw new Error('Invalid signature: incorrect length');\n    }\n    const { data: r, left: sBytes } = parseDERInt(data.subarray(2));\n    const { data: s, left: rBytesLeft } = parseDERInt(sBytes);\n    if (rBytesLeft.length) {\n        throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);\n    }\n    return { r, s };\n}\nexport class Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromCompact(hex) {\n        const arr = hex instanceof Uint8Array;\n        const name = 'Signature.fromCompact';\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`${name}: Expected string or Uint8Array`);\n        const str = arr ? bytesToHex(hex) : hex;\n        if (str.length !== 128)\n            throw new Error(`${name}: Expected 64-byte hex`);\n        return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));\n    }\n    static fromDER(hex) {\n        const arr = hex instanceof Uint8Array;\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);\n        const { r, s } = parseDERSignature(arr ? hex : hexToBytes(hex));\n        return new Signature(r, s);\n    }\n    static fromHex(hex) {\n        return this.fromDER(hex);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isWithinCurveOrder(r))\n            throw new Error('Invalid Signature: r must be 0 < r < n');\n        if (!isWithinCurveOrder(s))\n            throw new Error('Invalid Signature: s must be 0 < s < n');\n    }\n    hasHighS() {\n        const HALF = CURVE.n >> _1n;\n        return this.s > HALF;\n    }\n    normalizeS() {\n        return this.hasHighS() ? new Signature(this.r, CURVE.n - this.s) : this;\n    }\n    toDERRawBytes(isCompressed = false) {\n        return hexToBytes(this.toDERHex(isCompressed));\n    }\n    toDERHex(isCompressed = false) {\n        const sHex = sliceDER(numberToHexUnpadded(this.s));\n        if (isCompressed)\n            return sHex;\n        const rHex = sliceDER(numberToHexUnpadded(this.r));\n        const rLen = numberToHexUnpadded(rHex.length / 2);\n        const sLen = numberToHexUnpadded(sHex.length / 2);\n        const length = numberToHexUnpadded(rHex.length / 2 + sHex.length / 2 + 4);\n        return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;\n    }\n    toRawBytes() {\n        return this.toDERRawBytes();\n    }\n    toHex() {\n        return this.toDERHex();\n    }\n    toCompactRawBytes() {\n        return hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n}\nfunction concatBytes(...arrays) {\n    if (!arrays.every((b) => b instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nfunction numTo32bStr(num) {\n    if (typeof num !== 'bigint')\n        throw new Error('Expected bigint');\n    if (!(_0n <= num && num < POW_2_256))\n        throw new Error('Expected number < 2^256');\n    return num.toString(16).padStart(64, '0');\n}\nfunction numTo32b(num) {\n    const b = hexToBytes(numTo32bStr(num));\n    if (b.length !== 32)\n        throw new Error('Error: expected 32 bytes');\n    return b;\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToNumber: expected string, got ' + typeof hex);\n    }\n    return BigInt(`0x${hex}`);\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex' + hex.length);\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction bytesToNumber(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction ensureBytes(hex) {\n    return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n}\nfunction normalizeScalar(num) {\n    if (typeof num === 'number' && Number.isSafeInteger(num) && num > 0)\n        return BigInt(num);\n    if (typeof num === 'bigint' && isWithinCurveOrder(num))\n        return num;\n    throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');\n}\nfunction mod(a, b = CURVE.P) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction sqrtMod(x) {\n    const { P } = CURVE;\n    const _6n = BigInt(6);\n    const _11n = BigInt(11);\n    const _22n = BigInt(22);\n    const _23n = BigInt(23);\n    const _44n = BigInt(44);\n    const _88n = BigInt(88);\n    const b2 = (x * x * x) % P;\n    const b3 = (b2 * b2 * x) % P;\n    const b6 = (pow2(b3, _3n) * b3) % P;\n    const b9 = (pow2(b6, _3n) * b3) % P;\n    const b11 = (pow2(b9, _2n) * b2) % P;\n    const b22 = (pow2(b11, _11n) * b11) % P;\n    const b44 = (pow2(b22, _22n) * b22) % P;\n    const b88 = (pow2(b44, _44n) * b44) % P;\n    const b176 = (pow2(b88, _88n) * b88) % P;\n    const b220 = (pow2(b176, _44n) * b44) % P;\n    const b223 = (pow2(b220, _3n) * b3) % P;\n    const t1 = (pow2(b223, _23n) * b22) % P;\n    const t2 = (pow2(t1, _6n) * b2) % P;\n    return pow2(t2, _2n);\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const scratch = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = mod(acc * scratch[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return scratch;\n}\nconst divNearest = (a, b) => (a + b / _2n) / b;\nconst ENDO = {\n    a1: BigInt('0x3086d221a7d46bcde86c90e49284eb15'),\n    b1: -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3'),\n    a2: BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8'),\n    b2: BigInt('0x3086d221a7d46bcde86c90e49284eb15'),\n    POW_2_128: BigInt('0x100000000000000000000000000000000'),\n};\nfunction splitScalarEndo(k) {\n    const { n } = CURVE;\n    const { a1, b1, a2, b2, POW_2_128 } = ENDO;\n    const c1 = divNearest(b2 * k, n);\n    const c2 = divNearest(-b1 * k, n);\n    let k1 = mod(k - c1 * a1 - c2 * a2, n);\n    let k2 = mod(-c1 * b1 - c2 * b2, n);\n    const k1neg = k1 > POW_2_128;\n    const k2neg = k2 > POW_2_128;\n    if (k1neg)\n        k1 = n - k1;\n    if (k2neg)\n        k2 = n - k2;\n    if (k1 > POW_2_128 || k2 > POW_2_128) {\n        throw new Error('splitScalarEndo: Endomorphism failed, k=' + k);\n    }\n    return { k1neg, k1, k2neg, k2 };\n}\nfunction truncateHash(hash) {\n    const { n } = CURVE;\n    const byteLength = hash.length;\n    const delta = byteLength * 8 - 256;\n    let h = bytesToNumber(hash);\n    if (delta > 0)\n        h = h >> BigInt(delta);\n    if (h >= n)\n        h -= n;\n    return h;\n}\nlet _sha256Sync;\nlet _hmacSha256Sync;\nclass HmacDrbg {\n    constructor() {\n        this.v = new Uint8Array(32).fill(1);\n        this.k = new Uint8Array(32).fill(0);\n        this.counter = 0;\n    }\n    hmac(...values) {\n        return utils.hmacSha256(this.k, ...values);\n    }\n    hmacSync(...values) {\n        return _hmacSha256Sync(this.k, ...values);\n    }\n    checkSync() {\n        if (typeof _hmacSha256Sync !== 'function')\n            throw new ShaError('hmacSha256Sync needs to be set');\n    }\n    incr() {\n        if (this.counter >= 1000)\n            throw new Error('Tried 1,000 k values for sign(), all were invalid');\n        this.counter += 1;\n    }\n    async reseed(seed = new Uint8Array()) {\n        this.k = await this.hmac(this.v, Uint8Array.from([0x00]), seed);\n        this.v = await this.hmac(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = await this.hmac(this.v, Uint8Array.from([0x01]), seed);\n        this.v = await this.hmac(this.v);\n    }\n    reseedSync(seed = new Uint8Array()) {\n        this.checkSync();\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x00]), seed);\n        this.v = this.hmacSync(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x01]), seed);\n        this.v = this.hmacSync(this.v);\n    }\n    async generate() {\n        this.incr();\n        this.v = await this.hmac(this.v);\n        return this.v;\n    }\n    generateSync() {\n        this.checkSync();\n        this.incr();\n        this.v = this.hmacSync(this.v);\n        return this.v;\n    }\n}\nfunction isWithinCurveOrder(num) {\n    return _0n < num && num < CURVE.n;\n}\nfunction isValidFieldElement(num) {\n    return _0n < num && num < CURVE.P;\n}\nfunction kmdToSig(kBytes, m, d) {\n    const k = bytesToNumber(kBytes);\n    if (!isWithinCurveOrder(k))\n        return;\n    const { n } = CURVE;\n    const q = Point.BASE.multiply(k);\n    const r = mod(q.x, n);\n    if (r === _0n)\n        return;\n    const s = mod(invert(k, n) * mod(m + d * r, n), n);\n    if (s === _0n)\n        return;\n    const sig = new Signature(r, s);\n    const recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n);\n    return { sig, recovery };\n}\nfunction normalizePrivateKey(key) {\n    let num;\n    if (typeof key === 'bigint') {\n        num = key;\n    }\n    else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {\n        num = BigInt(key);\n    }\n    else if (typeof key === 'string') {\n        if (key.length !== 64)\n            throw new Error('Expected 32 bytes of private key');\n        num = hexToNumber(key);\n    }\n    else if (key instanceof Uint8Array) {\n        if (key.length !== 32)\n            throw new Error('Expected 32 bytes of private key');\n        num = bytesToNumber(key);\n    }\n    else {\n        throw new TypeError('Expected valid private key');\n    }\n    if (!isWithinCurveOrder(num))\n        throw new Error('Expected private key: 0 < key < n');\n    return num;\n}\nfunction normalizePublicKey(publicKey) {\n    if (publicKey instanceof Point) {\n        publicKey.assertValidity();\n        return publicKey;\n    }\n    else {\n        return Point.fromHex(publicKey);\n    }\n}\nfunction normalizeSignature(signature) {\n    if (signature instanceof Signature) {\n        signature.assertValidity();\n        return signature;\n    }\n    try {\n        return Signature.fromDER(signature);\n    }\n    catch (error) {\n        return Signature.fromCompact(signature);\n    }\n}\nexport function getPublicKey(privateKey, isCompressed = false) {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n}\nexport function recoverPublicKey(msgHash, signature, recovery, isCompressed = false) {\n    return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);\n}\nfunction isProbPub(item) {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && item.length;\n    if (arr)\n        return len === 33 || len === 65;\n    if (str)\n        return len === 66 || len === 130;\n    if (item instanceof Point)\n        return true;\n    return false;\n}\nexport function getSharedSecret(privateA, publicB, isCompressed = false) {\n    if (isProbPub(privateA))\n        throw new TypeError('getSharedSecret: first arg must be private key');\n    if (!isProbPub(publicB))\n        throw new TypeError('getSharedSecret: second arg must be public key');\n    const b = normalizePublicKey(publicB);\n    b.assertValidity();\n    return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);\n}\nfunction bits2int(bytes) {\n    const slice = bytes.length > 32 ? bytes.slice(0, 32) : bytes;\n    return bytesToNumber(slice);\n}\nfunction bits2octets(bytes) {\n    const z1 = bits2int(bytes);\n    const z2 = mod(z1, CURVE.n);\n    return int2octets(z2 < _0n ? z1 : z2);\n}\nfunction int2octets(num) {\n    return numTo32b(num);\n}\nfunction initSigArgs(msgHash, privateKey, extraEntropy) {\n    if (msgHash == null)\n        throw new Error(`sign: expected valid message hash, not \"${msgHash}\"`);\n    const h1 = ensureBytes(msgHash);\n    const d = normalizePrivateKey(privateKey);\n    const seedArgs = [int2octets(d), bits2octets(h1)];\n    if (extraEntropy != null) {\n        if (extraEntropy === true)\n            extraEntropy = utils.randomBytes(32);\n        const e = ensureBytes(extraEntropy);\n        if (e.length !== 32)\n            throw new Error('sign: Expected 32 bytes of extra data');\n        seedArgs.push(e);\n    }\n    const seed = concatBytes(...seedArgs);\n    const m = bits2int(h1);\n    return { seed, m, d };\n}\nfunction finalizeSig(recSig, opts) {\n    let { sig, recovery } = recSig;\n    const { canonical, der, recovered } = Object.assign({ canonical: true, der: true }, opts);\n    if (canonical && sig.hasHighS()) {\n        sig = sig.normalizeS();\n        recovery ^= 1;\n    }\n    const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();\n    return recovered ? [hashed, recovery] : hashed;\n}\nasync function sign(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    let sig;\n    const drbg = new HmacDrbg();\n    await drbg.reseed(seed);\n    while (!(sig = kmdToSig(await drbg.generate(), m, d)))\n        await drbg.reseed();\n    return finalizeSig(sig, opts);\n}\nfunction signSync(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    let sig;\n    const drbg = new HmacDrbg();\n    drbg.reseedSync(seed);\n    while (!(sig = kmdToSig(drbg.generateSync(), m, d)))\n        drbg.reseedSync();\n    return finalizeSig(sig, opts);\n}\nexport { sign, signSync };\nconst vopts = { strict: true };\nexport function verify(signature, msgHash, publicKey, opts = vopts) {\n    let sig;\n    try {\n        sig = normalizeSignature(signature);\n        msgHash = ensureBytes(msgHash);\n    }\n    catch (error) {\n        return false;\n    }\n    const { r, s } = sig;\n    if (opts.strict && sig.hasHighS())\n        return false;\n    const h = truncateHash(msgHash);\n    let P;\n    try {\n        P = normalizePublicKey(publicKey);\n    }\n    catch (error) {\n        return false;\n    }\n    const { n } = CURVE;\n    const sinv = invert(s, n);\n    const u1 = mod(h * sinv, n);\n    const u2 = mod(r * sinv, n);\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);\n    if (!R)\n        return false;\n    const v = mod(R.x, n);\n    return v === r;\n}\nfunction schnorrChallengeFinalize(ch) {\n    return mod(bytesToNumber(ch), CURVE.n);\n}\nclass SchnorrSignature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        if (bytes.length !== 64)\n            throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);\n        const r = bytesToNumber(bytes.subarray(0, 32));\n        const s = bytesToNumber(bytes.subarray(32, 64));\n        return new SchnorrSignature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isValidFieldElement(r) || !isWithinCurveOrder(s))\n            throw new Error('Invalid signature');\n    }\n    toHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n    toRawBytes() {\n        return hexToBytes(this.toHex());\n    }\n}\nfunction schnorrGetPublicKey(privateKey) {\n    return Point.fromPrivateKey(privateKey).toRawX();\n}\nclass InternalSchnorrSignature {\n    constructor(message, privateKey, auxRand = utils.randomBytes()) {\n        if (message == null)\n            throw new TypeError(`sign: Expected valid message, not \"${message}\"`);\n        this.m = ensureBytes(message);\n        const { x, scalar } = this.getScalar(normalizePrivateKey(privateKey));\n        this.px = x;\n        this.d = scalar;\n        this.rand = ensureBytes(auxRand);\n        if (this.rand.length !== 32)\n            throw new TypeError('sign: Expected 32 bytes of aux randomness');\n    }\n    getScalar(priv) {\n        const point = Point.fromPrivateKey(priv);\n        const scalar = point.hasEvenY() ? priv : CURVE.n - priv;\n        return { point, scalar, x: point.toRawX() };\n    }\n    initNonce(d, t0h) {\n        return numTo32b(d ^ bytesToNumber(t0h));\n    }\n    finalizeNonce(k0h) {\n        const k0 = mod(bytesToNumber(k0h), CURVE.n);\n        if (k0 === _0n)\n            throw new Error('sign: Creation of signature failed. k is zero');\n        const { point: R, x: rx, scalar: k } = this.getScalar(k0);\n        return { R, rx, k };\n    }\n    finalizeSig(R, k, e, d) {\n        return new SchnorrSignature(R.x, mod(k + e * d, CURVE.n)).toRawBytes();\n    }\n    error() {\n        throw new Error('sign: Invalid signature produced');\n    }\n    async calc() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHash;\n        const t = this.initNonce(d, await tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(await tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(await tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!(await schnorrVerify(sig, m, px)))\n            this.error();\n        return sig;\n    }\n    calcSync() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHashSync;\n        const t = this.initNonce(d, tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!schnorrVerifySync(sig, m, px))\n            this.error();\n        return sig;\n    }\n}\nasync function schnorrSign(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calc();\n}\nfunction schnorrSignSync(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calcSync();\n}\nfunction initSchnorrVerify(signature, message, publicKey) {\n    const raw = signature instanceof SchnorrSignature;\n    const sig = raw ? signature : SchnorrSignature.fromHex(signature);\n    if (raw)\n        sig.assertValidity();\n    return {\n        ...sig,\n        m: ensureBytes(message),\n        P: normalizePublicKey(publicKey),\n    };\n}\nfunction finalizeSchnorrVerify(r, P, s, e) {\n    const R = Point.BASE.multiplyAndAddUnsafe(P, normalizePrivateKey(s), mod(-e, CURVE.n));\n    if (!R || !R.hasEvenY() || R.x !== r)\n        return false;\n    return true;\n}\nasync function schnorrVerify(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(await utils.taggedHash(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        return false;\n    }\n}\nfunction schnorrVerifySync(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(utils.taggedHashSync(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        if (error instanceof ShaError)\n            throw error;\n        return false;\n    }\n}\nexport const schnorr = {\n    Signature: SchnorrSignature,\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    signSync: schnorrSignSync,\n    verifySync: schnorrVerifySync,\n};\nPoint.BASE._setWindowSize(8);\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nconst TAGS = {\n    challenge: 'BIP0340/challenge',\n    aux: 'BIP0340/aux',\n    nonce: 'BIP0340/nonce',\n};\nconst TAGGED_HASH_PREFIXES = {};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    mod,\n    invert,\n    isValidPrivateKey(privateKey) {\n        try {\n            normalizePrivateKey(privateKey);\n            return true;\n        }\n        catch (error) {\n            return false;\n        }\n    },\n    _bigintTo32Bytes: numTo32b,\n    _normalizePrivateKey: normalizePrivateKey,\n    hashToPrivateKey: (hash) => {\n        hash = ensureBytes(hash);\n        if (hash.length < 40 || hash.length > 1024)\n            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n        const num = mod(bytesToNumber(hash), CURVE.n - _1n) + _1n;\n        return numTo32b(num);\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return Uint8Array.from(randomBytes(bytesLength));\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => {\n        return utils.hashToPrivateKey(utils.randomBytes(40));\n    },\n    sha256: async (...messages) => {\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-256', concatBytes(...messages));\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHash } = crypto.node;\n            const hash = createHash('sha256');\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha256 function\");\n        }\n    },\n    hmacSha256: async (key, ...messages) => {\n        if (crypto.web) {\n            const ckey = await crypto.web.subtle.importKey('raw', key, { name: 'HMAC', hash: { name: 'SHA-256' } }, false, ['sign']);\n            const message = concatBytes(...messages);\n            const buffer = await crypto.web.subtle.sign('HMAC', ckey, message);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHmac } = crypto.node;\n            const hash = createHmac('sha256', key);\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have hmac-sha256 function\");\n        }\n    },\n    sha256Sync: undefined,\n    hmacSha256Sync: undefined,\n    taggedHash: async (tag, ...messages) => {\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = await utils.sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return utils.sha256(tagP, ...messages);\n    },\n    taggedHashSync: (tag, ...messages) => {\n        if (typeof _sha256Sync !== 'function')\n            throw new ShaError('sha256Sync is undefined, you need to set it');\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = _sha256Sync(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return _sha256Sync(tagP, ...messages);\n    },\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point === Point.BASE ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_3n);\n        return cached;\n    },\n};\nObject.defineProperties(utils, {\n    sha256Sync: {\n        configurable: false,\n        get() {\n            return _sha256Sync;\n        },\n        set(val) {\n            if (!_sha256Sync)\n                _sha256Sync = val;\n        },\n    },\n    hmacSha256Sync: {\n        configurable: false,\n        get() {\n            return _hmacSha256Sync;\n        },\n        set(val) {\n            if (!_hmacSha256Sync)\n                _hmacSha256Sync = val;\n        },\n    },\n});\n","import {sha512} from '@noble/hashes/sha512';\nimport * as ed25519 from '@noble/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\ned25519.utils.sha512Sync = (...m) => sha512(ed25519.utils.concatBytes(...m));\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.sync.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.Point.fromHex(publicKey, true /* strict */);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sync.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sync.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.sync.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift()!;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift()!;\n    const numReadonlyUnsignedAccounts = byteArray.shift()!;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift()!;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(\n    signData: Uint8Array,\n    requireAllSignatures: boolean,\n  ): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBytes())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  typeof SolanaJSONRPCErrorCode[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as HttpAgent} from 'http';\nimport {Agent as HttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of account addresses to return post simulation state for */\n  accounts?: {\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: HttpAgent | HttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agentManager:\n    | {requestEnd(): void; requestStart(): HttpAgent | HttpsAgent}\n    | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        agentManager = new AgentManager(\n          url.startsWith('https:') /* useHttps */,\n        );\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof HttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof HttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agentManager = {requestEnd() {}, requestStart: () => httpAgent};\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: HttpAgent | HttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy:\n      | BlockheightBasedTransactionConfirmationStrategy\n      | DurableNonceTransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` using a `TransactionConfirmationConfig` */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy:\n      | BlockheightBasedTransactionConfirmationStrategy\n      | DurableNonceTransactionConfirmationStrategy\n      | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as\n        | BlockheightBasedTransactionConfirmationStrategy\n        | DurableNonceTransactionConfirmationStrategy;\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result as unknown as RpcResponseAndContext<number>;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(\n    commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block height information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, options);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {hmac} from '@noble/hashes/hmac';\nimport {sha256} from '@noble/hashes/sha256';\nimport * as secp256k1 from '@noble/secp256k1';\n\n// Supply a synchronous hashing algorithm to make this\n// library interoperable with the synchronous APIs in web3.js.\nsecp256k1.utils.hmacSha256Sync = (key: Uint8Array, ...msgs: Uint8Array[]) => {\n  const h = hmac.create(sha256, key);\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.signSync>[0],\n  privKey: Parameters<typeof secp256k1.signSync>[1],\n) => secp256k1.signSync(msgHash, privKey, {der: false, recovered: true});\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'AuthorizeWithSeed' | 'InitializeAccount' | 'Withdraw';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","import { createFetchMiddleware } from \"@toruslabs/base-controllers\";\nimport { JRPCEngineEndCallback, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig } from \"@web3auth/base\";\n\nexport function createChainIdMiddleware(chainId: string): JRPCMiddleware<unknown, unknown> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<string>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"solana_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createProviderConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  return (\n    req: JRPCRequest<unknown>,\n    res: JRPCResponse<Omit<CustomChainConfig, \"chainNamespace\">>,\n    next: JRPCEngineNextCallback,\n    end: JRPCEngineEndCallback\n  ) => {\n    if (req.method === \"solana_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  const { chainId } = providerConfig;\n\n  return mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig)]);\n}\n\nexport function createJsonRpcClient(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): {\n  networkMiddleware: JRPCMiddleware<unknown, unknown>;\n  fetchMiddleware: JRPCMiddleware<unknown, unknown>;\n} {\n  const { rpcTarget } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({ rpcTarget });\n  const networkMiddleware = mergeMiddleware([createConfigMiddleware(providerConfig), fetchMiddleware]);\n  return { networkMiddleware, fetchMiddleware };\n}\n","import type { Transaction } from \"@solana/web3.js\";\nimport { createAsyncMiddleware, JRPCMiddleware, JRPCRequest, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nexport interface IProviderHandlers {\n  requestAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getPrivateKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signTransaction: (req: JRPCRequest<{ message: Transaction }>) => Promise<Transaction>;\n  signAllTransactions: (req: JRPCRequest<{ message: Transaction[] }>) => Promise<Transaction[]>;\n  signAndSendTransaction: (req: JRPCRequest<{ message: Transaction }>) => Promise<{ signature: string }>;\n  getSecretKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signMessage: (req: JRPCRequest<{ message: Uint8Array; display?: string }>) => Promise<Uint8Array>;\n}\n\nexport function createGetAccountsMiddleware({ getAccounts }: { getAccounts: IProviderHandlers[\"getAccounts\"] }): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"getAccounts\") return next();\n\n    if (!getAccounts) throw new Error(\"WalletMiddleware - opts.getAccounts not provided\");\n    // This calls from the prefs controller\n    const accounts = await getAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createRequestAccountsMiddleware({\n  requestAccounts,\n}: {\n  requestAccounts: IProviderHandlers[\"requestAccounts\"];\n}): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"requestAccounts\") return next();\n\n    if (!requestAccounts) throw new Error(\"WalletMiddleware - opts.requestAccounts not provided\");\n    // This calls the UI login function\n    const accounts = await requestAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createGenericJRPCMiddleware<T, U>(\n  targetMethod: string,\n  handler: (req: JRPCRequest<T>) => Promise<U>\n): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware<T, unknown>(async (request, response, next) => {\n    const { method } = request;\n    if (method !== targetMethod) return next();\n\n    if (!handler) throw new Error(`WalletMiddleware - ${targetMethod} not provided`);\n\n    const result = await handler(request);\n\n    response.result = result;\n    return undefined;\n  });\n}\n\nexport function createSolanaMiddleware(providerHandlers: IProviderHandlers): JRPCMiddleware<unknown, unknown> {\n  const { getAccounts, requestAccounts, signTransaction, signAndSendTransaction, signAllTransactions, signMessage, getPrivateKey, getSecretKey } =\n    providerHandlers;\n\n  return mergeMiddleware([\n    createRequestAccountsMiddleware({ requestAccounts }),\n    createGetAccountsMiddleware({ getAccounts }),\n    createGenericJRPCMiddleware<{ message: Transaction }, Transaction>(\"signTransaction\", signTransaction),\n    createGenericJRPCMiddleware<{ message: Transaction }, { signature: string }>(\"signAndSendTransaction\", signAndSendTransaction),\n    createGenericJRPCMiddleware<{ message: Transaction[] }, Transaction[]>(\"signAllTransactions\", signAllTransactions),\n    createGenericJRPCMiddleware<{ message: Uint8Array }, Uint8Array>(\"signMessage\", signMessage),\n    createGenericJRPCMiddleware<void, string>(\"solanaPrivateKey\", getPrivateKey),\n    createGenericJRPCMiddleware<void, string>(\"solanaSecretKey\", getSecretKey),\n  ]);\n}\nexport interface AddSolanaChainParameter {\n  chainId: string; // A 0x-prefixed hexadecimal string\n  chainName: string;\n  nativeCurrency: {\n    name: string;\n    symbol: string; // 2-6 characters long\n    decimals: 18;\n  };\n  rpcUrls: string[];\n  blockExplorerUrls?: string[];\n}\n\nexport interface IChainSwitchHandlers {\n  addNewChainConfig: (req: JRPCRequest<AddSolanaChainParameter>) => Promise<void>;\n  switchSolanaChain: (req: JRPCRequest<{ chainId: string }>) => Promise<void>;\n}\nexport function createChainSwitchMiddleware({ addNewChainConfig, switchSolanaChain }: IChainSwitchHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([\n    createGenericJRPCMiddleware<AddSolanaChainParameter, void>(\"addSolanaChain\", addNewChainConfig),\n    createGenericJRPCMiddleware<{ chainId: string }, void>(\"switchSolanaChain\", switchSolanaChain),\n  ]);\n}\n\nexport interface IAccountHandlers {\n  updatePrivatekey: (req: JRPCRequest<{ privateKey: string }>) => Promise<void>;\n}\nexport function createAccountMiddleware({ updatePrivatekey }: IAccountHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([createGenericJRPCMiddleware<{ privateKey: string }, void>(\"updateAccount\", updatePrivatekey)]);\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\n\nimport { createConfigMiddleware } from \"../../../rpc/JrpcClient\";\nimport { createSolanaMiddleware, IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport abstract class BaseInjectedProvider<P> extends BaseProvider<BaseProviderConfig, BaseProviderState, P> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    return Promise.resolve();\n  }\n\n  public async setupProvider(injectedProvider: P): Promise<void> {\n    const engine = new JRPCEngine();\n\n    const providerHandlers = this.getProviderHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    engine.push(solanaMiddleware);\n\n    const configMiddleware = createConfigMiddleware(this.config.chainConfig as CustomChainConfig);\n    engine.push(configMiddleware);\n\n    const injectedProviderProxy = this.getInjectedProviderProxy(injectedProvider);\n    if (injectedProviderProxy) {\n      engine.push(injectedProviderProxy);\n    }\n\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    const { chainConfig } = this.config;\n    this.update({\n      chainId: chainConfig.chainId,\n    });\n    return chainConfig.chainId || \"\";\n  }\n\n  protected getInjectedProviderProxy(_: P): JRPCMiddleware<unknown, unknown> {\n    return undefined;\n  }\n\n  protected abstract getProviderHandlers(injectedProvider: P): IProviderHandlers;\n}\n","import { Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getBaseProviderHandlers = (injectedProvider: IBaseWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : [];\n    },\n    getAccounts: async () => (injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : []),\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<Transaction> => {\n      const transaction = await injectedProvider.signTransaction(req.params.message);\n      return transaction;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array; display?: \"utf8\" | \"hex\" }>): Promise<Uint8Array> => {\n      const sigData = await injectedProvider.signMessage(req.params.message, req.params.display);\n      return sigData.signature;\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: Transaction[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = await injectedProvider.signAllTransactions(req.params.message);\n      return transaction;\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n      const txRes = await injectedProvider.signAndSendTransaction(req.params.message);\n      return { signature: txRes.signature };\n    },\n  };\n  return providerHandlers;\n};\n","import { createAsyncMiddleware, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse } from \"@toruslabs/openlogin-jrpc\";\n\nimport { InjectedProvider } from \"./interface\";\n\nexport function createInjectedProviderProxyMiddleware(provider: InjectedProvider): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (req: JRPCRequest<unknown[]>, res: JRPCResponse<unknown>, _next: JRPCEngineNextCallback) => {\n    const result = await provider.request({\n      ...req,\n    });\n    res.result = result;\n  });\n}\n","import { JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nimport { IPhantomWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\n\nexport class PhantomInjectedProvider extends BaseInjectedProvider<IPhantomWalletProvider> {\n  protected getProviderHandlers(injectedProvider: IPhantomWalletProvider): IProviderHandlers {\n    return getBaseProviderHandlers(injectedProvider);\n  }\n\n  protected getInjectedProviderProxy(injectedProvider: IPhantomWalletProvider): JRPCMiddleware<unknown, unknown> {\n    return createInjectedProviderProxyMiddleware(injectedProvider);\n  }\n}\n","import { ISlopeProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSlopeHandlers } from \"./providerHandlers\";\n\nexport class SlopeInjectedProxyProvider extends BaseInjectedProvider<ISlopeProvider> {\n  protected getProviderHandlers(injectedProvider: ISlopeProvider): IProviderHandlers {\n    return getSlopeHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import { Connection, PublicKey, Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ISlopeProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getSlopeHandlers = (injectedProvider: ISlopeProvider, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const { data } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getAccounts: async () => {\n      const { data } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<Transaction> => {\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({ message: \"Invalid transaction message\" });\n      const { data } = await injectedProvider.signTransaction(bs58.encode(txMessage.serializeMessage()));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, Buffer.from(signature));\n      return txMessage;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      const response = await injectedProvider.signMessage(req.params.message);\n      return bs58.decode(response.data.signature);\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n      const provider = getProviderEngineProxy();\n      if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({ message: \"Invalid transaction message\" });\n      const { data } = await injectedProvider.signTransaction(bs58.encode(txMessage.serializeMessage()));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, Buffer.from(signature));\n      const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n      const conn = new Connection(chainConfig.rpcTarget);\n      const res = await conn.sendRawTransaction(txMessage.serialize());\n      return { signature: res };\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: Transaction[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const allTxns = req.params.message;\n      const { length } = allTxns;\n\n      const unsignedTx = [];\n\n      for (let i = 0; i < length; i++) {\n        unsignedTx.push(bs58.encode(req.params.message[i].serializeMessage()));\n      }\n      const { msg, data } = await injectedProvider.signAllTransactions(unsignedTx);\n\n      if (!data.publicKey || data.signatures?.length !== length) throw new Error(msg);\n\n      const publicKey = new PublicKey(data.publicKey);\n\n      for (let i = 0; i < length; i++) {\n        const signature = bs58.decode(data.signatures[i]);\n        allTxns[i].addSignature(publicKey, Buffer.from(signature));\n      }\n\n      return allTxns;\n    },\n  };\n  return providerHandlers;\n};\n","import { SolflareWallet } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSolflareHandlers } from \"./providerHandlers\";\n\nexport class SolflareInjectedProvider extends BaseInjectedProvider<SolflareWallet> {\n  protected getProviderHandlers(injectedProvider: SolflareWallet): IProviderHandlers {\n    return getSolflareHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import { Connection, Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider, SolflareWallet } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\n\nexport const getSolflareHandlers = (injectedProvider: SolflareWallet, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const solflareProviderHandlers = getBaseProviderHandlers(injectedProvider as IBaseWalletProvider);\n  solflareProviderHandlers.signAndSendTransaction = async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n    const provider = getProviderEngineProxy();\n    if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const transaction = await injectedProvider.signTransaction(req.params.message);\n    const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n    const conn = new Connection(chainConfig.rpcTarget);\n    const res = await conn.sendRawTransaction(transaction.serialize());\n    return { signature: res };\n  };\n  return solflareProviderHandlers;\n};\n","import type SolletWallet from \"@project-serum/sol-wallet-adapter\";\n\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSolletHandlers } from \"./providerHandlers\";\n\nexport class SolletInjectedProvider extends BaseInjectedProvider<SolletWallet> {\n  protected getProviderHandlers(injectedProvider: SolletWallet): IProviderHandlers {\n    return getSolletHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import type SolletWallet from \"@project-serum/sol-wallet-adapter\";\nimport { Connection, Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\n\nexport const getSolletHandlers = (injectedProvider: SolletWallet, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const providerHandlers = getBaseProviderHandlers(injectedProvider as IBaseWalletProvider);\n  providerHandlers.signMessage = async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n    const { signature } = await injectedProvider.sign(req.params.message, \"utf8\");\n    return signature;\n  };\n  providerHandlers.signAndSendTransaction = async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n    const provider = getProviderEngineProxy();\n    if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const transaction = await injectedProvider.signTransaction(req.params.message);\n    const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n    const conn = new Connection(chainConfig.rpcTarget);\n    const res = await conn.sendRawTransaction(transaction.serialize());\n    return { signature: res };\n  };\n  return providerHandlers;\n};\n","import { Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ITorusWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getTorusHandlers = (injectedProvider: ITorusWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const message = await injectedProvider.signMessage(req.params.message);\n      return message;\n    },\n\n    signTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<Transaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.signTransaction(txMessage);\n      return response;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.sendTransaction(txMessage);\n      return { signature: response };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: Transaction[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transactions = req.params.message;\n      const response = await injectedProvider.signAllTransactions(transactions);\n      return response;\n    },\n  };\n  return providerHandlers;\n};\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, isHexStrict, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ITorusWalletProvider } from \"../../../interface\";\nimport { createSolanaMiddleware } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\nimport { getTorusHandlers } from \"./providerHandlers\";\n\nexport class TorusInjectedProvider extends BaseProvider<BaseProviderConfig, BaseProviderState, ITorusWalletProvider> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    return Promise.resolve();\n  }\n\n  public async setupProvider(injectedProvider: ITorusWalletProvider): Promise<void> {\n    this.handleInjectedProviderUpdate(injectedProvider);\n    await this.setupEngine(injectedProvider);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this.provider) throw ethErrors.provider.custom({ message: \"Torus solana provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n\n    const connectedChainId = await this.provider.request<unknown, string>({\n      method: \"solana_chainId\",\n    });\n\n    const connectedHexChainId = isHexStrict(connectedChainId.toString()) ? connectedChainId : `0x${parseInt(connectedChainId, 10).toString(16)}`;\n    if (chainId !== connectedHexChainId)\n      throw WalletInitializationError.rpcConnectionError(`Invalid network, net_version is: ${connectedHexChainId}, expected: ${chainId}`);\n\n    this.update({ chainId: connectedHexChainId });\n    this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return this.state.chainId;\n  }\n\n  private async setupEngine(injectedProvider: ITorusWalletProvider): Promise<void> {\n    const providerHandlers = getTorusHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    const injectedProviderProxy = createInjectedProviderProxyMiddleware(injectedProvider);\n    const engine = new JRPCEngine();\n    engine.push(solanaMiddleware);\n    engine.push(injectedProviderProxy);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  private async handleInjectedProviderUpdate(injectedProvider: ITorusWalletProvider): Promise<void> {\n    injectedProvider.on(\"accountsChanged\", async (accounts: string[]) => {\n      this.provider.emit(\"accountsChanged\", accounts);\n    });\n    injectedProvider.on(\"chainChanged\", async (chainId: string) => {\n      const connectedHexChainId = isHexStrict(chainId) ? chainId : `0x${parseInt(chainId, 10).toString(16)}`;\n      // Check if chainId changed and trigger event\n      this.configure({\n        chainConfig: { ...this.config.chainConfig, chainId: connectedHexChainId },\n      });\n      await this.setupProvider(injectedProvider);\n    });\n  }\n}\n","import { Keypair, Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport nacl from \"@toruslabs/tweetnacl-js\";\nimport { SafeEventEmitterProvider, WalletInitializationError } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IProviderHandlers } from \"../../rpc/solanaRpcMiddlewares\";\n\nexport async function getProviderHandlers({\n  privKey,\n  getProviderEngineProxy,\n}: {\n  privKey: string;\n  getProviderEngineProxy: () => SafeEventEmitterProvider | null;\n}): Promise<IProviderHandlers> {\n  const keyPairGenerator = (): Keypair => {\n    return Keypair.fromSecretKey(Buffer.from(privKey, \"hex\"));\n  };\n  if (typeof privKey !== \"string\") throw WalletInitializationError.invalidParams(\"privKey must be a string\");\n  const keyPair = keyPairGenerator();\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return [keyPair.publicKey.toBase58()];\n    },\n    getAccounts: async () => [keyPair.publicKey.toBase58()],\n\n    getPrivateKey: async () => privKey,\n    getSecretKey: async () => bs58.encode(keyPair.secretKey),\n\n    signTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<Transaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = req.params.message;\n      transaction.partialSign(keyPair);\n      return transaction;\n    },\n\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const signedMsg = nacl.sign.detached(req.params.message, keyPair.secretKey);\n      return signedMsg;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const _providerEngineProxy = getProviderEngineProxy();\n      if (!_providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n\n      const transaction = req.params.message;\n      transaction.sign(keyPair);\n\n      const sig = await _providerEngineProxy.request<string>({\n        method: \"sendTransaction\",\n        params: [bs58.encode(transaction.serialize())],\n      });\n      return { signature: sig };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: Transaction[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const txns = req.params?.message;\n      for (const tx of txns || []) {\n        const transaction = tx;\n        transaction.partialSign(keyPair);\n      }\n      return txns;\n    },\n  };\n\n  return providerHandlers;\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware, JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { createJsonRpcClient } from \"../../rpc/JrpcClient\";\nimport {\n  AddSolanaChainParameter,\n  createAccountMiddleware,\n  createChainSwitchMiddleware,\n  createSolanaMiddleware,\n  IAccountHandlers,\n  IChainSwitchHandlers,\n} from \"../../rpc/solanaRpcMiddlewares\";\nimport { getProviderHandlers } from \"./solanaPrivateKeyUtils\";\n\nexport interface SolanaPrivKeyProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\nexport interface SolanaPrivKeyProviderState extends BaseProviderState {\n  privateKey?: string;\n}\nexport class SolanaPrivateKeyProvider extends BaseProvider<BaseProviderConfig, SolanaPrivKeyProviderState, string> {\n  constructor({ config, state }: { config: SolanaPrivKeyProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public static getProviderInstance = async (params: {\n    privKey: string;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n  }): Promise<SolanaPrivateKeyProvider> => {\n    const providerFactory = new SolanaPrivateKeyProvider({ config: { chainConfig: params.chainConfig } });\n    await providerFactory.setupProvider(params.privKey);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.state.privateKey)\n      throw ethErrors.provider.custom({ message: \"Private key is not found in state, plz pass it in constructor state param\", code: 4902 });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request<unknown, string[]>({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(privKey: string): Promise<void> {\n    const providerHandlers = await getProviderHandlers({ privKey, getProviderEngineProxy: this.getProviderEngineProxy.bind(this) });\n\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n\n    const engine = new JRPCEngine();\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(this.getChainSwitchMiddleware());\n    engine.push(this.getAccountMiddleware());\n    engine.push(solanaMiddleware);\n    engine.push(networkMiddleware);\n\n    const provider = providerFromEngine(engine);\n\n    this.updateProviderEngineProxy(provider);\n\n    await this.lookupNetwork();\n  }\n\n  public async updateAccount(params: { privateKey: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const existingKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request<unknown, string[]>({ method: \"requestAccounts\" }),\n      });\n    }\n  }\n\n  public async switchChain(params: { chainId: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    this.configure({ chainConfig });\n    const privKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    await this.setupProvider(privKey);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const health = await this._providerEngineProxy.request<unknown, string>({\n      method: \"getHealth\",\n      params: [],\n    });\n    const { chainConfig } = this.config;\n    if (health !== \"ok\")\n      throw WalletInitializationError.rpcConnectionError(`Failed to lookup network for following rpc target: ${chainConfig.rpcTarget}`);\n    this.update({ chainId: chainConfig.chainId });\n    if (this.state.chainId !== chainConfig.chainId) {\n      this.provider.emit(\"chainChanged\", this.state.chainId);\n      this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    }\n    return this.state.chainId;\n  }\n\n  private getChainSwitchMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const chainSwitchHandlers: IChainSwitchHandlers = {\n      addNewChainConfig: async (req: JRPCRequest<AddSolanaChainParameter>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        const { chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency } = req.params;\n\n        if (!chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n        if (!rpcUrls || rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n        if (!nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.SOLANA,\n          chainId,\n          ticker: nativeCurrency?.symbol || \"SOL\",\n          tickerName: nativeCurrency?.name || \"Solana\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: blockExplorerUrls?.[0] || \"\",\n        });\n      },\n      switchSolanaChain: async (req: JRPCRequest<{ chainId: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n        await this.switchChain(req.params);\n      },\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  private getAccountMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const accountHandlers: IAccountHandlers = {\n      updatePrivatekey: async (req: JRPCRequest<{ privateKey: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.privateKey) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n        const { privateKey } = req.params;\n        await this.updateAccount({ privateKey });\n      },\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n}\n","import { Transaction } from \"@solana/web3.js\";\nimport { RequestArguments, SafeEventEmitterProvider } from \"@web3auth/base\";\n\nimport { ISolanaWallet } from \"./interface\";\n\nexport class SolanaWallet implements ISolanaWallet {\n  public provider: SafeEventEmitterProvider;\n\n  constructor(provider: SafeEventEmitterProvider) {\n    this.provider = provider;\n  }\n\n  public async requestAccounts(): Promise<string[]> {\n    const accounts = await this.provider.request<string[]>({\n      method: \"requestAccounts\",\n      params: {},\n    });\n    return accounts;\n  }\n\n  public async signAndSendTransaction(transaction: Transaction): Promise<{ signature: string }> {\n    const { signature } = await this.provider.request<{ signature: string }>({\n      method: \"signAndSendTransaction\",\n      params: {\n        message: transaction,\n      },\n    });\n    return { signature };\n  }\n\n  public async signTransaction(transaction: Transaction): Promise<Transaction> {\n    const signedTransaction = (await this.provider.request({\n      method: \"signTransaction\",\n      params: {\n        message: transaction,\n      },\n    })) as Transaction;\n    return signedTransaction;\n  }\n\n  public async signAllTransactions(transactions: Transaction[]): Promise<Transaction[]> {\n    const signedTransactions = (await this.provider.request({\n      method: \"signAllTransactions\",\n      params: {\n        message: transactions,\n      },\n    })) as Transaction[];\n    return signedTransactions;\n  }\n\n  public async signMessage(data: Uint8Array): Promise<Uint8Array> {\n    const response = await this.provider.request<Uint8Array>({\n      method: \"signMessage\",\n      params: {\n        message: data,\n      },\n    });\n    return response as Uint8Array;\n  }\n\n  public async request<T>(args: RequestArguments): Promise<T> {\n    const result = await this.provider.request<T>(args);\n    return result as T;\n  }\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n","'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Client = void 0;\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _websocket = _interopRequireDefault(require(\"./lib/client/websocket.browser\"));\n\nvar _client = _interopRequireDefault(require(\"./lib/client\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar Client = /*#__PURE__*/function (_CommonClient) {\n  (0, _inherits2[\"default\"])(Client, _CommonClient);\n\n  var _super = _createSuper(Client);\n\n  function Client() {\n    var address = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"ws://localhost:8080\";\n\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$autoconnect = _ref.autoconnect,\n        autoconnect = _ref$autoconnect === void 0 ? true : _ref$autoconnect,\n        _ref$reconnect = _ref.reconnect,\n        reconnect = _ref$reconnect === void 0 ? true : _ref$reconnect,\n        _ref$reconnect_interv = _ref.reconnect_interval,\n        reconnect_interval = _ref$reconnect_interv === void 0 ? 1000 : _ref$reconnect_interv,\n        _ref$max_reconnects = _ref.max_reconnects,\n        max_reconnects = _ref$max_reconnects === void 0 ? 5 : _ref$max_reconnects;\n\n    var generate_request_id = arguments.length > 2 ? arguments[2] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, Client);\n    return _super.call(this, _websocket[\"default\"], address, {\n      autoconnect: autoconnect,\n      reconnect: reconnect,\n      reconnect_interval: reconnect_interval,\n      max_reconnects: max_reconnects\n    }, generate_request_id);\n  }\n\n  return (0, _createClass2[\"default\"])(Client);\n}(_client[\"default\"]);\n\nexports.Client = Client;","/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}; // @ts-ignore\n\n\nvar CommonClient = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(CommonClient, _EventEmitter);\n\n  var _super = _createSuper(CommonClient);\n\n  /**\n   * Instantiate a Client class.\n   * @constructor\n   * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n   * @param {String} address - url to a websocket server\n   * @param {Object} options - ws options object with reconnect parameters\n   * @param {Function} generate_request_id - custom generation request Id\n   * @return {CommonClient}\n   */\n  function CommonClient(webSocketFactory) {\n    var _this;\n\n    var address = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"ws://localhost:8080\";\n\n    var _a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var generate_request_id = arguments.length > 3 ? arguments[3] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, CommonClient);\n\n    var _a$autoconnect = _a.autoconnect,\n        autoconnect = _a$autoconnect === void 0 ? true : _a$autoconnect,\n        _a$reconnect = _a.reconnect,\n        reconnect = _a$reconnect === void 0 ? true : _a$reconnect,\n        _a$reconnect_interval = _a.reconnect_interval,\n        reconnect_interval = _a$reconnect_interval === void 0 ? 1000 : _a$reconnect_interval,\n        _a$max_reconnects = _a.max_reconnects,\n        max_reconnects = _a$max_reconnects === void 0 ? 5 : _a$max_reconnects,\n        rest_options = __rest(_a, [\"autoconnect\", \"reconnect\", \"reconnect_interval\", \"max_reconnects\"]);\n\n    _this = _super.call(this);\n    _this.webSocketFactory = webSocketFactory;\n    _this.queue = {};\n    _this.rpc_id = 0;\n    _this.address = address;\n    _this.autoconnect = autoconnect;\n    _this.ready = false;\n    _this.reconnect = reconnect;\n    _this.reconnect_interval = reconnect_interval;\n    _this.max_reconnects = max_reconnects;\n    _this.rest_options = rest_options;\n    _this.current_reconnects = 0;\n\n    _this.generate_request_id = generate_request_id || function () {\n      return ++_this.rpc_id;\n    };\n\n    if (_this.autoconnect) _this._connect(_this.address, Object.assign({\n      autoconnect: _this.autoconnect,\n      reconnect: _this.reconnect,\n      reconnect_interval: _this.reconnect_interval,\n      max_reconnects: _this.max_reconnects\n    }, _this.rest_options));\n    return _this;\n  }\n  /**\n   * Connects to a defined server if not connected already.\n   * @method\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(CommonClient, [{\n    key: \"connect\",\n    value: function connect() {\n      if (this.socket) return;\n\n      this._connect(this.address, Object.assign({\n        autoconnect: this.autoconnect,\n        reconnect: this.reconnect,\n        reconnect_interval: this.reconnect_interval,\n        max_reconnects: this.max_reconnects\n      }, this.rest_options));\n    }\n    /**\n     * Calls a registered RPC method on server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object|Array} params - optional method parameters\n     * @param {Number} timeout - RPC reply timeout value\n     * @param {Object} ws_opts - options passed to ws\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"call\",\n    value: function call(method, params, timeout, ws_opts) {\n      var _this2 = this;\n\n      if (!ws_opts && \"object\" === (0, _typeof2[\"default\"])(timeout)) {\n        ws_opts = timeout;\n        timeout = null;\n      }\n\n      return new Promise(function (resolve, reject) {\n        if (!_this2.ready) return reject(new Error(\"socket not ready\"));\n\n        var rpc_id = _this2.generate_request_id(method, params);\n\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null,\n          id: rpc_id\n        };\n\n        _this2.socket.send(JSON.stringify(message), ws_opts, function (error) {\n          if (error) return reject(error);\n          _this2.queue[rpc_id] = {\n            promise: [resolve, reject]\n          };\n\n          if (timeout) {\n            _this2.queue[rpc_id].timeout = setTimeout(function () {\n              delete _this2.queue[rpc_id];\n              reject(new Error(\"reply timeout\"));\n            }, timeout);\n          }\n        });\n      });\n    }\n    /**\n     * Logins with the other side of the connection.\n     * @method\n     * @param {Object} params - Login credentials object\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(params) {\n        var resp;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.call(\"rpc.login\", params);\n\n              case 2:\n                resp = _context.sent;\n\n                if (resp) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"authentication failed\");\n\n              case 5:\n                return _context.abrupt(\"return\", resp);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n    /**\n     * Fetches a list of client's methods registered on server.\n     * @method\n     * @return {Array}\n     */\n\n  }, {\n    key: \"listMethods\",\n    value: function () {\n      var _listMethods = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.call(\"__listMethods\");\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function listMethods() {\n        return _listMethods.apply(this, arguments);\n      }\n\n      return listMethods;\n    }()\n    /**\n     * Sends a JSON-RPC 2.0 notification to server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object} params - optional method parameters\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"notify\",\n    value: function notify(method, params) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this3.ready) return reject(new Error(\"socket not ready\"));\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null\n        };\n\n        _this3.socket.send(JSON.stringify(message), function (error) {\n          if (error) return reject(error);\n          resolve();\n        });\n      });\n    }\n    /**\n     * Subscribes for a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context3.next = 3;\n                return this.call(\"rpc.on\", event);\n\n              case 3:\n                result = _context3.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed subscribing to an event '\" + event + \"' with: \" + result[event]);\n\n              case 6:\n                return _context3.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function subscribe(_x2) {\n        return _subscribe.apply(this, arguments);\n      }\n\n      return subscribe;\n    }()\n    /**\n     * Unsubscribes from a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function () {\n      var _unsubscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context4.next = 3;\n                return this.call(\"rpc.off\", event);\n\n              case 3:\n                result = _context4.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed unsubscribing from an event with: \" + result);\n\n              case 6:\n                return _context4.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function unsubscribe(_x3) {\n        return _unsubscribe.apply(this, arguments);\n      }\n\n      return unsubscribe;\n    }()\n    /**\n     * Closes a WebSocket connection gracefully.\n     * @method\n     * @param {Number} code - socket close code\n     * @param {String} data - optional data to be sent before closing\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, data) {\n      this.socket.close(code || 1000, data);\n    }\n    /**\n     * Connection/Message handler.\n     * @method\n     * @private\n     * @param {String} address - WebSocket API address\n     * @param {Object} options - ws options object\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"_connect\",\n    value: function _connect(address, options) {\n      var _this4 = this;\n\n      this.socket = this.webSocketFactory(address, options);\n      this.socket.addEventListener(\"open\", function () {\n        _this4.ready = true;\n\n        _this4.emit(\"open\");\n\n        _this4.current_reconnects = 0;\n      });\n      this.socket.addEventListener(\"message\", function (_ref) {\n        var message = _ref.data;\n        if (message instanceof ArrayBuffer) message = Buffer.from(message).toString();\n\n        try {\n          message = JSON.parse(message);\n        } catch (error) {\n          return;\n        } // check if any listeners are attached and forward event\n\n\n        if (message.notification && _this4.listeners(message.notification).length) {\n          if (!Object.keys(message.params).length) return _this4.emit(message.notification);\n          var args = [message.notification];\n          if (message.params.constructor === Object) args.push(message.params);else // using for-loop instead of unshift/spread because performance is better\n            for (var i = 0; i < message.params.length; i++) {\n              args.push(message.params[i]);\n            } // run as microtask so that pending queue messages are resolved first\n          // eslint-disable-next-line prefer-spread\n\n          return Promise.resolve().then(function () {\n            _this4.emit.apply(_this4, args);\n          });\n        }\n\n        if (!_this4.queue[message.id]) {\n          // general JSON RPC 2.0 events\n          if (message.method && message.params) {\n            // run as microtask so that pending queue messages are resolved first\n            return Promise.resolve().then(function () {\n              _this4.emit(message.method, message.params);\n            });\n          }\n\n          return;\n        } // reject early since server's response is invalid\n\n\n        if (\"error\" in message === \"result\" in message) _this4.queue[message.id].promise[1](new Error(\"Server response malformed. Response must include either \\\"result\\\"\" + \" or \\\"error\\\", but not both.\"));\n        if (_this4.queue[message.id].timeout) clearTimeout(_this4.queue[message.id].timeout);\n        if (message.error) _this4.queue[message.id].promise[1](message.error);else _this4.queue[message.id].promise[0](message.result);\n        delete _this4.queue[message.id];\n      });\n      this.socket.addEventListener(\"error\", function (error) {\n        return _this4.emit(\"error\", error);\n      });\n      this.socket.addEventListener(\"close\", function (_ref2) {\n        var code = _ref2.code,\n            reason = _ref2.reason;\n        if (_this4.ready) // Delay close event until internal state is updated\n          setTimeout(function () {\n            return _this4.emit(\"close\", code, reason);\n          }, 0);\n        _this4.ready = false;\n        _this4.socket = undefined;\n        if (code === 1000) return;\n        _this4.current_reconnects++;\n        if (_this4.reconnect && (_this4.max_reconnects > _this4.current_reconnects || _this4.max_reconnects === 0)) setTimeout(function () {\n          return _this4._connect(address, options);\n        }, _this4.reconnect_interval);\n      });\n    }\n  }]);\n  return CommonClient;\n}(_eventemitter.EventEmitter);\n\nexports[\"default\"] = CommonClient;","/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar WebSocketBrowserImpl = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(WebSocketBrowserImpl, _EventEmitter);\n\n  var _super = _createSuper(WebSocketBrowserImpl);\n\n  /** Instantiate a WebSocket class\n   * @constructor\n   * @param {String} address - url to a websocket server\n   * @param {(Object)} options - websocket options\n   * @param {(String|Array)} protocols - a list of protocols\n   * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n   */\n  function WebSocketBrowserImpl(address, options, protocols) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, WebSocketBrowserImpl);\n    _this = _super.call(this);\n    _this.socket = new window.WebSocket(address, protocols);\n\n    _this.socket.onopen = function () {\n      return _this.emit(\"open\");\n    };\n\n    _this.socket.onmessage = function (event) {\n      return _this.emit(\"message\", event.data);\n    };\n\n    _this.socket.onerror = function (error) {\n      return _this.emit(\"error\", error);\n    };\n\n    _this.socket.onclose = function (event) {\n      _this.emit(\"close\", event.code, event.reason);\n    };\n\n    return _this;\n  }\n  /**\n   * Sends data through a websocket connection\n   * @method\n   * @param {(String|Object)} data - data to be sent via websocket\n   * @param {Object} optionsOrCallback - ws options\n   * @param {Function} callback - a callback called once the data is sent\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(WebSocketBrowserImpl, [{\n    key: \"send\",\n    value: function send(data, optionsOrCallback, callback) {\n      var cb = callback || optionsOrCallback;\n\n      try {\n        this.socket.send(data);\n        cb();\n      } catch (error) {\n        cb(error);\n      }\n    }\n    /**\n     * Closes an underlying socket\n     * @method\n     * @param {Number} code - status code explaining why the connection is being closed\n     * @param {String} reason - a description why the connection is closing\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, reason) {\n      this.socket.close(code, reason);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener, options) {\n      this.socket.addEventListener(type, listener, options);\n    }\n  }]);\n  return WebSocketBrowserImpl;\n}(_eventemitter.EventEmitter);\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\n\n\nfunction _default(address, options) {\n  return new WebSocketBrowserImpl(address, options);\n}","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n"],"names":["module","exports","self","ReferenceError","__esModule","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","fn","this","args","arguments","apply","err","undefined","instance","Constructor","TypeError","toPropertyKey","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","protoProps","staticProps","prototype","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","bind","__proto__","subClass","superClass","create","constructor","obj","_typeof","assertThisInitialized","call","_setPrototypeOf","p","input","hint","prim","Symbol","toPrimitive","res","String","Number","checkUint8Array","b","Uint8Array","uint8ArrayToBuffer","buffer_1","from","buffer","byteOffset","Layout","span","property","isInteger","makeDestinationObject","getSpan","offset","RangeError","replicate","rv","assign","fromArray","values","nameWithProperty","name","lo","ExternalLayout","isCount","Error","GreedyCount","elementSpan","decode","rem","Math","floor","encode","src","OffsetLayout","layout","UInt","UIntBE","readUIntLE","writeUIntLE","readUIntBE","writeUIntBE","Int","readIntLE","writeIntLE","IntBE","readIntBE","writeIntBE","V2E32","pow","divmodInt64","hi32","lo32","roundedInt64","NearUInt64","readUInt32LE","split","writeUInt32LE","NearUInt64BE","readUInt32BE","writeUInt32BE","NearInt64","readInt32LE","writeInt32LE","NearInt64BE","readInt32BE","writeInt32BE","Float","readFloatLE","writeFloatLE","FloatBE","readFloatBE","writeFloatBE","Double","readDoubleLE","writeDoubleLE","DoubleBE","readDoubleBE","writeDoubleBE","Sequence","elementLayout","count","idx","push","elo","reduce","v","Structure","fields","decodePrefixes","Array","isArray","acc","fd","e","fsp","dest","firstOffset","lastOffset","lastWrote","fv","shift","layoutFor","offsetOf","UnionDiscriminator","UnionLayoutDiscriminator","Union","discr","defaultLayout","discriminator","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","hasOwnProperty","tag","dlo","clo","contentOffset","addVariant","variant","VariantLayout","vb","union","fixBitwiseResult","BitStructure","word","msb","_packedSetValue","_packedGetValue","addField","bits","bf","BitField","addBoolean","Boolean","fieldFor","container","totalBits","usedBits","sum","valueMask","start","wordMask","wordValue","Blob","slice","srcBuffer","write","toString","CString","srcb","copy","UTF8","maxSpan","Constant","number","n","isSafeInteger","bytes","lengths","includes","assert","bool","hash","outputLen","blockLen","exists","checkFinished","destroyed","finished","output","out","min","createView","crypto","arr","DataView","byteLength","rotr","Uint32Array","padStart","toBytes","data","str","TextEncoder","utf8ToBytes","Hash","clone","_cloneInto","wrapConstructor","hashConstructor","hashC","message","update","digest","tmp","SHA2","padOffset","isLE","super","pos","view","len","take","set","subarray","process","dataView","roundClean","digestInto","fill","setBigUint64","_32n","BigInt","_u32_max","wh","wl","h","l","setUint32","oview","state","get","outLen","destroy","to","U32_MASK64","fromBig","le","lst","Ah","Al","toBig","shrSH","s","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","add","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5H","Eh","add5L","El","SHA512_Kh","SHA512_Kl","u64","map","SHA512_W_H","SHA512_W_L","SHA512","Fh","Fl","Gh","Gl","Hh","Hl","getUint32","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","SHA512_256","SHA384","sha512","_0n","_1n","_2n","CU_O","CURVE","freeze","a","d","P","Gx","Gy","POW_2_256","SQRT_M1","SQRT_AD_MINUS_ONE","INVSQRT_A_MINUS_D","ONE_MINUS_D_SQ","D_MINUS_ONE_SQ","ExtendedPoint","x","y","z","t","static","Point","equals","ZERO","mod","points","toInv","nums","inverted","invert","num","reduceRight","invertBatch","toAffine","toAffineBatch","fromAffine","other","assertExtPoint","X1","Y1","Z1","X2","Y2","Z2","X1Z2","X2Z1","Y1Z2","Y2Z1","negate","double","A","B","C","D","x1y1","E","G","F","H","X3","Y3","T3","Z3","T1","T2","subtract","precomputeWindow","W","windows","base","window","wNAF","affinePoint","BASE","_WINDOW_SIZE","precomputes","pointPrecomputes","normalizeZ","f","windowSize","mask","maxNumber","shiftBy","wbits","pr","cached","abs","multiply","scalar","normalizeScalar","multiplyUnsafe","P0","isSmallOrder","isTorsionFree","invZ","ax","ay","fromRistrettoBytes","legacyRist","toRistrettoBytes","fromRistrettoHash","assertRstPoint","RistrettoPoint","ep","r0","r","Ns","c","isValid","Ns_D_is_sq","uvRatio","s_","edIsNegative","Nt","s2","W0","W1","W2","W3","hex","r1","bytes255ToNumberLE","ensureBytes","R1","calcElligatorRistrettoMap","r2","R2","emsg","b1","b2","equalBytes","numberTo32BytesLE","u1","u2","u1_2","u2_2","I","invertSqrt","Dx","Dy","toRawBytes","u2sq","invsqrt","D1","D2","zInv","_x","_y","toHex","bytesToHex","one","two","WeakMap","_setWindowSize","delete","strict","normed","bytesToNumberLE","y2","u","isXOdd","privateKey","getExtendedPublicKey","point","toX25519","Signature","assertValidity","fromHex","u8","concatBytes","arrays","every","result","pad","hexes","uint8a","hexToBytes","array","j","hexByte","byte","parseInt","isNaN","numberTo32BytesBE","reverse","MAX_255B","modulo","q","m","gcd","pow2","power","pow_2_252_3","_5n","_10n","_20n","_40n","_80n","b4","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","v3","v7","vx2","root1","root2","useRoot1","useRoot2","noRoot","modlLE","expectedLength","max","adjustBytes25519","checkPrivateKey","getKeyFromHash","hashed","head","prefix","pointBytes","_sha512Sync","sha512s","async","utils","getExtendedPublicKeySync","prepareVerification","sig","publicKey","SB","pub","msg","finishVerification","k","kA","sync","getPublicKey","sign","R","verify","node","nodeCrypto","web","TORSION_SUBGROUP","hashToPrivateScalar","randomBytes","bytesLength","getRandomValues","randomPrivateKey","subtle","createHash","precompute","sha512Sync","defineProperties","val","Maj","SHA256_K","IV","SHA256_W","SHA256","W15","s0","s1","sha256","StructError","failure","failures","rest","path","join","isObject","print","JSON","stringify","shiftIterator","next","toFailure","context","struct","branch","type","refinement","toFailures","iterator","run","options","coerce","ctx","coercer","schema","valid","validator","entries","ts","Map","Set","refiner","Struct","validate","is","tuples","tuple","define","Element","boolean","Class","literal","constant","description","never","nullable","optional","record","Key","Value","string","Elements","Never","keys","Structs","S","first","unknown","condition","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_7n","_256n","_0x71n","round","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","rotlL","Keccak","suffix","enableXOF","rounds","posOut","state32","keccak","idx1","idx0","B0","B1","Th","Tl","curH","curL","PI","keccakP","finish","writeInto","bufferOut","xofInto","xof","keccak_256","genShake","hashCons","opts","wrapConstructorWithOpts","dkLen","HMAC","_key","iHash","oHash","buf","hmac","_3n","_8n","beta","weistrass","x2","x3","USE_ENDOMORPHISM","ShaError","JacobianPoint","scratch","Z1Z1","Z2Z2","U1","U2","S1","S2","x1b","HH","HHH","V","k1neg","k1","k2neg","k2","splitScalarEndo","k1p","k2p","fake","f1p","f2p","iz1","iz2","iz3","hasEvenY","isShort","bytesToNumber","isValidFieldElement","_6n","_11n","_22n","_23n","_44n","_88n","b3","b6","b9","b11","b22","b44","b88","b176","b220","b223","t1","t2","sqrtMod","isYOdd","header","fromCompressedHex","fromUncompressedHex","normalizePrivateKey","msgHash","signature","recovery","truncateHash","normalizeSignature","numTo32bStr","rinv","Q","multiplyAndAddUnsafe","isCompressed","toHexX","toRawX","left","aP","bQ","sliceDER","parseDERInt","hexToNumber","sBytes","rBytesLeft","parseDERSignature","fromDER","isWithinCurveOrder","hasHighS","HALF","normalizeS","toDERRawBytes","toDERHex","sHex","numberToHexUnpadded","rHex","rLen","sLen","toCompactRawBytes","toCompactHex","numTo32b","divNearest","ENDO","a1","a2","POW_2_128","c1","c2","delta","_sha256Sync","_hmacSha256Sync","HmacDrbg","counter","hmacSha256","hmacSync","checkSync","incr","seed","reseedSync","generateSync","kmdToSig","kBytes","fromCompact","bits2int","bits2octets","z1","z2","int2octets","initSigArgs","extraEntropy","h1","seedArgs","finalizeSig","recSig","canonical","der","recovered","TAGGED_HASH_PREFIXES","isValidPrivateKey","_bigintTo32Bytes","_normalizePrivateKey","hashToPrivateKey","messages","forEach","ckey","importKey","createHmac","sha256Sync","hmacSha256Sync","taggedHash","tagP","tagH","charCodeAt","taggedHashSync","ed25519","generateKeypair","privateScalar","secretKey","isOnCurve","toBuffer","Buffer","properties","serialize","SOLANA_SCHEMA","deserialize","deserializeUnchecked","PUBLIC_KEY_LENGTH","uniquePublicKeyCounter","toStringTag","PublicKey","_bn","isPublicKeyData","decoded","bs58","BN","eq","toBase58","toJSON","toArrayLike","zeroPad","_Symbol$toStringTag","fromPublicKey","programId","publicKeyBytes","seeds","createProgramAddressSync","address","nonce","seedsWithNonce","concat","findProgramAddressSync","pubkeyData","default","kind","PACKET_DATA_SIZE","TransactionExpiredBlockheightExceededError","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","readonly","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","pubkey","BufferLayout","rustString","rsl","_decode","_encode","rslShim","chars","alloc","getAlloc","getItemAlloc","item","field","decodeLength","size","elem","encodeLength","rem_len","CompiledKeys","payer","keyMetaMap","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","writableSigners","filter","readonlySigners","writableNonSigners","readonlyNonSigners","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","extractTableLookup","lookupTable","writableIndexes","drainedWritableKeys","drainKeysFoundInLookupTable","addresses","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","Message","accountKeys","recentBlockhash","indexToProgramIds","account","version","compiledInstructions","accounts","addressTableLookups","getAccountKeys","compiledKeys","compile","payerKey","isAccountSigner","isAccountWritable","numSignedAccounts","isProgramId","has","programIds","nonProgramIds","_","numKeys","keyCount","shortvec","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","transaction","signData","byteArray","accountCount","dataSlice","messageArgs","MessageV0","numAccountKeysFromLookups","lookup","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","tableLookup","tableAccount","find","lookupTableAccounts","extractResult","addressTableLookup","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","serializedMessageLength","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","maskedPrefix","splice","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","TransactionStatus","DEFAULT_SIGNATURE","TransactionInstruction","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","minContextSlot","blockhash","nonceInstruction","signers","items","compileMessage","console","warn","accountMetas","uniqueMetas","pubkeyString","uniqueIndex","sort","localeCompare","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","indexOf","invariant","_compile","pair","serializeMessage","connection","getFeeForMessage","setSigners","seen","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","verifySignatures","_verifySignatures","requireAllSignatures","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","abortSignal","nonceAccountPubkey","nonceValue","sleep","ms","setTimeout","encodeData","allocLength","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","nonceAccount","blob","encodeDecode","bigIntLayout","toBigIntLE","bigInt","toBufferLE","SYSTEM_INSTRUCTION_LAYOUTS","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","UpgradeNonceAccount","SystemProgram","params","lamports","space","fromPubkey","newAccountPubkey","basePubkey","toPubkey","accountPubkey","createAccountWithSeed","noncePubkey","createAccount","initParams","nonceInitialize","authorized","instructionData","newAuthorizedPubkey","Loader","ceil","chunkSize","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","allocate","owner","transfer","dataLayout","transactions","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","objToString","objKeys","isArrayProp","propVal","toStr","isFinite","returnVal","trailingZeros","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","getFirstSlotInEpoch","getLastSlotInEpoch","SendTransactionError","logs","SolanaJSONRPCError","customMessage","code","globalThis","fetch","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","typeIndex","decodeData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","PublicKeyFromString","RawAccountDataResult","BufferFromRawAccountData","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","createRpcResult","pick","jsonrpc","id","UnknownRpcResult","jsonRpcResult","jsonRpcResultAndContext","notificationResultAndContext","versionedMessageFromResponse","response","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","GetLeaderScheduleResult","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","GetNoneModeBlockRpcResult","GetAccountsModeBlockRpcResult","GetParsedBlockRpcResult","GetParsedAccountsModeBlockRpcResult","GetParsedNoneModeBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","GetRecentPerformanceSamplesRpcResult","numTransactions","numSlots","samplePeriodSecs","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","COMMON_HTTP_HEADERS","Connection","endpoint","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","httpAgent","client","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionHashByClientSubscriptionId","_subscriptionStateChangeCallbacksByHash","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","confirmTransactionInitialTimeout","putativeUrl","test","assertEndpointUrl","matches","match","hostish","portWithColon","protocol","startsWith","startPort","makeWebsocketUrl","url","customFetch","fetchImpl","fetchWithMiddleware","init","modifiedFetchArgs","modifiedInfo","modifiedInit","RpcClient","request","callback","method","body","agent","headers","too_many_requests_retries","waitTime","log","statusText","text","ok","createRpcClient","requests","batch","methodName","createRpcBatchRequest","RpcWebSocketClient","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","_buildArgs","getBalanceAndContext","catch","configArg","tokenMintAddress","tokenAddress","ownerAddress","_args","mintAddress","getAccountInfoAndContext","publicKeys","rawConfig","getMultipleAccountsInfoAndContext","configOrCommitment","encoding","configWithoutEncoding","strategy","rawSignature","decodedSignature","aborted","reason","confirmTransactionUsingLegacyTimeoutStrategy","confirmTransactionUsingBlockHeightExceedanceStrategy","confirmTransactionUsingDurableNonceStrategy","getCancellationPromise","signal","addEventListener","getTransactionConfirmationPromise","signatureSubscriptionId","disposeSignatureSubscriptionStateChangeObserver","abortConfirmation","removeSignatureListener","confirmationPromise","onSignature","__type","PROCESSED","subscriptionSetupPromise","resolveSubscriptionSetup","_onSubscriptionStateChange","nextState","getSignatureStatus","expiryPromise","checkBlockHeight","getBlockHeight","_e","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","cancellationPromise","outcome","race","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","getNonceAndContext","NONCE_INVALID","slotInWhichNonceDidAdvance","signatureStatus","_signatureStatus","commitmentForStatus","timeoutId","timeoutMs","TIMED_OUT","clearTimeout","startSlot","limit","getSignatureStatuses","getSupply","excludeNonCirculatingAccountsList","epochSchedule","wireMessage","getRecentBlockhashAndContext","getLatestBlockhashAndContext","_buildArgsAtLeastConfirmed","unsafeRes","transactionDetails","extra","block","endSlot","firstAvailableBlock","getFirstAvailableBlock","getConfirmedBlockSignatures","until","highestConfirmedRoot","getSlot","before","getConfirmedSignaturesForAddress2","accountInfo","fromAccountData","disableCache","expired","Date","now","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getLatestBlockhash","MS_PER_SLOT","transactionOrMessage","configOrSigners","includeAccounts","encodedTransaction","originalTx","_blockhashWithExpiryBlockHeight","sigVerify","traceIndent","logTrace","signersOrOptions","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","notify","_updateSubscriptions","MAX_SAFE_INTEGER","clearInterval","_setSubscription","nextSubscription","prevState","stateChangeCallbacks","cb","clientSubscriptionId","_this$_subscriptionSt","close","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbackArgs","notification","_makeSubscription","subscriptionConfig","fastStableStringify","existingSubscription","onAccountChange","_unsubscribeClientSubscription","accountId","onProgramAccountChange","filters","onLogs","mentions","onSlotChange","onSlotUpdate","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","Keypair","keypair","_keypair","skipValidation","computedPublicKey","ii","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","bigintLayout","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableProgram","lookupTableAddress","bumpSeed","recentSlot","addr","recipient","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","ComputeBudgetProgram","microLamports","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","instructionIndex","PUBLIC_KEY_BYTES","SIGNATURE_BYTES","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","PRIVATE_KEY_BYTES","fromSecretKey","createInstructionWithPublicKey","secp256k1","msgs","ecdsaSign","privKey","drbg","publicKeyCreate","fromPrivateKey","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","recoveryId","createInstructionWithEthAddress","ethAddress","publicKeyToEthAddress","rawAddress","substr","ETHEREUM_ADDRESS_BYTES","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","STAKE_CONFIG_ID","Lockup","unixTimestamp","custodian","STAKE_INSTRUCTION_LAYOUTS","Initialize","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","Staker","Withdrawer","StakeProgram","stakePubkey","lockup","maybeLockup","staker","withdrawer","initialize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorityBase","authoritySeed","authorityOwner","splitStakePubkey","splitInstruction","sourceStakePubKey","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","Voter","VoteProgram","voteInit","authorizedVoter","authorizedWithdrawer","initializeAccount","voteAuthorizationType","currentAuthorityDerivedKeyBasePubkey","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","voteAuthorizeWithSeedArgs","authorizedWithdrawerPubkey","currentVoteAccountBalance","rentExemptMinimum","withdraw","website","details","keybaseUsername","createChainIdMiddleware","chainId","req","end","createProviderConfigMiddleware","providerConfig","createConfigMiddleware","mergeMiddleware","createJsonRpcClient","rpcTarget","createFetchMiddleware","networkMiddleware","createGetAccountsMiddleware","_ref","getAccounts","createAsyncMiddleware","_context","createRequestAccountsMiddleware","_ref3","requestAccounts","_context2","createGenericJRPCMiddleware","targetMethod","handler","_context3","createSolanaMiddleware","providerHandlers","signTransaction","signAndSendTransaction","signAllTransactions","signMessage","getPrivateKey","getSecretKey","BaseInjectedProvider","_inherits","_classCallCheck","_super","chainConfig","chainNamespace","CHAIN_NAMESPACES","_createClass","injectedProvider","engine","JRPCEngine","getProviderHandlers","solanaMiddleware","configMiddleware","injectedProviderProxy","getInjectedProviderProxy","provider","providerFromEngine","updateProviderEngineProxy","lookupNetwork","_lookupNetwork","BaseProvider","getBaseProviderHandlers","_requestAccounts","_getAccounts","_getPrivateKey","ethErrors","_getSecretKey","_context5","_context6","display","sigData","_req$params","_req$params2","_context7","_context8","txRes","createInjectedProviderProxyMiddleware","PhantomInjectedProvider","SlopeInjectedProxyProvider","getProviderEngineProxy","_yield$injectedProvid","_yield$injectedProvid2","txMessage","_yield$injectedProvid3","_yield$injectedProvid4","conn","allTxns","unsignedTx","_yield$injectedProvid5","_data$signatures","getSlopeHandlers","SolflareInjectedProvider","solflareProviderHandlers","getSolflareHandlers","SolletInjectedProvider","getSolletHandlers","getTorusHandlers","_req$params3","_req$params4","_req$params5","TorusInjectedProvider","handleInjectedProviderUpdate","setupEngine","connectedChainId","connectedHexChainId","isHexStrict","WalletInitializationError","emit","_context4","_this","configure","_objectSpread","setupProvider","_getProviderHandlers","keyPairGenerator","_context9","keyPair","signedMsg","nacl","_providerEngineProxy","txns","_req$params6","_iterator","tx","SolanaPrivateKeyProvider","_enable","_createJsonRpcClient","getChainSwitchMiddleware","getAccountMiddleware","getChainConfig","health","chainSwitchHandlers","addNewChainConfig","chainName","rpcUrls","blockExplorerUrls","nativeCurrency","addChain","ticker","symbol","tickerName","displayName","blockExplorer","switchSolanaChain","switchChain","_ref6","createChainSwitchMiddleware","accountHandlers","updatePrivatekey","_this2","updateAccount","_ref7","createAccountMiddleware","providerFactory","SolanaWallet","_defineProperty","_yield$this$provider$","signedTransaction","signedTransactions","base64","require","ieee754","customInspectSymbol","K_MAX_LENGTH","createBuffer","encodingOrOffset","allocUnsafe","isEncoding","actual","fromString","ArrayBuffer","isView","arrayView","isInstance","fromArrayBuffer","fromArrayLike","fromArrayView","SharedArrayBuffer","valueOf","isBuffer","checked","numberIsNaN","fromObject","assertSize","mustMatch","loweredCase","base64ToBytes","toLowerCase","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","bidirectionalIndexOf","dir","arrayIndexOf","lastIndexOf","indexSize","arrLength","valLength","read","readUInt16BE","foundIndex","found","hexWrite","remaining","strLen","utf8Write","blitBuffer","asciiWrite","asciiToBytes","base64Write","ucs2Write","units","hi","utf16leToBytes","fromByteArray","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","decodeCodePointsArray","TYPED_ARRAY_SUPPORT","proto","foo","typedArraySupport","poolSize","allocUnsafeSlow","_isBuffer","compare","list","swap16","swap32","swap64","toLocaleString","inspect","replace","trim","thisStart","thisEnd","thisCopy","targetCopy","_arr","ret","hexSliceLookupTable","checkOffset","ext","checkInt","wrtBigUInt64LE","checkIntBI","wrtBigUInt64BE","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","newBuf","readUintLE","mul","readUintBE","readUint8","readUInt8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUint32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","last","boundsError","readBigUInt64BE","readInt8","readInt16LE","readInt16BE","readBigInt64LE","readBigInt64BE","writeUintLE","writeUintBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUint32BE","writeBigUInt64LE","writeBigUInt64BE","sub","writeInt8","writeInt16LE","writeInt16BE","writeBigInt64LE","writeBigInt64BE","targetStart","copyWithin","errors","sym","getMessage","Base","stack","addNumericalSeparator","ERR_OUT_OF_RANGE","checkBounds","ERR_INVALID_ARG_TYPE","ERR_BUFFER_OUT_OF_BOUNDS","received","INVALID_BASE64_RE","leadSurrogate","toByteArray","base64clean","dst","alphabet","table","i16","BufferBigIntNotDefined","_Buffer","ALPHABET","BASE_MAP","charAt","xc","LEADER","FACTOR","iFACTOR","decodeUnsafe","psz","zeroes","b256","carry","it3","it4","vch","pbegin","pend","b58","it1","it2","repeat","reversed","width","__createBinding","__setModuleDefault","__decorate","decorators","desc","getOwnPropertyDescriptor","Reflect","decorate","__importStar","__importDefault","BinaryReader","BinaryWriter","BorshError","baseDecode","baseEncode","bn_js_1","bs58_1","textDecoder","TextDecoder","fatal","INITIAL_LENGTH","fieldPath","originalMessage","addToFieldPath","fieldName","maybeResize","writeU8","writeU16","writeU32","writeU64","writeBuffer","toArray","writeU128","writeU256","writeU512","writeString","writeFixedArray","writeArray","handlingRangeError","propertyKey","propertyDescriptor","originalMethod","readU8","readU16","readU32","readU64","readBuffer","readU128","readU256","readU512","readString","readFixedArray","readArray","capitalizeFirstLetter","toUpperCase","serializeField","fieldType","writer","serializeStruct","borshSerialize","structSchema","deserializeField","reader","deserializeStruct","classType","borshDeserialize","Writer","Reader","basex","Events","EE","once","addListener","emitter","event","listener","evt","_events","_eventsCount","clearEvent","EventEmitter","eventNames","events","names","getOwnPropertySymbols","listeners","handlers","ee","listenerCount","a3","a4","a5","removeListener","removeAllListeners","off","prefixed","uuid","generateRequest","ClientBrowser","callServer","reviver","replacer","generator","notificationIdNull","isBatch","hasCallback","_parseResponse","responseText","parse","isError","isNotError","_interopRequireDefault","_createClass2","_classCallCheck2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_websocket","_createSuper","Derived","hasNativeReflectConstruct","construct","sham","Proxy","_isNativeReflectConstruct","Super","NewTarget","Client","_CommonClient","_ref$autoconnect","_ref$reconnect","reconnect","_ref$reconnect_interv","reconnect_interval","_ref$max_reconnects","generate_request_id","_regenerator","_asyncToGenerator2","_typeof2","_eventemitter","__rest","propertyIsEnumerable","CommonClient","_EventEmitter","webSocketFactory","_a","_a$autoconnect","_a$reconnect","_a$reconnect_interval","_a$max_reconnects","rest_options","queue","rpc_id","ready","current_reconnects","_connect","socket","timeout","ws_opts","send","promise","_login","mark","_callee","resp","wrap","prev","sent","abrupt","stop","_listMethods","_callee2","_this3","_subscribe","_callee3","_x2","_unsubscribe","_callee4","_x3","_this4","_ref2","WebSocketBrowserImpl","protocols","WebSocket","onopen","onmessage","onerror","onclose","optionsOrCallback","inRange","ToDictionary","Stream","tokens","endOfStream","prepend","token","pop","decoderError","opt_code_point","DEFAULT_ENCODING","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","stream","bite","code_point","UTF8Encoder","temp","input_stream","code_points","cp","codePointsToString","opt_string","stringToCodePoints"],"sourceRoot":""}