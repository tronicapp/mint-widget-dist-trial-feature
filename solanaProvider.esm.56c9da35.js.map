{"mappings":"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","sources":["node_modules/@web3auth/solana-provider/src/rpc/JrpcClient.ts","node_modules/@web3auth/solana-provider/src/rpc/solanaRpcMiddlewares.ts","node_modules/@web3auth/solana-provider/src/providers/injectedProviders/base/baseInjectedProvider.ts","node_modules/@web3auth/solana-provider/src/providers/injectedProviders/base/providerHandlers.ts","node_modules/@web3auth/solana-provider/src/providers/injectedProviders/injectedProviderProxy.ts","node_modules/@web3auth/solana-provider/src/providers/injectedProviders/phantom/phantomInjectedProvider.ts","node_modules/@web3auth/solana-provider/src/providers/injectedProviders/slope/slopeInjectedProvider.ts","node_modules/@web3auth/solana-provider/src/providers/injectedProviders/slope/providerHandlers.ts","node_modules/@web3auth/solana-provider/src/providers/injectedProviders/solflare/solflareInjectedProvider.ts","node_modules/@web3auth/solana-provider/src/providers/injectedProviders/solflare/providerHandlers.ts","node_modules/@web3auth/solana-provider/src/providers/injectedProviders/sollet/solletInjectedProvider.ts","node_modules/@web3auth/solana-provider/src/providers/injectedProviders/sollet/providerHandlers.ts","node_modules/@web3auth/solana-provider/src/providers/injectedProviders/torus/providerHandlers.ts","node_modules/@web3auth/solana-provider/src/providers/injectedProviders/torus/torusInjectedProvider.ts","node_modules/@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyUtils.ts","node_modules/@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyProvider.ts","node_modules/@web3auth/solana-provider/src/solanaWallet.ts","node_modules/bs58/index.js","node_modules/base-x/src/index.js","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/utils/ed25519.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/utils/to-buffer.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/utils/borsh-schema.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/publickey.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/bpf-loader-deprecated.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/account.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/transaction/constants.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/transaction/expiry-custom-errors.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/message/account-keys.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/layout.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/utils/shortvec-encoding.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/utils/assert.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/message/compiled-keys.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/transaction/legacy.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/message/legacy.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/message/v0.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/message/versioned.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/transaction/message.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/sysvar.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/utils/send-and-confirm-transaction.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/utils/sleep.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/instruction.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/fee-calculator.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/utils/bigint.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/nonce-account.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/programs/system.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/loader.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/bpf-loader.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/node_modules/fast-stable-stringify/index.js","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/epoch-schedule.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/errors.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/__forks__/browser/fetch-impl.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/programs/address-lookup-table/state.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/account-data.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/utils/makeWebsocketUrl.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/connection.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/keypair.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/programs/address-lookup-table/index.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/programs/compute-budget.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/programs/ed25519.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/utils/secp256k1.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/programs/secp256k1.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/programs/stake.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/programs/vote.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/validator-info.ts","node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/vote-account.ts","node_modules/@swc/helpers/src/_object_without_properties.mjs","node_modules/@swc/helpers/src/_object_without_properties_loose.mjs","node_modules/@noble/hashes/sha512.js","node_modules/@noble/hashes/_sha2.js","node_modules/@noble/hashes/_assert.js","node_modules/@noble/hashes/utils.js","node_modules/@noble/hashes/cryptoBrowser.js","node_modules/@noble/hashes/_u64.js","node_modules/@noble/ed25519/lib/esm/index.js","node_modules/@noble/hashes/sha256.js","node_modules/borsh/lib/index.js","node_modules/text-encoding-utf-8/lib/encoding.lib.js","node_modules/@solana/buffer-layout/src/Layout.ts","node_modules/bigint-buffer/dist/browser.js","node_modules/superstruct/src/error.ts","node_modules/superstruct/src/utils.ts","node_modules/superstruct/src/struct.ts","node_modules/superstruct/src/structs/utilities.ts","node_modules/superstruct/src/structs/types.ts","node_modules/superstruct/src/structs/coercions.ts","node_modules/@swc/helpers/src/_to_array.mjs","node_modules/rpc-websockets/dist/index.browser.js","node_modules/rpc-websockets/dist/lib/client/websocket.browser.js","node_modules/eventemitter3/index.js","node_modules/rpc-websockets/dist/lib/client.js","node_modules/jayson/lib/client/browser/index.js","node_modules/jayson/lib/generateRequest.js","node_modules/@noble/hashes/sha3.js","node_modules/@noble/hashes/hmac.js","node_modules/@web3auth/solana-provider/node_modules/@noble/secp256k1/lib/esm/index.js"],"sourcesContent":["import { createFetchMiddleware } from \"@toruslabs/base-controllers\";\nimport { JRPCEngineEndCallback, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig } from \"@web3auth/base\";\n\nexport function createChainIdMiddleware(chainId: string): JRPCMiddleware<unknown, unknown> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<string>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"solana_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createProviderConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  return (\n    req: JRPCRequest<unknown>,\n    res: JRPCResponse<Omit<CustomChainConfig, \"chainNamespace\">>,\n    next: JRPCEngineNextCallback,\n    end: JRPCEngineEndCallback\n  ) => {\n    if (req.method === \"solana_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  const { chainId } = providerConfig;\n\n  return mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig)]);\n}\n\nexport function createJsonRpcClient(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): {\n  networkMiddleware: JRPCMiddleware<unknown, unknown>;\n  fetchMiddleware: JRPCMiddleware<unknown, unknown>;\n} {\n  const { rpcTarget } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({ rpcTarget });\n  const networkMiddleware = mergeMiddleware([createConfigMiddleware(providerConfig), fetchMiddleware]);\n  return { networkMiddleware, fetchMiddleware };\n}\n","import type { Transaction } from \"@solana/web3.js\";\nimport { createAsyncMiddleware, JRPCMiddleware, JRPCRequest, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nexport interface IProviderHandlers {\n  requestAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getPrivateKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signTransaction: (req: JRPCRequest<{ message: Transaction }>) => Promise<Transaction>;\n  signAllTransactions: (req: JRPCRequest<{ message: Transaction[] }>) => Promise<Transaction[]>;\n  signAndSendTransaction: (req: JRPCRequest<{ message: Transaction }>) => Promise<{ signature: string }>;\n  getSecretKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signMessage: (req: JRPCRequest<{ message: Uint8Array; display?: string }>) => Promise<Uint8Array>;\n}\n\nexport function createGetAccountsMiddleware({ getAccounts }: { getAccounts: IProviderHandlers[\"getAccounts\"] }): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"getAccounts\") return next();\n\n    if (!getAccounts) throw new Error(\"WalletMiddleware - opts.getAccounts not provided\");\n    // This calls from the prefs controller\n    const accounts = await getAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createRequestAccountsMiddleware({\n  requestAccounts,\n}: {\n  requestAccounts: IProviderHandlers[\"requestAccounts\"];\n}): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"requestAccounts\") return next();\n\n    if (!requestAccounts) throw new Error(\"WalletMiddleware - opts.requestAccounts not provided\");\n    // This calls the UI login function\n    const accounts = await requestAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createGenericJRPCMiddleware<T, U>(\n  targetMethod: string,\n  handler: (req: JRPCRequest<T>) => Promise<U>\n): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware<T, unknown>(async (request, response, next) => {\n    const { method } = request;\n    if (method !== targetMethod) return next();\n\n    if (!handler) throw new Error(`WalletMiddleware - ${targetMethod} not provided`);\n\n    const result = await handler(request);\n\n    response.result = result;\n    return undefined;\n  });\n}\n\nexport function createSolanaMiddleware(providerHandlers: IProviderHandlers): JRPCMiddleware<unknown, unknown> {\n  const { getAccounts, requestAccounts, signTransaction, signAndSendTransaction, signAllTransactions, signMessage, getPrivateKey, getSecretKey } =\n    providerHandlers;\n\n  return mergeMiddleware([\n    createRequestAccountsMiddleware({ requestAccounts }),\n    createGetAccountsMiddleware({ getAccounts }),\n    createGenericJRPCMiddleware<{ message: Transaction }, Transaction>(\"signTransaction\", signTransaction),\n    createGenericJRPCMiddleware<{ message: Transaction }, { signature: string }>(\"signAndSendTransaction\", signAndSendTransaction),\n    createGenericJRPCMiddleware<{ message: Transaction[] }, Transaction[]>(\"signAllTransactions\", signAllTransactions),\n    createGenericJRPCMiddleware<{ message: Uint8Array }, Uint8Array>(\"signMessage\", signMessage),\n    createGenericJRPCMiddleware<void, string>(\"solanaPrivateKey\", getPrivateKey),\n    createGenericJRPCMiddleware<void, string>(\"solanaSecretKey\", getSecretKey),\n  ]);\n}\nexport interface AddSolanaChainParameter {\n  chainId: string; // A 0x-prefixed hexadecimal string\n  chainName: string;\n  nativeCurrency: {\n    name: string;\n    symbol: string; // 2-6 characters long\n    decimals: 18;\n  };\n  rpcUrls: string[];\n  blockExplorerUrls?: string[];\n}\n\nexport interface IChainSwitchHandlers {\n  addNewChainConfig: (req: JRPCRequest<AddSolanaChainParameter>) => Promise<void>;\n  switchSolanaChain: (req: JRPCRequest<{ chainId: string }>) => Promise<void>;\n}\nexport function createChainSwitchMiddleware({ addNewChainConfig, switchSolanaChain }: IChainSwitchHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([\n    createGenericJRPCMiddleware<AddSolanaChainParameter, void>(\"addSolanaChain\", addNewChainConfig),\n    createGenericJRPCMiddleware<{ chainId: string }, void>(\"switchSolanaChain\", switchSolanaChain),\n  ]);\n}\n\nexport interface IAccountHandlers {\n  updatePrivatekey: (req: JRPCRequest<{ privateKey: string }>) => Promise<void>;\n}\nexport function createAccountMiddleware({ updatePrivatekey }: IAccountHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([createGenericJRPCMiddleware<{ privateKey: string }, void>(\"updateAccount\", updatePrivatekey)]);\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\n\nimport { createConfigMiddleware } from \"../../../rpc/JrpcClient\";\nimport { createSolanaMiddleware, IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport abstract class BaseInjectedProvider<P> extends BaseProvider<BaseProviderConfig, BaseProviderState, P> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    return Promise.resolve();\n  }\n\n  public async setupProvider(injectedProvider: P): Promise<void> {\n    const engine = new JRPCEngine();\n\n    const providerHandlers = this.getProviderHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    engine.push(solanaMiddleware);\n\n    const configMiddleware = createConfigMiddleware(this.config.chainConfig as CustomChainConfig);\n    engine.push(configMiddleware);\n\n    const injectedProviderProxy = this.getInjectedProviderProxy(injectedProvider);\n    if (injectedProviderProxy) {\n      engine.push(injectedProviderProxy);\n    }\n\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    const { chainConfig } = this.config;\n    this.update({\n      chainId: chainConfig.chainId,\n    });\n    return chainConfig.chainId || \"\";\n  }\n\n  protected getInjectedProviderProxy(_: P): JRPCMiddleware<unknown, unknown> {\n    return undefined;\n  }\n\n  protected abstract getProviderHandlers(injectedProvider: P): IProviderHandlers;\n}\n","import { Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getBaseProviderHandlers = (injectedProvider: IBaseWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : [];\n    },\n    getAccounts: async () => (injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : []),\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<Transaction> => {\n      const transaction = await injectedProvider.signTransaction(req.params.message);\n      return transaction;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array; display?: \"utf8\" | \"hex\" }>): Promise<Uint8Array> => {\n      const sigData = await injectedProvider.signMessage(req.params.message, req.params.display);\n      return sigData.signature;\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: Transaction[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = await injectedProvider.signAllTransactions(req.params.message);\n      return transaction;\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n      const txRes = await injectedProvider.signAndSendTransaction(req.params.message);\n      return { signature: txRes.signature };\n    },\n  };\n  return providerHandlers;\n};\n","import { createAsyncMiddleware, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse } from \"@toruslabs/openlogin-jrpc\";\n\nimport { InjectedProvider } from \"./interface\";\n\nexport function createInjectedProviderProxyMiddleware(provider: InjectedProvider): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (req: JRPCRequest<unknown[]>, res: JRPCResponse<unknown>, _next: JRPCEngineNextCallback) => {\n    const result = await provider.request({\n      ...req,\n    });\n    res.result = result;\n  });\n}\n","import { JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nimport { IPhantomWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\n\nexport class PhantomInjectedProvider extends BaseInjectedProvider<IPhantomWalletProvider> {\n  protected getProviderHandlers(injectedProvider: IPhantomWalletProvider): IProviderHandlers {\n    return getBaseProviderHandlers(injectedProvider);\n  }\n\n  protected getInjectedProviderProxy(injectedProvider: IPhantomWalletProvider): JRPCMiddleware<unknown, unknown> {\n    return createInjectedProviderProxyMiddleware(injectedProvider);\n  }\n}\n","import { ISlopeProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSlopeHandlers } from \"./providerHandlers\";\n\nexport class SlopeInjectedProxyProvider extends BaseInjectedProvider<ISlopeProvider> {\n  protected getProviderHandlers(injectedProvider: ISlopeProvider): IProviderHandlers {\n    return getSlopeHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import { Connection, PublicKey, Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ISlopeProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getSlopeHandlers = (injectedProvider: ISlopeProvider, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const { data } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getAccounts: async () => {\n      const { data } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<Transaction> => {\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({ message: \"Invalid transaction message\" });\n      const { data } = await injectedProvider.signTransaction(bs58.encode(txMessage.serializeMessage()));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, Buffer.from(signature));\n      return txMessage;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      const response = await injectedProvider.signMessage(req.params.message);\n      return bs58.decode(response.data.signature);\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n      const provider = getProviderEngineProxy();\n      if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({ message: \"Invalid transaction message\" });\n      const { data } = await injectedProvider.signTransaction(bs58.encode(txMessage.serializeMessage()));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, Buffer.from(signature));\n      const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n      const conn = new Connection(chainConfig.rpcTarget);\n      const res = await conn.sendRawTransaction(txMessage.serialize());\n      return { signature: res };\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: Transaction[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const allTxns = req.params.message;\n      const { length } = allTxns;\n\n      const unsignedTx = [];\n\n      for (let i = 0; i < length; i++) {\n        unsignedTx.push(bs58.encode(req.params.message[i].serializeMessage()));\n      }\n      const { msg, data } = await injectedProvider.signAllTransactions(unsignedTx);\n\n      if (!data.publicKey || data.signatures?.length !== length) throw new Error(msg);\n\n      const publicKey = new PublicKey(data.publicKey);\n\n      for (let i = 0; i < length; i++) {\n        const signature = bs58.decode(data.signatures[i]);\n        allTxns[i].addSignature(publicKey, Buffer.from(signature));\n      }\n\n      return allTxns;\n    },\n  };\n  return providerHandlers;\n};\n","import { SolflareWallet } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSolflareHandlers } from \"./providerHandlers\";\n\nexport class SolflareInjectedProvider extends BaseInjectedProvider<SolflareWallet> {\n  protected getProviderHandlers(injectedProvider: SolflareWallet): IProviderHandlers {\n    return getSolflareHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import { Connection, Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider, SolflareWallet } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\n\nexport const getSolflareHandlers = (injectedProvider: SolflareWallet, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const solflareProviderHandlers = getBaseProviderHandlers(injectedProvider as IBaseWalletProvider);\n  solflareProviderHandlers.signAndSendTransaction = async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n    const provider = getProviderEngineProxy();\n    if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const transaction = await injectedProvider.signTransaction(req.params.message);\n    const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n    const conn = new Connection(chainConfig.rpcTarget);\n    const res = await conn.sendRawTransaction(transaction.serialize());\n    return { signature: res };\n  };\n  return solflareProviderHandlers;\n};\n","import type SolletWallet from \"@project-serum/sol-wallet-adapter\";\n\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSolletHandlers } from \"./providerHandlers\";\n\nexport class SolletInjectedProvider extends BaseInjectedProvider<SolletWallet> {\n  protected getProviderHandlers(injectedProvider: SolletWallet): IProviderHandlers {\n    return getSolletHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import type SolletWallet from \"@project-serum/sol-wallet-adapter\";\nimport { Connection, Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\n\nexport const getSolletHandlers = (injectedProvider: SolletWallet, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const providerHandlers = getBaseProviderHandlers(injectedProvider as IBaseWalletProvider);\n  providerHandlers.signMessage = async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n    const { signature } = await injectedProvider.sign(req.params.message, \"utf8\");\n    return signature;\n  };\n  providerHandlers.signAndSendTransaction = async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n    const provider = getProviderEngineProxy();\n    if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const transaction = await injectedProvider.signTransaction(req.params.message);\n    const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n    const conn = new Connection(chainConfig.rpcTarget);\n    const res = await conn.sendRawTransaction(transaction.serialize());\n    return { signature: res };\n  };\n  return providerHandlers;\n};\n","import { Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ITorusWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getTorusHandlers = (injectedProvider: ITorusWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const message = await injectedProvider.signMessage(req.params.message);\n      return message;\n    },\n\n    signTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<Transaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.signTransaction(txMessage);\n      return response;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.sendTransaction(txMessage);\n      return { signature: response };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: Transaction[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transactions = req.params.message;\n      const response = await injectedProvider.signAllTransactions(transactions);\n      return response;\n    },\n  };\n  return providerHandlers;\n};\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, isHexStrict, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ITorusWalletProvider } from \"../../../interface\";\nimport { createSolanaMiddleware } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\nimport { getTorusHandlers } from \"./providerHandlers\";\n\nexport class TorusInjectedProvider extends BaseProvider<BaseProviderConfig, BaseProviderState, ITorusWalletProvider> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    return Promise.resolve();\n  }\n\n  public async setupProvider(injectedProvider: ITorusWalletProvider): Promise<void> {\n    this.handleInjectedProviderUpdate(injectedProvider);\n    await this.setupEngine(injectedProvider);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this.provider) throw ethErrors.provider.custom({ message: \"Torus solana provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n\n    const connectedChainId = await this.provider.request<unknown, string>({\n      method: \"solana_chainId\",\n    });\n\n    const connectedHexChainId = isHexStrict(connectedChainId.toString()) ? connectedChainId : `0x${parseInt(connectedChainId, 10).toString(16)}`;\n    if (chainId !== connectedHexChainId)\n      throw WalletInitializationError.rpcConnectionError(`Invalid network, net_version is: ${connectedHexChainId}, expected: ${chainId}`);\n\n    this.update({ chainId: connectedHexChainId });\n    this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return this.state.chainId;\n  }\n\n  private async setupEngine(injectedProvider: ITorusWalletProvider): Promise<void> {\n    const providerHandlers = getTorusHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    const injectedProviderProxy = createInjectedProviderProxyMiddleware(injectedProvider);\n    const engine = new JRPCEngine();\n    engine.push(solanaMiddleware);\n    engine.push(injectedProviderProxy);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  private async handleInjectedProviderUpdate(injectedProvider: ITorusWalletProvider): Promise<void> {\n    injectedProvider.on(\"accountsChanged\", async (accounts: string[]) => {\n      this.provider.emit(\"accountsChanged\", accounts);\n    });\n    injectedProvider.on(\"chainChanged\", async (chainId: string) => {\n      const connectedHexChainId = isHexStrict(chainId) ? chainId : `0x${parseInt(chainId, 10).toString(16)}`;\n      // Check if chainId changed and trigger event\n      this.configure({\n        chainConfig: { ...this.config.chainConfig, chainId: connectedHexChainId },\n      });\n      await this.setupProvider(injectedProvider);\n    });\n  }\n}\n","import { Keypair, Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport nacl from \"@toruslabs/tweetnacl-js\";\nimport { SafeEventEmitterProvider, WalletInitializationError } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IProviderHandlers } from \"../../rpc/solanaRpcMiddlewares\";\n\nexport async function getProviderHandlers({\n  privKey,\n  getProviderEngineProxy,\n}: {\n  privKey: string;\n  getProviderEngineProxy: () => SafeEventEmitterProvider | null;\n}): Promise<IProviderHandlers> {\n  const keyPairGenerator = (): Keypair => {\n    return Keypair.fromSecretKey(Buffer.from(privKey, \"hex\"));\n  };\n  if (typeof privKey !== \"string\") throw WalletInitializationError.invalidParams(\"privKey must be a string\");\n  const keyPair = keyPairGenerator();\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return [keyPair.publicKey.toBase58()];\n    },\n    getAccounts: async () => [keyPair.publicKey.toBase58()],\n\n    getPrivateKey: async () => privKey,\n    getSecretKey: async () => bs58.encode(keyPair.secretKey),\n\n    signTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<Transaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = req.params.message;\n      transaction.partialSign(keyPair);\n      return transaction;\n    },\n\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const signedMsg = nacl.sign.detached(req.params.message, keyPair.secretKey);\n      return signedMsg;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const _providerEngineProxy = getProviderEngineProxy();\n      if (!_providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n\n      const transaction = req.params.message;\n      transaction.sign(keyPair);\n\n      const sig = await _providerEngineProxy.request<string>({\n        method: \"sendTransaction\",\n        params: [bs58.encode(transaction.serialize())],\n      });\n      return { signature: sig };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: Transaction[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const txns = req.params?.message;\n      for (const tx of txns || []) {\n        const transaction = tx;\n        transaction.partialSign(keyPair);\n      }\n      return txns;\n    },\n  };\n\n  return providerHandlers;\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware, JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { createJsonRpcClient } from \"../../rpc/JrpcClient\";\nimport {\n  AddSolanaChainParameter,\n  createAccountMiddleware,\n  createChainSwitchMiddleware,\n  createSolanaMiddleware,\n  IAccountHandlers,\n  IChainSwitchHandlers,\n} from \"../../rpc/solanaRpcMiddlewares\";\nimport { getProviderHandlers } from \"./solanaPrivateKeyUtils\";\n\nexport interface SolanaPrivKeyProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\nexport interface SolanaPrivKeyProviderState extends BaseProviderState {\n  privateKey?: string;\n}\nexport class SolanaPrivateKeyProvider extends BaseProvider<BaseProviderConfig, SolanaPrivKeyProviderState, string> {\n  constructor({ config, state }: { config: SolanaPrivKeyProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public static getProviderInstance = async (params: {\n    privKey: string;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n  }): Promise<SolanaPrivateKeyProvider> => {\n    const providerFactory = new SolanaPrivateKeyProvider({ config: { chainConfig: params.chainConfig } });\n    await providerFactory.setupProvider(params.privKey);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.state.privateKey)\n      throw ethErrors.provider.custom({ message: \"Private key is not found in state, plz pass it in constructor state param\", code: 4902 });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request<unknown, string[]>({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(privKey: string): Promise<void> {\n    const providerHandlers = await getProviderHandlers({ privKey, getProviderEngineProxy: this.getProviderEngineProxy.bind(this) });\n\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n\n    const engine = new JRPCEngine();\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(this.getChainSwitchMiddleware());\n    engine.push(this.getAccountMiddleware());\n    engine.push(solanaMiddleware);\n    engine.push(networkMiddleware);\n\n    const provider = providerFromEngine(engine);\n\n    this.updateProviderEngineProxy(provider);\n\n    await this.lookupNetwork();\n  }\n\n  public async updateAccount(params: { privateKey: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const existingKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request<unknown, string[]>({ method: \"requestAccounts\" }),\n      });\n    }\n  }\n\n  public async switchChain(params: { chainId: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    this.configure({ chainConfig });\n    const privKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    await this.setupProvider(privKey);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const health = await this._providerEngineProxy.request<unknown, string>({\n      method: \"getHealth\",\n      params: [],\n    });\n    const { chainConfig } = this.config;\n    if (health !== \"ok\")\n      throw WalletInitializationError.rpcConnectionError(`Failed to lookup network for following rpc target: ${chainConfig.rpcTarget}`);\n    this.update({ chainId: chainConfig.chainId });\n    if (this.state.chainId !== chainConfig.chainId) {\n      this.provider.emit(\"chainChanged\", this.state.chainId);\n      this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    }\n    return this.state.chainId;\n  }\n\n  private getChainSwitchMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const chainSwitchHandlers: IChainSwitchHandlers = {\n      addNewChainConfig: async (req: JRPCRequest<AddSolanaChainParameter>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        const { chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency } = req.params;\n\n        if (!chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n        if (!rpcUrls || rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n        if (!nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.SOLANA,\n          chainId,\n          ticker: nativeCurrency?.symbol || \"SOL\",\n          tickerName: nativeCurrency?.name || \"Solana\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: blockExplorerUrls?.[0] || \"\",\n        });\n      },\n      switchSolanaChain: async (req: JRPCRequest<{ chainId: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n        await this.switchChain(req.params);\n      },\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  private getAccountMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const accountHandlers: IAccountHandlers = {\n      updatePrivatekey: async (req: JRPCRequest<{ privateKey: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.privateKey) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n        const { privateKey } = req.params;\n        await this.updateAccount({ privateKey });\n      },\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n}\n","import { Transaction } from \"@solana/web3.js\";\nimport { RequestArguments, SafeEventEmitterProvider } from \"@web3auth/base\";\n\nimport { ISolanaWallet } from \"./interface\";\n\nexport class SolanaWallet implements ISolanaWallet {\n  public provider: SafeEventEmitterProvider;\n\n  constructor(provider: SafeEventEmitterProvider) {\n    this.provider = provider;\n  }\n\n  public async requestAccounts(): Promise<string[]> {\n    const accounts = await this.provider.request<string[]>({\n      method: \"requestAccounts\",\n      params: {},\n    });\n    return accounts;\n  }\n\n  public async signAndSendTransaction(transaction: Transaction): Promise<{ signature: string }> {\n    const { signature } = await this.provider.request<{ signature: string }>({\n      method: \"signAndSendTransaction\",\n      params: {\n        message: transaction,\n      },\n    });\n    return { signature };\n  }\n\n  public async signTransaction(transaction: Transaction): Promise<Transaction> {\n    const signedTransaction = (await this.provider.request({\n      method: \"signTransaction\",\n      params: {\n        message: transaction,\n      },\n    })) as Transaction;\n    return signedTransaction;\n  }\n\n  public async signAllTransactions(transactions: Transaction[]): Promise<Transaction[]> {\n    const signedTransactions = (await this.provider.request({\n      method: \"signAllTransactions\",\n      params: {\n        message: transactions,\n      },\n    })) as Transaction[];\n    return signedTransactions;\n  }\n\n  public async signMessage(data: Uint8Array): Promise<Uint8Array> {\n    const response = await this.provider.request<Uint8Array>({\n      method: \"signMessage\",\n      params: {\n        message: data,\n      },\n    });\n    return response as Uint8Array;\n  }\n\n  public async request<T>(args: RequestArguments): Promise<T> {\n    const result = await this.provider.request<T>(args);\n    return result as T;\n  }\n}\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","import {sha512} from '@noble/hashes/sha512';\nimport * as ed25519 from '@noble/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\ned25519.utils.sha512Sync = (...m) => sha512(ed25519.utils.concatBytes(...m));\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.sync.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.Point.fromHex(publicKey, true /* strict */);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sync.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sync.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.sync.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using acounter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","import {Buffer} from 'buffer';\n\nimport {generatePrivateKey, getPublicKey} from './utils/ed25519';\nimport {toBuffer} from './utils/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  private _publicKey: Buffer;\n  /** @internal */\n  private _secretKey: Buffer;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey(): Buffer {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?: TransactionBlockhashCtor | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBuffer())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {Message} from './legacy';\nimport {MessageV0} from './v0';\n\nexport type VersionedMessage = Message | MessageV0;\n// eslint-disable-next-line no-redeclare\nexport const VersionedMessage = {\n  deserializeMessageVersion(serializedMessage: Uint8Array): 'legacy' | number {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n\n  deserialize: (serializedMessage: Uint8Array): VersionedMessage => {\n    const version =\n      VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\n        `Transaction message version ${version} deserialization is not supported`,\n      );\n    }\n  },\n};\n","import {AccountKeysFromLookups} from '../message/account-keys';\nimport assert from '../utils/assert';\nimport {toBuffer} from '../utils/to-buffer';\nimport {Blockhash} from '../blockhash';\nimport {Message, MessageV0, VersionedMessage} from '../message';\nimport {PublicKey} from '../publickey';\nimport {AddressLookupTableAccount} from '../programs';\nimport {AccountMeta, TransactionInstruction} from './legacy';\n\nexport type TransactionMessageArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\nexport type DecompileArgs =\n  | {\n      accountKeysFromLookups: AccountKeysFromLookups;\n    }\n  | {\n      addressLookupTableAccounts: AddressLookupTableAccount[];\n    };\n\nexport class TransactionMessage {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n\n  constructor(args: TransactionMessageArgs) {\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n\n  static decompile(\n    message: VersionedMessage,\n    args?: DecompileArgs,\n  ): TransactionMessage {\n    const {header, compiledInstructions, recentBlockhash} = message;\n\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts,\n    } = header;\n\n    const numWritableSignedAccounts =\n      numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n\n    const numWritableUnsignedAccounts =\n      message.staticAccountKeys.length - numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n    if (payerKey === undefined) {\n      throw new Error(\n        'Failed to decompile message because no account keys were found',\n      );\n    }\n\n    const instructions: TransactionInstruction[] = [];\n    for (const compiledIx of compiledInstructions) {\n      const keys: AccountMeta[] = [];\n\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n        if (pubkey === undefined) {\n          throw new Error(\n            `Failed to find key for account key index ${keyIndex}`,\n          );\n        }\n\n        const isSigner = keyIndex < numRequiredSignatures;\n\n        let isWritable;\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable =\n            keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable =\n            keyIndex - accountKeys.staticAccountKeys.length <\n            // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n            accountKeys.accountKeysFromLookups!.writable.length;\n        }\n\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable,\n        });\n      }\n\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n      if (programId === undefined) {\n        throw new Error(\n          `Failed to find program id for program id index ${compiledIx.programIdIndex}`,\n        );\n      }\n\n      instructions.push(\n        new TransactionInstruction({\n          programId,\n          data: toBuffer(compiledIx.data),\n          keys,\n        }),\n      );\n    }\n\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash,\n    });\n  }\n\n  compileToLegacyMessage(): Message {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n    });\n  }\n\n  compileToV0Message(\n    addressLookupTableAccounts?: AddressLookupTableAccount[],\n  ): MessageV0 {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts,\n    });\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status =\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n      ? (\n          await connection.confirmTransaction(\n            {\n              signature: signature,\n              blockhash: transaction.recentBlockhash,\n              lastValidBlockHeight: transaction.lastValidBlockHeight,\n            },\n            options && options.commitment,\n          )\n        ).value\n      : (\n          await connection.confirmTransaction(\n            signature,\n            options && options.commitment,\n          )\n        ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  typeof SolanaJSONRPCErrorCode[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy = {\n  signature: TransactionSignature;\n} & BlockhashWithExpiryBlockHeight;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of account addresses to return post simulation state for */\n  accounts?: {\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(url.startsWith('https:') /* useHttps */);\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n        source: optional(\n          union([literal('transaction'), literal('lookupTable')]),\n        ),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: BlockheightBasedTransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` using a `TransactionConfirmationConfig` */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy:\n      | BlockheightBasedTransactionConfirmationStrategy\n      | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config =\n        strategy as BlockheightBasedTransactionConfirmationStrategy;\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const subscriptionCommitment = commitment || this.commitment;\n    let timeoutId;\n    let subscriptionId;\n    let done = false;\n\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          rawSignature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            done = true;\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    const expiryPromise = new Promise<\n      | {__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED}\n      | {__type: TransactionStatus.TIMED_OUT; timeoutMs: number}\n    >(resolve => {\n      if (typeof strategy === 'string') {\n        let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n        switch (subscriptionCommitment) {\n          case 'processed':\n          case 'recent':\n          case 'single':\n          case 'confirmed':\n          case 'singleGossip': {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n          // exhaust enums to ensure full coverage\n          case 'finalized':\n          case 'max':\n          case 'root':\n        }\n\n        timeoutId = setTimeout(\n          () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n          timeoutMs,\n        );\n      } else {\n        let config =\n          strategy as BlockheightBasedTransactionConfirmationStrategy;\n        const checkBlockHeight = async () => {\n          try {\n            const blockHeight = await this.getBlockHeight(commitment);\n            return blockHeight;\n          } catch (_e) {\n            return -1;\n          }\n        };\n        (async () => {\n          let currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n          while (currentBlockHeight <= config.lastValidBlockHeight) {\n            await sleep(1000);\n            if (done) return;\n            currentBlockHeight = await checkBlockHeight();\n            if (done) return;\n          }\n          resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n        })();\n      }\n    });\n\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      switch (outcome.__type) {\n        case TransactionStatus.BLOCKHEIGHT_EXCEEDED:\n          throw new TransactionExpiredBlockheightExceededError(rawSignature);\n        case TransactionStatus.PROCESSED:\n          result = outcome.response;\n          break;\n        case TransactionStatus.TIMED_OUT:\n          throw new TransactionExpiredTimeoutError(\n            rawSignature,\n            outcome.timeoutMs / 1000,\n          );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: Message,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const wireMessage = message.serialize().toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result as unknown as RpcResponseAndContext<number>;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta, version}) => ({\n        meta,\n        transaction: {\n          ...transaction,\n          message: versionedMessageFromResponse(version, transaction.message),\n        },\n        version,\n      })),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedBlockResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetParsedBlockRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    return res.result;\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(\n    commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block height information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, options);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._subscriptionsByHash[hash] = {\n        ...subscription,\n        state: 'pending',\n      };\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'subscribing',\n                };\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                };\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'pending',\n                };\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._subscriptionsByHash[hash] = {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  };\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._subscriptionsByHash[hash] = {\n                      ...subscription,\n                      state: 'subscribed',\n                    };\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'unsubscribed',\n                };\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {hmac} from '@noble/hashes/hmac';\nimport {sha256} from '@noble/hashes/sha256';\nimport * as secp256k1 from '@noble/secp256k1';\n\n// Supply a synchronous hashing algorithm to make this\n// library interoperable with the synchronous APIs in web3.js.\nsecp256k1.utils.hmacSha256Sync = (key: Uint8Array, ...msgs: Uint8Array[]) => {\n  const h = hmac.create(sha256, key);\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.signSync>[0],\n  privKey: Parameters<typeof secp256k1.signSync>[1],\n) => secp256k1.signSync(msgHash, privKey, {der: false, recovered: true});\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'AuthorizeWithSeed' | 'InitializeAccount' | 'Withdraw';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","import objectWithoutPropertiesLoose from './_object_without_properties_loose.mjs';\n\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha384 = exports.sha512_256 = exports.sha512 = exports.SHA512 = void 0;\nconst _sha2_js_1 = require(\"./_sha2.js\");\nconst _u64_js_1 = require(\"./_u64.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = _u64_js_1.default.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n)));\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = new Uint32Array(80);\nconst SHA512_W_L = new Uint32Array(80);\nclass SHA512 extends _sha2_js_1.SHA2 {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = _u64_js_1.default.rotrSH(W15h, W15l, 1) ^ _u64_js_1.default.rotrSH(W15h, W15l, 8) ^ _u64_js_1.default.shrSH(W15h, W15l, 7);\n            const s0l = _u64_js_1.default.rotrSL(W15h, W15l, 1) ^ _u64_js_1.default.rotrSL(W15h, W15l, 8) ^ _u64_js_1.default.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = _u64_js_1.default.rotrSH(W2h, W2l, 19) ^ _u64_js_1.default.rotrBH(W2h, W2l, 61) ^ _u64_js_1.default.shrSH(W2h, W2l, 6);\n            const s1l = _u64_js_1.default.rotrSL(W2h, W2l, 19) ^ _u64_js_1.default.rotrBL(W2h, W2l, 61) ^ _u64_js_1.default.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = _u64_js_1.default.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = _u64_js_1.default.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = _u64_js_1.default.rotrSH(Eh, El, 14) ^ _u64_js_1.default.rotrSH(Eh, El, 18) ^ _u64_js_1.default.rotrBH(Eh, El, 41);\n            const sigma1l = _u64_js_1.default.rotrSL(Eh, El, 14) ^ _u64_js_1.default.rotrSL(Eh, El, 18) ^ _u64_js_1.default.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = _u64_js_1.default.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = _u64_js_1.default.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = _u64_js_1.default.rotrSH(Ah, Al, 28) ^ _u64_js_1.default.rotrBH(Ah, Al, 34) ^ _u64_js_1.default.rotrBH(Ah, Al, 39);\n            const sigma0l = _u64_js_1.default.rotrSL(Ah, Al, 28) ^ _u64_js_1.default.rotrBL(Ah, Al, 34) ^ _u64_js_1.default.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = _u64_js_1.default.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = _u64_js_1.default.add3L(T1l, sigma0l, MAJl);\n            Ah = _u64_js_1.default.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = _u64_js_1.default.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = _u64_js_1.default.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = _u64_js_1.default.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = _u64_js_1.default.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = _u64_js_1.default.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = _u64_js_1.default.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = _u64_js_1.default.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = _u64_js_1.default.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nexports.SHA512 = SHA512;\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexports.sha512 = (0, utils_js_1.wrapConstructor)(() => new SHA512());\nexports.sha512_256 = (0, utils_js_1.wrapConstructor)(() => new SHA512_256());\nexports.sha384 = (0, utils_js_1.wrapConstructor)(() => new SHA384());\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SHA2 = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nclass SHA2 extends utils_js_1.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0, utils_js_1.createView)(this.buffer);\n    }\n    update(data) {\n        _assert_js_1.default.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0, utils_js_1.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        _assert_js_1.default.exists(this);\n        _assert_js_1.default.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0, utils_js_1.createView)(out);\n        this.get().forEach((v, i) => oview.setUint32(4 * i, v, isLE));\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\nexports.SHA2 = SHA2;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = void 0;\nfunction number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nexports.number = number;\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nexports.bool = bool;\nfunction bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new TypeError('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexports.bytes = bytes;\nfunction hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nexports.hash = hash;\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nexports.exists = exists;\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexports.output = output;\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output,\n};\nexports.default = assert;\n","\"use strict\";\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.randomBytes = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.isLE = exports.rotr = exports.createView = exports.u32 = exports.u8 = void 0;\n// The import here is via the package name. This is to ensure\n// that exports mapping/resolution does fall into place.\nconst crypto_1 = require(\"@noble/hashes/crypto\");\n// Cast array to different type\nconst u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.u8 = u8;\nconst u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\nexports.u32 = u32;\n// Cast array to view\nconst createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.createView = createView;\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\nexports.rotr = rotr;\nexports.isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// There is almost no big endian hardware, but js typed arrays uses platform specific endianness.\n// So, just to be sure not to corrupt anything.\nif (!exports.isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))\n */\nfunction bytesToHex(uint8a) {\n    // pre-caching improves the speed 6x\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nexports.bytesToHex = bytesToHex;\n/**\n * @example hexToBytes('deadbeef')\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nexports.hexToBytes = hexToBytes;\n// There is no setImmediate in browser and setTimeout is slow. However, call to async function will return Promise\n// which will be fullfiled only on next scheduler queue processing step and this is exactly what we need.\nconst nextTick = async () => { };\nexports.nextTick = nextTick;\n// Returns control to thread each 'tick' ms to avoid blocking\nasync function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await (0, exports.nextTick)();\n        ts += diff;\n    }\n}\nexports.asyncLoop = asyncLoop;\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string') {\n        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n    }\n    return new TextEncoder().encode(str);\n}\nexports.utf8ToBytes = utf8ToBytes;\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!(data instanceof Uint8Array))\n        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n    return data;\n}\nexports.toBytes = toBytes;\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nfunction concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nexports.concatBytes = concatBytes;\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nexports.Hash = Hash;\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n        throw new TypeError('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexports.checkOpts = checkOpts;\nfunction wrapConstructor(hashConstructor) {\n    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();\n    const tmp = hashConstructor();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashConstructor();\n    return hashC;\n}\nexports.wrapConstructor = wrapConstructor;\nfunction wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexports.wrapConstructorWithOpts = wrapConstructorWithOpts;\n/**\n * Secure PRNG\n */\nfunction randomBytes(bytesLength = 32) {\n    if (crypto_1.crypto.web) {\n        return crypto_1.crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    }\n    else if (crypto_1.crypto.node) {\n        return new Uint8Array(crypto_1.crypto.node.randomBytes(bytesLength).buffer);\n    }\n    else {\n        throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n}\nexports.randomBytes = randomBytes;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.crypto = void 0;\nexports.crypto = {\n    node: undefined,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.add = exports.toBig = exports.split = exports.fromBig = void 0;\nconst U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nexports.fromBig = fromBig;\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nexports.split = split;\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\nexports.toBig = toBig;\n// for Shift in [0, 32)\nconst shrSH = (h, l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h, l) => l;\nconst rotr32L = (h, l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\nexports.add = add;\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig: exports.toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexports.default = u64;\n","/*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst CU_O = BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989');\nconst CURVE = Object.freeze({\n    a: BigInt(-1),\n    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n    P: BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949'),\n    l: CU_O,\n    n: CU_O,\n    h: BigInt(8),\n    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n});\nexport { CURVE };\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nconst SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\nconst SQRT_D = BigInt('6853475219497561581579357271197624642482790079785650197046958215289687604742');\nconst SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\nconst INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\nconst ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\nconst D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\nclass ExtendedPoint {\n    constructor(x, y, z, t) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.t = t;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('ExtendedPoint#fromAffine: expected Point');\n        }\n        if (p.equals(Point.ZERO))\n            return ExtendedPoint.ZERO;\n        return new ExtendedPoint(p.x, p.y, _1n, mod(p.x * p.y));\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return this.toAffineBatch(points).map(this.fromAffine);\n    }\n    equals(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const X1Z2 = mod(X1 * Z2);\n        const X2Z1 = mod(X2 * Z1);\n        const Y1Z2 = mod(Y1 * Z2);\n        const Y2Z1 = mod(Y2 * Z1);\n        return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n    negate() {\n        return new ExtendedPoint(mod(-this.x), this.y, this.z, mod(-this.t));\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { a } = CURVE;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(_2n * mod(Z1 * Z1));\n        const D = mod(a * A);\n        const x1y1 = X1 + Y1;\n        const E = mod(mod(x1y1 * x1y1) - A - B);\n        const G = D + B;\n        const F = G - C;\n        const H = D - B;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    add(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1, t: T1 } = this;\n        const { x: X2, y: Y2, z: Z2, t: T2 } = other;\n        const A = mod((Y1 - X1) * (Y2 + X2));\n        const B = mod((Y1 + X1) * (Y2 - X2));\n        const F = mod(B - A);\n        if (F === _0n)\n            return this.double();\n        const C = mod(Z1 * _2n * T2);\n        const D = mod(T1 * _2n * Z2);\n        const E = D + C;\n        const G = B + A;\n        const H = D - C;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    precomputeWindow(W) {\n        const windows = 1 + 256 / W;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(ExtendedPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = ExtendedPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = ExtendedPoint.ZERO;\n        let f = ExtendedPoint.ZERO;\n        const windows = 1 + 256 / W;\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            if (wbits === 0) {\n                let pr = precomputes[offset];\n                if (window % 2)\n                    pr = pr.negate();\n                f = f.add(pr);\n            }\n            else {\n                let cached = precomputes[offset + Math.abs(wbits) - 1];\n                if (wbits < 0)\n                    cached = cached.negate();\n                p = p.add(cached);\n            }\n        }\n        return ExtendedPoint.normalizeZ([p, f])[0];\n    }\n    multiply(scalar, affinePoint) {\n        return this.wNAF(normalizeScalar(scalar, CURVE.l), affinePoint);\n    }\n    multiplyUnsafe(scalar) {\n        let n = normalizeScalar(scalar, CURVE.l, false);\n        const G = ExtendedPoint.BASE;\n        const P0 = ExtendedPoint.ZERO;\n        if (n === _0n)\n            return P0;\n        if (this.equals(P0) || n === _1n)\n            return this;\n        if (this.equals(G))\n            return this.wNAF(n);\n        let p = P0;\n        let d = this;\n        while (n > _0n) {\n            if (n & _1n)\n                p = p.add(d);\n            d = d.double();\n            n >>= _1n;\n        }\n        return p;\n    }\n    isSmallOrder() {\n        return this.multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n    }\n    isTorsionFree() {\n        return this.multiplyUnsafe(CURVE.l).equals(ExtendedPoint.ZERO);\n    }\n    toAffine(invZ = invert(this.z)) {\n        const { x, y, z } = this;\n        const ax = mod(x * invZ);\n        const ay = mod(y * invZ);\n        const zz = mod(z * invZ);\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n    fromRistrettoBytes() {\n        legacyRist();\n    }\n    toRistrettoBytes() {\n        legacyRist();\n    }\n    fromRistrettoHash() {\n        legacyRist();\n    }\n}\nExtendedPoint.BASE = new ExtendedPoint(CURVE.Gx, CURVE.Gy, _1n, mod(CURVE.Gx * CURVE.Gy));\nExtendedPoint.ZERO = new ExtendedPoint(_0n, _1n, _1n, _0n);\nfunction assertExtPoint(other) {\n    if (!(other instanceof ExtendedPoint))\n        throw new TypeError('ExtendedPoint expected');\n}\nfunction assertRstPoint(other) {\n    if (!(other instanceof RistrettoPoint))\n        throw new TypeError('RistrettoPoint expected');\n}\nfunction legacyRist() {\n    throw new Error('Legacy method: switch to RistrettoPoint');\n}\nclass RistrettoPoint {\n    constructor(ep) {\n        this.ep = ep;\n    }\n    static calcElligatorRistrettoMap(r0) {\n        const { d } = CURVE;\n        const r = mod(SQRT_M1 * r0 * r0);\n        const Ns = mod((r + _1n) * ONE_MINUS_D_SQ);\n        let c = BigInt(-1);\n        const D = mod((c - d * r) * mod(r + d));\n        let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D);\n        let s_ = mod(s * r0);\n        if (!edIsNegative(s_))\n            s_ = mod(-s_);\n        if (!Ns_D_is_sq)\n            s = s_;\n        if (!Ns_D_is_sq)\n            c = r;\n        const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D);\n        const s2 = s * s;\n        const W0 = mod((s + s) * D);\n        const W1 = mod(Nt * SQRT_AD_MINUS_ONE);\n        const W2 = mod(_1n - s2);\n        const W3 = mod(_1n + s2);\n        return new ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n    }\n    static hashToCurve(hex) {\n        hex = ensureBytes(hex, 64);\n        const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n        const R1 = this.calcElligatorRistrettoMap(r1);\n        const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n        const R2 = this.calcElligatorRistrettoMap(r2);\n        return new RistrettoPoint(R1.add(R2));\n    }\n    static fromHex(hex) {\n        hex = ensureBytes(hex, 32);\n        const { a, d } = CURVE;\n        const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n        const s = bytes255ToNumberLE(hex);\n        if (!equalBytes(numberTo32BytesLE(s), hex) || edIsNegative(s))\n            throw new Error(emsg);\n        const s2 = mod(s * s);\n        const u1 = mod(_1n + a * s2);\n        const u2 = mod(_1n - a * s2);\n        const u1_2 = mod(u1 * u1);\n        const u2_2 = mod(u2 * u2);\n        const v = mod(a * d * u1_2 - u2_2);\n        const { isValid, value: I } = invertSqrt(mod(v * u2_2));\n        const Dx = mod(I * u2);\n        const Dy = mod(I * Dx * v);\n        let x = mod((s + s) * Dx);\n        if (edIsNegative(x))\n            x = mod(-x);\n        const y = mod(u1 * Dy);\n        const t = mod(x * y);\n        if (!isValid || edIsNegative(t) || y === _0n)\n            throw new Error(emsg);\n        return new RistrettoPoint(new ExtendedPoint(x, y, _1n, t));\n    }\n    toRawBytes() {\n        let { x, y, z, t } = this.ep;\n        const u1 = mod(mod(z + y) * mod(z - y));\n        const u2 = mod(x * y);\n        const u2sq = mod(u2 * u2);\n        const { value: invsqrt } = invertSqrt(mod(u1 * u2sq));\n        const D1 = mod(invsqrt * u1);\n        const D2 = mod(invsqrt * u2);\n        const zInv = mod(D1 * D2 * t);\n        let D;\n        if (edIsNegative(t * zInv)) {\n            let _x = mod(y * SQRT_M1);\n            let _y = mod(x * SQRT_M1);\n            x = _x;\n            y = _y;\n            D = mod(D1 * INVSQRT_A_MINUS_D);\n        }\n        else {\n            D = D2;\n        }\n        if (edIsNegative(x * zInv))\n            y = mod(-y);\n        let s = mod((z - y) * D);\n        if (edIsNegative(s))\n            s = mod(-s);\n        return numberTo32BytesLE(s);\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toString() {\n        return this.toHex();\n    }\n    equals(other) {\n        assertRstPoint(other);\n        const a = this.ep;\n        const b = other.ep;\n        const one = mod(a.x * b.y) === mod(a.y * b.x);\n        const two = mod(a.y * b.y) === mod(a.x * b.x);\n        return one || two;\n    }\n    add(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.add(other.ep));\n    }\n    subtract(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.subtract(other.ep));\n    }\n    multiply(scalar) {\n        return new RistrettoPoint(this.ep.multiply(scalar));\n    }\n    multiplyUnsafe(scalar) {\n        return new RistrettoPoint(this.ep.multiplyUnsafe(scalar));\n    }\n}\nRistrettoPoint.BASE = new RistrettoPoint(ExtendedPoint.BASE);\nRistrettoPoint.ZERO = new RistrettoPoint(ExtendedPoint.ZERO);\nconst pointPrecomputes = new WeakMap();\nclass Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    static fromHex(hex, strict = true) {\n        const { d, P } = CURVE;\n        hex = ensureBytes(hex, 32);\n        const normed = hex.slice();\n        normed[31] = hex[31] & ~0x80;\n        const y = bytesToNumberLE(normed);\n        if (strict && y >= P)\n            throw new Error('Expected 0 < hex < P');\n        if (!strict && y >= POW_2_256)\n            throw new Error('Expected 0 < hex < 2**256');\n        const y2 = mod(y * y);\n        const u = mod(y2 - _1n);\n        const v = mod(d * y2 + _1n);\n        let { isValid, value: x } = uvRatio(u, v);\n        if (!isValid)\n            throw new Error('Point.fromHex: invalid y coordinate');\n        const isXOdd = (x & _1n) === _1n;\n        const isLastByteOdd = (hex[31] & 0x80) !== 0;\n        if (isLastByteOdd !== isXOdd) {\n            x = mod(-x);\n        }\n        return new Point(x, y);\n    }\n    static async fromPrivateKey(privateKey) {\n        return (await getExtendedPublicKey(privateKey)).point;\n    }\n    toRawBytes() {\n        const bytes = numberTo32BytesLE(this.y);\n        bytes[31] |= this.x & _1n ? 0x80 : 0;\n        return bytes;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toX25519() {\n        const { y } = this;\n        const u = mod((_1n + y) * invert(_1n - y));\n        return numberTo32BytesLE(u);\n    }\n    isTorsionFree() {\n        return ExtendedPoint.fromAffine(this).isTorsionFree();\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(mod(-this.x), this.y);\n    }\n    add(other) {\n        return ExtendedPoint.fromAffine(this).add(ExtendedPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return ExtendedPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _1n);\nclass Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex, 64);\n        const r = Point.fromHex(bytes.slice(0, 32), false);\n        const s = bytesToNumberLE(bytes.slice(32, 64));\n        return new Signature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!(r instanceof Point))\n            throw new Error('Expected Point instance');\n        normalizeScalar(s, CURVE.l, false);\n        return this;\n    }\n    toRawBytes() {\n        const u8 = new Uint8Array(64);\n        u8.set(this.r.toRawBytes());\n        u8.set(numberTo32BytesLE(this.s), 32);\n        return u8;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n}\nexport { ExtendedPoint, RistrettoPoint, Point, Signature };\nfunction concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array list');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction numberTo32BytesBE(num) {\n    const length = 32;\n    const hex = num.toString(16).padStart(length * 2, '0');\n    return hexToBytes(hex);\n}\nfunction numberTo32BytesLE(num) {\n    return numberTo32BytesBE(num).reverse();\n}\nfunction edIsNegative(num) {\n    return (mod(num) & _1n) === _1n;\n}\nfunction bytesToNumberLE(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    return BigInt('0x' + bytesToHex(Uint8Array.from(uint8a).reverse()));\n}\nconst MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nfunction bytes255ToNumberLE(bytes) {\n    return mod(bytesToNumberLE(bytes) & MAX_255B);\n}\nfunction mod(a, b = CURVE.P) {\n    const res = a % b;\n    return res >= _0n ? res : b + res;\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const tmp = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = mod(acc * tmp[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return tmp;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction pow_2_252_3(x) {\n    const { P } = CURVE;\n    const _5n = BigInt(5);\n    const _10n = BigInt(10);\n    const _20n = BigInt(20);\n    const _40n = BigInt(40);\n    const _80n = BigInt(80);\n    const x2 = (x * x) % P;\n    const b2 = (x2 * x) % P;\n    const b4 = (pow2(b2, _2n) * b2) % P;\n    const b5 = (pow2(b4, _1n) * x) % P;\n    const b10 = (pow2(b5, _5n) * b5) % P;\n    const b20 = (pow2(b10, _10n) * b10) % P;\n    const b40 = (pow2(b20, _20n) * b20) % P;\n    const b80 = (pow2(b40, _40n) * b40) % P;\n    const b160 = (pow2(b80, _80n) * b80) % P;\n    const b240 = (pow2(b160, _80n) * b80) % P;\n    const b250 = (pow2(b240, _10n) * b10) % P;\n    const pow_p_5_8 = (pow2(b250, _2n) * x) % P;\n    return { pow_p_5_8, b2 };\n}\nfunction uvRatio(u, v) {\n    const v3 = mod(v * v * v);\n    const v7 = mod(v3 * v3 * v);\n    const pow = pow_2_252_3(u * v7).pow_p_5_8;\n    let x = mod(u * v3 * pow);\n    const vx2 = mod(v * x * x);\n    const root1 = x;\n    const root2 = mod(x * SQRT_M1);\n    const useRoot1 = vx2 === u;\n    const useRoot2 = vx2 === mod(-u);\n    const noRoot = vx2 === mod(-u * SQRT_M1);\n    if (useRoot1)\n        x = root1;\n    if (useRoot2 || noRoot)\n        x = root2;\n    if (edIsNegative(x))\n        x = mod(-x);\n    return { isValid: useRoot1 || useRoot2, value: x };\n}\nfunction invertSqrt(number) {\n    return uvRatio(_1n, number);\n}\nfunction modlLE(hash) {\n    return mod(bytesToNumberLE(hash), CURVE.l);\n}\nfunction equalBytes(b1, b2) {\n    if (b1.length !== b2.length) {\n        return false;\n    }\n    for (let i = 0; i < b1.length; i++) {\n        if (b1[i] !== b2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction ensureBytes(hex, expectedLength) {\n    const bytes = hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n    if (typeof expectedLength === 'number' && bytes.length !== expectedLength)\n        throw new Error(`Expected ${expectedLength} bytes`);\n    return bytes;\n}\nfunction normalizeScalar(num, max, strict = true) {\n    if (!max)\n        throw new TypeError('Specify max value');\n    if (typeof num === 'number' && Number.isSafeInteger(num))\n        num = BigInt(num);\n    if (typeof num === 'bigint' && num < max) {\n        if (strict) {\n            if (_0n < num)\n                return num;\n        }\n        else {\n            if (_0n <= num)\n                return num;\n        }\n    }\n    throw new TypeError('Expected valid scalar: 0 < scalar < max');\n}\nfunction adjustBytes25519(bytes) {\n    bytes[0] &= 248;\n    bytes[31] &= 127;\n    bytes[31] |= 64;\n    return bytes;\n}\nfunction decodeScalar25519(n) {\n    return bytesToNumberLE(adjustBytes25519(ensureBytes(n, 32)));\n}\nfunction checkPrivateKey(key) {\n    key =\n        typeof key === 'bigint' || typeof key === 'number'\n            ? numberTo32BytesBE(normalizeScalar(key, POW_2_256))\n            : ensureBytes(key);\n    if (key.length !== 32)\n        throw new Error(`Expected 32 bytes`);\n    return key;\n}\nfunction getKeyFromHash(hashed) {\n    const head = adjustBytes25519(hashed.slice(0, 32));\n    const prefix = hashed.slice(32, 64);\n    const scalar = modlLE(head);\n    const point = Point.BASE.multiply(scalar);\n    const pointBytes = point.toRawBytes();\n    return { head, prefix, scalar, point, pointBytes };\n}\nlet _sha512Sync;\nfunction sha512s(...m) {\n    if (typeof _sha512Sync !== 'function')\n        throw new Error('utils.sha512Sync must be set to use sync methods');\n    return _sha512Sync(...m);\n}\nasync function getExtendedPublicKey(key) {\n    return getKeyFromHash(await utils.sha512(checkPrivateKey(key)));\n}\nfunction getExtendedPublicKeySync(key) {\n    return getKeyFromHash(sha512s(checkPrivateKey(key)));\n}\nexport async function getPublicKey(privateKey) {\n    return (await getExtendedPublicKey(privateKey)).pointBytes;\n}\nfunction getPublicKeySync(privateKey) {\n    return getExtendedPublicKeySync(privateKey).pointBytes;\n}\nexport async function sign(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = await getExtendedPublicKey(privateKey);\n    const r = modlLE(await utils.sha512(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(await utils.sha512(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nfunction signSync(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = getExtendedPublicKeySync(privateKey);\n    const r = modlLE(sha512s(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(sha512s(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nfunction prepareVerification(sig, message, publicKey) {\n    message = ensureBytes(message);\n    if (!(publicKey instanceof Point))\n        publicKey = Point.fromHex(publicKey, false);\n    const { r, s } = sig instanceof Signature ? sig.assertValidity() : Signature.fromHex(sig);\n    const SB = ExtendedPoint.BASE.multiplyUnsafe(s);\n    return { r, s, SB, pub: publicKey, msg: message };\n}\nfunction finishVerification(publicKey, r, SB, hashed) {\n    const k = modlLE(hashed);\n    const kA = ExtendedPoint.fromAffine(publicKey).multiplyUnsafe(k);\n    const RkA = ExtendedPoint.fromAffine(r).add(kA);\n    return RkA.subtract(SB).multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n}\nexport async function verify(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = await utils.sha512(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nfunction verifySync(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = sha512s(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nexport const sync = {\n    getExtendedPublicKey: getExtendedPublicKeySync,\n    getPublicKey: getPublicKeySync,\n    sign: signSync,\n    verify: verifySync,\n};\nexport async function getSharedSecret(privateKey, publicKey) {\n    const { head } = await getExtendedPublicKey(privateKey);\n    const u = Point.fromHex(publicKey).toX25519();\n    return curve25519.scalarMult(head, u);\n}\nPoint.BASE._setWindowSize(8);\nfunction cswap(swap, x_2, x_3) {\n    const dummy = mod(swap * (x_2 - x_3));\n    x_2 = mod(x_2 - dummy);\n    x_3 = mod(x_3 + dummy);\n    return [x_2, x_3];\n}\nfunction montgomeryLadder(pointU, scalar) {\n    const { P } = CURVE;\n    const u = normalizeScalar(pointU, P);\n    const k = normalizeScalar(scalar, P);\n    const a24 = BigInt(121665);\n    const x_1 = u;\n    let x_2 = _1n;\n    let z_2 = _0n;\n    let x_3 = u;\n    let z_3 = _1n;\n    let swap = _0n;\n    let sw;\n    for (let t = BigInt(255 - 1); t >= _0n; t--) {\n        const k_t = (k >> t) & _1n;\n        swap ^= k_t;\n        sw = cswap(swap, x_2, x_3);\n        x_2 = sw[0];\n        x_3 = sw[1];\n        sw = cswap(swap, z_2, z_3);\n        z_2 = sw[0];\n        z_3 = sw[1];\n        swap = k_t;\n        const A = x_2 + z_2;\n        const AA = mod(A * A);\n        const B = x_2 - z_2;\n        const BB = mod(B * B);\n        const E = AA - BB;\n        const C = x_3 + z_3;\n        const D = x_3 - z_3;\n        const DA = mod(D * A);\n        const CB = mod(C * B);\n        const dacb = DA + CB;\n        const da_cb = DA - CB;\n        x_3 = mod(dacb * dacb);\n        z_3 = mod(x_1 * mod(da_cb * da_cb));\n        x_2 = mod(AA * BB);\n        z_2 = mod(E * (AA + mod(a24 * E)));\n    }\n    sw = cswap(swap, x_2, x_3);\n    x_2 = sw[0];\n    x_3 = sw[1];\n    sw = cswap(swap, z_2, z_3);\n    z_2 = sw[0];\n    z_3 = sw[1];\n    const { pow_p_5_8, b2 } = pow_2_252_3(z_2);\n    const xp2 = mod(pow2(pow_p_5_8, BigInt(3)) * b2);\n    return mod(x_2 * xp2);\n}\nfunction encodeUCoordinate(u) {\n    return numberTo32BytesLE(mod(u, CURVE.P));\n}\nfunction decodeUCoordinate(uEnc) {\n    const u = ensureBytes(uEnc, 32);\n    u[31] &= 127;\n    return bytesToNumberLE(u);\n}\nexport const curve25519 = {\n    BASE_POINT_U: '0900000000000000000000000000000000000000000000000000000000000000',\n    scalarMult(privateKey, publicKey) {\n        const u = decodeUCoordinate(publicKey);\n        const p = decodeScalar25519(privateKey);\n        const pu = montgomeryLadder(u, p);\n        if (pu === _0n)\n            throw new Error('Invalid private or public key received');\n        return encodeUCoordinate(pu);\n    },\n    scalarMultBase(privateKey) {\n        return curve25519.scalarMult(privateKey, curve25519.BASE_POINT_U);\n    },\n};\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    getExtendedPublicKey,\n    mod,\n    invert,\n    TORSION_SUBGROUP: [\n        '0100000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n        '0000000000000000000000000000000000000000000000000000000000000080',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n        'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n        '0000000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n    ],\n    hashToPrivateScalar: (hash) => {\n        hash = ensureBytes(hash);\n        if (hash.length < 40 || hash.length > 1024)\n            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n        return mod(bytesToNumberLE(hash), CURVE.l - _1n) + _1n;\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return new Uint8Array(randomBytes(bytesLength).buffer);\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => {\n        return utils.randomBytes(32);\n    },\n    sha512: async (...messages) => {\n        const message = concatBytes(...messages);\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-512', message.buffer);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            return Uint8Array.from(crypto.node.createHash('sha512').update(message).digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha512 function\");\n        }\n    },\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point.equals(Point.BASE) ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_2n);\n        return cached;\n    },\n    sha512Sync: undefined,\n};\nObject.defineProperties(utils, {\n    sha512Sync: {\n        configurable: false,\n        get() {\n            return _sha512Sync;\n        },\n        set(val) {\n            if (!_sha512Sync)\n                _sha512Sync = val;\n        },\n    },\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha256 = void 0;\nconst _sha2_js_1 = require(\"./_sha2.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends _sha2_js_1.SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ (W15 >>> 3);\n            const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexports.TextEncoder = TextEncoder;\nexports.TextDecoder = TextDecoder;",null,"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\nexport type Failure = {\n  value: any\n  key: any\n  type: string\n  refinement: string | undefined\n  message: string\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\n\nexport class StructError extends TypeError {\n  value: any\n  key!: any\n  type!: string\n  refinement!: string | undefined\n  path!: Array<any>\n  branch!: Array<any>\n  failures: () => Array<Failure>;\n  [x: string]: any\n\n  constructor(failure: Failure, failures: () => Generator<Failure>) {\n    let cached: Array<Failure> | undefined\n    const { message, ...rest } = failure\n    const { path } = failure\n    const msg =\n      path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`\n    super(msg)\n    Object.assign(this, rest)\n    this.name = this.constructor.name\n    this.failures = () => {\n      return (cached ??= [failure, ...failures()])\n    }\n  }\n}\n","import { Struct, Infer, Result, Context, Describe } from './struct'\nimport { Failure } from './error'\n\n/**\n * Check if a value is an iterator.\n */\n\nfunction isIterable<T>(x: unknown): x is Iterable<T> {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function'\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isObject(x: unknown): x is object {\n  return typeof x === 'object' && x != null\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isPlainObject(x: unknown): x is { [key: string]: any } {\n  if (Object.prototype.toString.call(x) !== '[object Object]') {\n    return false\n  }\n\n  const prototype = Object.getPrototypeOf(x)\n  return prototype === null || prototype === Object.prototype\n}\n\n/**\n * Return a value as a printable string.\n */\n\nexport function print(value: any): string {\n  return typeof value === 'string' ? JSON.stringify(value) : `${value}`\n}\n\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\n\nexport function shiftIterator<T>(input: Iterator<T>): T | undefined {\n  const { done, value } = input.next()\n  return done ? undefined : value\n}\n\n/**\n * Convert a single validation result to a failure.\n */\n\nexport function toFailure<T, S>(\n  result: string | boolean | Partial<Failure>,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): Failure | undefined {\n  if (result === true) {\n    return\n  } else if (result === false) {\n    result = {}\n  } else if (typeof result === 'string') {\n    result = { message: result }\n  }\n\n  const { path, branch } = context\n  const { type } = struct\n  const {\n    refinement,\n    message = `Expected a value of type \\`${type}\\`${\n      refinement ? ` with refinement \\`${refinement}\\`` : ''\n    }, but received: \\`${print(value)}\\``,\n  } = result\n\n  return {\n    value,\n    type,\n    refinement,\n    key: path[path.length - 1],\n    path,\n    branch,\n    ...result,\n    message,\n  }\n}\n\n/**\n * Convert a validation result to an iterable of failures.\n */\n\nexport function* toFailures<T, S>(\n  result: Result,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): IterableIterator<Failure> {\n  if (!isIterable(result)) {\n    result = [result]\n  }\n\n  for (const r of result) {\n    const failure = toFailure(r, context, struct, value)\n\n    if (failure) {\n      yield failure\n    }\n  }\n}\n\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\n\nexport function* run<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    path?: any[]\n    branch?: any[]\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): IterableIterator<[Failure, undefined] | [undefined, T]> {\n  const { path = [], branch = [value], coerce = false, mask = false } = options\n  const ctx: Context = { path, branch }\n\n  if (coerce) {\n    value = struct.coercer(value, ctx)\n\n    if (\n      mask &&\n      struct.type !== 'type' &&\n      isObject(struct.schema) &&\n      isObject(value) &&\n      !Array.isArray(value)\n    ) {\n      for (const key in value) {\n        if (struct.schema[key] === undefined) {\n          delete value[key]\n        }\n      }\n    }\n  }\n\n  let valid = true\n\n  for (const failure of struct.validator(value, ctx)) {\n    valid = false\n    yield [failure, undefined]\n  }\n\n  for (let [k, v, s] of struct.entries(value, ctx)) {\n    const ts = run(v, s as Struct, {\n      path: k === undefined ? path : [...path, k],\n      branch: k === undefined ? branch : [...branch, v],\n      coerce,\n      mask,\n    })\n\n    for (const t of ts) {\n      if (t[0]) {\n        valid = false\n        yield [t[0], undefined]\n      } else if (coerce) {\n        v = t[1]\n\n        if (k === undefined) {\n          value = v\n        } else if (value instanceof Map) {\n          value.set(k, v)\n        } else if (value instanceof Set) {\n          value.add(v)\n        } else if (isObject(value)) {\n          value[k] = v\n        }\n      }\n    }\n  }\n\n  if (valid) {\n    for (const failure of struct.refiner(value as T, ctx)) {\n      valid = false\n      yield [failure, undefined]\n    }\n  }\n\n  if (valid) {\n    yield [undefined, value as T]\n  }\n}\n\n/**\n * Assign properties from one type to another, overwriting existing.\n */\n\nexport type Assign<T, U> = Simplify<U & Omit<T, keyof U>>\n\n/**\n * A schema for enum structs.\n */\n\nexport type EnumSchema<T extends string | number> = { [K in T]: K }\n\n/**\n * Check if a type is an exact match.\n */\n\nexport type IsMatch<T, G> = T extends G ? (G extends T ? T : never) : never\n\n/**\n * Check if a type is a record type.\n */\n\nexport type IsRecord<T> = T extends object\n  ? string extends keyof T\n    ? T\n    : never\n  : never\n/**\n * Check if a type is a tuple.\n */\n\nexport type IsTuple<T> = T extends [any]\n  ? T\n  : T extends [any, any]\n  ? T\n  : T extends [any, any, any]\n  ? T\n  : T extends [any, any, any, any]\n  ? T\n  : T extends [any, any, any, any, any]\n  ? T\n  : never\n\n/**\n * Check if a type is a union.\n */\n\nexport type IsUnion<T, U extends T = T> = (\n  T extends any ? (U extends T ? false : true) : false\n) extends false\n  ? never\n  : T\n\n/**\n * A schema for object structs.\n */\n\nexport type ObjectSchema = Record<string, Struct<any, any>>\n\n/**\n * Infer a type from an object struct schema.\n */\n\nexport type ObjectType<S extends ObjectSchema> = Simplify<\n  Optionalize<{ [K in keyof S]: Infer<S[K]> }>\n>\n\n/**\n * Omit properties from a type that extend from a specific type.\n */\n\nexport type OmitBy<T, V> = Omit<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Normalize properties of a type that allow `undefined` to make them optional.\n */\n\nexport type Optionalize<S extends object> = OmitBy<S, undefined> &\n  Partial<PickBy<S, undefined>>\n\n/**\n * Transform an object schema type to represent a partial.\n */\n\nexport type PartialObjectSchema<S extends ObjectSchema> = {\n  [K in keyof S]: Struct<Infer<S[K]> | undefined>\n}\n\n/**\n * Pick properties from a type that extend from a specific type.\n */\n\nexport type PickBy<T, V> = Pick<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Simplifies a type definition to its most basic representation.\n */\n\nexport type Simplify<T> = T extends any[] | Date\n  ? T\n  : { [K in keyof T]: T[K] } & {}\n\nexport type If<B extends Boolean, Then, Else> = B extends true ? Then : Else\n\n/**\n * A schema for any type of struct.\n */\n\nexport type StructSchema<T> = [T] extends [string]\n  ? [T] extends [IsMatch<T, string>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [number]\n  ? [T] extends [IsMatch<T, number>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [boolean]\n  ? [T] extends [IsMatch<T, boolean>]\n    ? null\n    : T\n  : T extends\n      | bigint\n      | symbol\n      | undefined\n      | null\n      | Function\n      | Date\n      | Error\n      | RegExp\n      | Map<any, any>\n      | WeakMap<any, any>\n      | Set<any>\n      | WeakSet<any>\n      | Promise<any>\n  ? null\n  : T extends Array<infer E>\n  ? T extends IsTuple<T>\n    ? null\n    : Struct<E>\n  : T extends object\n  ? T extends IsRecord<T>\n    ? null\n    : { [K in keyof T]: Describe<T[K]> }\n  : null\n\n/**\n * A schema for tuple structs.\n */\n\nexport type TupleSchema<T> = { [K in keyof T]: Struct<T[K]> }\n","import { toFailures, shiftIterator, StructSchema, run } from './utils'\nimport { StructError, Failure } from './error'\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nexport class Struct<T = unknown, S = unknown> {\n  readonly TYPE!: T\n  type: string\n  schema: S\n  coercer: (value: unknown, context: Context) => unknown\n  validator: (value: unknown, context: Context) => Iterable<Failure>\n  refiner: (value: T, context: Context) => Iterable<Failure>\n  entries: (\n    value: unknown,\n    context: Context\n  ) => Iterable<[string | number, unknown, Struct<any> | Struct<never>]>\n\n  constructor(props: {\n    type: string\n    schema: S\n    coercer?: Coercer\n    validator?: Validator\n    refiner?: Refiner<T>\n    entries?: Struct<T, S>['entries']\n  }) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = (value: unknown) => value,\n      entries = function* () {},\n    } = props\n\n    this.type = type\n    this.schema = schema\n    this.entries = entries\n    this.coercer = coercer\n\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.validator = () => []\n    }\n\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.refiner = () => []\n    }\n  }\n\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n  assert(value: unknown): asserts value is T {\n    return assert(value, this)\n  }\n\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n  create(value: unknown): T {\n    return create(value, this)\n  }\n\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n  is(value: unknown): value is T {\n    return is(value, this)\n  }\n\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n  mask(value: unknown): T {\n    return mask(value, this)\n  }\n\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n  validate(\n    value: unknown,\n    options: {\n      coerce?: boolean\n    } = {}\n  ): [StructError, undefined] | [undefined, T] {\n    return validate(value, this, options)\n  }\n}\n\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nexport function assert<T, S>(\n  value: unknown,\n  struct: Struct<T, S>\n): asserts value is T {\n  const result = validate(value, struct)\n\n  if (result[0]) {\n    throw result[0]\n  }\n}\n\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nexport function create<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nexport function mask<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true, mask: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Check if a value passes a struct.\n */\n\nexport function is<T, S>(value: unknown, struct: Struct<T, S>): value is T {\n  const result = validate(value, struct)\n  return !result[0]\n}\n\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nexport function validate<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): [StructError, undefined] | [undefined, T] {\n  const tuples = run(value, struct, options)\n  const tuple = shiftIterator(tuples)!\n\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0]\n        }\n      }\n    })\n\n    return [error, undefined]\n  } else {\n    const v = tuple[1]\n    return [undefined, v]\n  }\n}\n\n/**\n * A `Context` contains information about the current location of the\n * validation inside the initial input value.\n */\n\nexport type Context = {\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * A type utility to extract the type from a `Struct` class.\n */\n\nexport type Infer<T extends Struct<any, any>> = T['TYPE']\n\n/**\n * A type utility to describe that a struct represents a TypeScript type.\n */\n\nexport type Describe<T> = Struct<T, StructSchema<T>>\n\n/**\n * A `Result` is returned from validation functions.\n */\n\nexport type Result =\n  | boolean\n  | string\n  | Partial<Failure>\n  | Iterable<boolean | string | Partial<Failure>>\n\n/**\n * A `Coercer` takes an unknown value and optionally coerces it.\n */\n\nexport type Coercer<T = unknown> = (value: T, context: Context) => unknown\n\n/**\n * A `Validator` takes an unknown value and validates it.\n */\n\nexport type Validator = (value: unknown, context: Context) => Result\n\n/**\n * A `Refiner` takes a value of a known type and validates it against a further\n * constraint.\n */\n\nexport type Refiner<T> = (value: T, context: Context) => Result\n","import { Struct, Context, Validator } from '../struct'\nimport { object, optional } from './types'\nimport { ObjectSchema, Assign, ObjectType, PartialObjectSchema } from '../utils'\n\n/**\n * Create a new struct that combines the properties properties from multiple\n * object structs.\n *\n * Like JavaScript's `Object.assign` utility.\n */\n\nexport function assign<A extends ObjectSchema, B extends ObjectSchema>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>\n): Struct<ObjectType<Assign<A, B>>, Assign<A, B>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>\n): Struct<ObjectType<Assign<Assign<A, B>, C>>, Assign<Assign<A, B>, C>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>\n): Struct<\n  ObjectType<Assign<Assign<Assign<A, B>, C>, D>>,\n  Assign<Assign<Assign<A, B>, C>, D>\n>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema,\n  E extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>,\n  E: Struct<ObjectType<E>, E>\n): Struct<\n  ObjectType<Assign<Assign<Assign<Assign<A, B>, C>, D>, E>>,\n  Assign<Assign<Assign<Assign<A, B>, C>, D>, E>\n>\nexport function assign(...Structs: Struct<any>[]): any {\n  const schemas = Structs.map((s) => s.schema)\n  const schema = Object.assign({}, ...schemas)\n  return object(schema)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n */\n\nexport function define<T>(name: string, validator: Validator): Struct<T, null> {\n  return new Struct({ type: name, schema: null, validator })\n}\n\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\nexport function deprecated<T>(\n  struct: Struct<T>,\n  log: (value: unknown, ctx: Context) => void\n): Struct<T> {\n  return new Struct({\n    ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true\n      } else {\n        log(value, ctx)\n        return struct.validator(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\nexport function dynamic<T>(\n  fn: (value: unknown, ctx: Context) => Struct<T, any>\n): Struct<T, null> {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n    *entries(value, ctx) {\n      const struct = fn(value, ctx)\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\nexport function lazy<T>(fn: () => Struct<T, any>): Struct<T, null> {\n  let struct: Struct<T, any> | undefined\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n    *entries(value, ctx) {\n      struct ??= fn()\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      struct ??= fn()\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      struct ??= fn()\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\nexport function omit<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Omit<S, K>>, Omit<S, K>> {\n  const { schema } = struct\n  const subschema: any = { ...schema }\n\n  for (const key of keys) {\n    delete subschema[key]\n  }\n\n  return object(subschema as Omit<S, K>)\n}\n\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\nexport function partial<S extends ObjectSchema>(\n  struct: Struct<ObjectType<S>, S> | S\n): Struct<ObjectType<PartialObjectSchema<S>>, PartialObjectSchema<S>> {\n  const schema: any =\n    struct instanceof Struct ? { ...struct.schema } : { ...struct }\n\n  for (const key in schema) {\n    schema[key] = optional(schema[key])\n  }\n\n  return object(schema) as any\n}\n\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\nexport function pick<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Pick<S, K>>, Pick<S, K>> {\n  const { schema } = struct\n  const subschema: any = {}\n\n  for (const key of keys) {\n    subschema[key] = schema[key]\n  }\n\n  return object(subschema as Pick<S, K>)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\nexport function struct<T>(name: string, validator: Validator): Struct<T, null> {\n  console.warn(\n    'superstruct@0.11 - The `struct` helper has been renamed to `define`.'\n  )\n\n  return define(name, validator)\n}\n","import { Infer, Struct } from '../struct'\nimport { define } from './utilities'\nimport {\n  TupleSchema,\n  ObjectSchema,\n  ObjectType,\n  print,\n  run,\n  isObject,\n} from '../utils'\n\n/**\n * Ensure that any value passes validation.\n */\n\nexport function any(): Struct<any, null> {\n  return define('any', () => true)\n}\n\n/**\n * Ensure that a value is an array and that its elements are of a specific type.\n *\n * Note: If you omit the element struct, the arrays elements will not be\n * iterated at all. This can be helpful for cases where performance is critical,\n * and it is preferred to using `array(any())`.\n */\n\nexport function array<T extends Struct<any>>(Element: T): Struct<Infer<T>[], T>\nexport function array(): Struct<unknown[], undefined>\nexport function array<T extends Struct<any>>(Element?: T): any {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array value, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a boolean.\n */\n\nexport function boolean(): Struct<boolean, null> {\n  return define('boolean', (value) => {\n    return typeof value === 'boolean'\n  })\n}\n\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\nexport function date(): Struct<Date, null> {\n  return define('date', (value) => {\n    return (\n      (value instanceof Date && !isNaN(value.getTime())) ||\n      `Expected a valid \\`Date\\` object, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is one of a set of potential values.\n *\n * Note: after creating the struct, you can access the definition of the\n * potential values as `struct.schema`.\n */\n\nexport function enums<T extends number>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends string>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends number | string>(values: readonly T[]): any {\n  const schema: any = {}\n  const description = values.map((v) => print(v)).join()\n\n  for (const key of values) {\n    schema[key] = key\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema,\n    validator(value) {\n      return (\n        values.includes(value as any) ||\n        `Expected one of \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a function.\n */\n\nexport function func(): Struct<Function, null> {\n  return define('func', (value) => {\n    return (\n      typeof value === 'function' ||\n      `Expected a function, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\nexport function instance<T extends { new (...args: any): any }>(\n  Class: T\n): Struct<InstanceType<T>, null> {\n  return define('instance', (value) => {\n    return (\n      value instanceof Class ||\n      `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an integer.\n */\n\nexport function integer(): Struct<number, null> {\n  return define('integer', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n      `Expected an integer, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value matches all of a set of types.\n */\n\nexport function intersection<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function intersection<A, B>(\n  Structs: TupleSchema<[A, B]>\n): Struct<A & B, null>\nexport function intersection<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A & B & C, null>\nexport function intersection<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A & B & C & D, null>\nexport function intersection<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A & B & C & D & E, null>\nexport function intersection<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A & B & C & D & E & F, null>\nexport function intersection<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A & B & C & D & E & F & G, null>\nexport function intersection<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A & B & C & D & E & F & G & H, null>\nexport function intersection<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A & B & C & D & E & F & G & H & I, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A & B & C & D & E & F & G & H & I & J, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q,\n  null\n>\nexport function intersection(Structs: Array<Struct<any, any>>): any {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx)\n      }\n    },\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx)\n      }\n    },\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Ensure that a value is an exact value, using `===` for comparison.\n */\n\nexport function literal<T extends boolean>(constant: T): Struct<T, T>\nexport function literal<T extends number>(constant: T): Struct<T, T>\nexport function literal<T extends string>(constant: T): Struct<T, T>\nexport function literal<T>(constant: T): Struct<T, null>\nexport function literal<T>(constant: T): any {\n  const description = print(constant)\n  const t = typeof constant\n  return new Struct({\n    type: 'literal',\n    schema:\n      t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n    validator(value) {\n      return (\n        value === constant ||\n        `Expected the literal \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `Map` object, and that its keys and values are of\n * specific types.\n */\n\nexport function map(): Struct<Map<unknown, unknown>, null>\nexport function map<K, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Map<K, V>, null>\nexport function map<K, V>(Key?: Struct<K>, Value?: Struct<V>): any {\n  return new Struct({\n    type: 'map',\n    schema: null,\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k as string, k, Key]\n          yield [k as string, v, Value]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Map ||\n        `Expected a \\`Map\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that no value ever passes validation.\n */\n\nexport function never(): Struct<never, null> {\n  return define('never', () => false)\n}\n\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nexport function nullable<T, S>(struct: Struct<T, S>): Struct<T | null, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is a number.\n */\n\nexport function number(): Struct<number, null> {\n  return define('number', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value)) ||\n      `Expected a number, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an object, that is has a known set of properties,\n * and that its properties are of specific types.\n *\n * Note: Unrecognized properties will fail validation.\n */\n\nexport function object(): Struct<Record<string, unknown>, null>\nexport function object<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S>\nexport function object<S extends ObjectSchema>(schema?: S): any {\n  const knowns = schema ? Object.keys(schema) : []\n  const Never = never()\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value))\n\n        for (const key of knowns) {\n          unknowns.delete(key)\n          yield [key, value[key], schema[key]]\n        }\n\n        for (const key of unknowns) {\n          yield [key, value[key], Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n    coercer(value) {\n      return isObject(value) ? { ...value } : value\n    },\n  })\n}\n\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nexport function optional<T, S>(struct: Struct<T, S>): Struct<T | undefined, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) =>\n      value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\nexport function record<K extends string, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Record<K, V>, null> {\n  return new Struct({\n    type: 'record',\n    schema: null,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k]\n          yield [k, k, Key]\n          yield [k, v, Value]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\nexport function regexp(): Struct<RegExp, null> {\n  return define('regexp', (value) => {\n    return value instanceof RegExp\n  })\n}\n\n/**\n * Ensure that a value is a `Set` object, and that its elements are of a\n * specific type.\n */\n\nexport function set(): Struct<Set<unknown>, null>\nexport function set<T>(Element: Struct<T>): Struct<Set<T>, null>\nexport function set<T>(Element?: Struct<T>): any {\n  return new Struct({\n    type: 'set',\n    schema: null,\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v as string, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Set ||\n        `Expected a \\`Set\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a string.\n */\n\nexport function string(): Struct<string, null> {\n  return define('string', (value) => {\n    return (\n      typeof value === 'string' ||\n      `Expected a string, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\n\nexport function tuple<A>(Structs: TupleSchema<[A]>): Struct<[A], null>\nexport function tuple<A, B>(Structs: TupleSchema<[A, B]>): Struct<[A, B], null>\nexport function tuple<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<[A, B, C], null>\nexport function tuple<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<[A, B, C, D], null>\nexport function tuple<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<[A, B, C, D, E], null>\nexport function tuple<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<[A, B, C, D, E, F], null>\nexport function tuple<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<[A, B, C, D, E, F, G], null>\nexport function tuple<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<[A, B, C, D, E, F, G, H], null>\nexport function tuple<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<[A, B, C, D, E, F, G, H, I], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<[A, B, C, D, E, F, G, H, I, J], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q], null>\nexport function tuple(Elements: Struct<any>[]): any {\n  const Never = never()\n\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Elements.length, value.length)\n\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Elements[i] || Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nexport function type<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S> {\n  const keys = Object.keys(schema)\n  return new Struct({\n    type: 'type',\n    schema,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value matches one of a set of types.\n */\n\nexport function union<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function union<A, B>(Structs: TupleSchema<[A, B]>): Struct<A | B, null>\nexport function union<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A | B | C, null>\nexport function union<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A | B | C | D, null>\nexport function union<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A | B | C | D | E, null>\nexport function union<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A | B | C | D | E | F, null>\nexport function union<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A | B | C | D | E | F | G, null>\nexport function union<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A | B | C | D | E | F | G | H, null>\nexport function union<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A | B | C | D | E | F | G | H | I, null>\nexport function union<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A | B | C | D | E | F | G | H | I | J, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q,\n  null\n>\nexport function union(Structs: Struct<any>[]): any {\n  const description = Structs.map((s) => s.type).join(' | ')\n  return new Struct({\n    type: 'union',\n    schema: null,\n    validator(value, ctx) {\n      const failures = []\n\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx)\n        const [first] = tuples\n\n        if (!first[0]) {\n          return []\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure)\n            }\n          }\n        }\n      }\n\n      return [\n        `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(\n          value\n        )}`,\n        ...failures,\n      ]\n    },\n  })\n}\n\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nexport function unknown(): Struct<unknown, null> {\n  return define('unknown', () => true)\n}\n","import { Struct, is, Coercer } from '../struct'\nimport { isPlainObject } from '../utils'\nimport { string, unknown } from './types'\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function coerce<T, S, C>(\n  struct: Struct<T, S>,\n  condition: Struct<C, any>,\n  coercer: Coercer<C>\n): Struct<T, S> {\n  return new Struct({\n    ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition)\n        ? struct.coercer(coercer(value, ctx), ctx)\n        : struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function defaulted<T, S>(\n  struct: Struct<T, S>,\n  fallback: any,\n  options: {\n    strict?: boolean\n  } = {}\n): Struct<T, S> {\n  return coerce(struct, unknown(), (x) => {\n    const f = typeof fallback === 'function' ? fallback() : fallback\n\n    if (x === undefined) {\n      return f\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = { ...x }\n      let changed = false\n\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key]\n          changed = true\n        }\n      }\n\n      if (changed) {\n        return ret\n      }\n    }\n\n    return x\n  })\n}\n\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function trimmed<T, S>(struct: Struct<T, S>): Struct<T, S> {\n  return coerce(struct, string(), (x) => x.trim())\n}\n","import arrayWithHoles from './_array_with_holes.mjs';\nimport iterableToArray from './_iterable_to_array.mjs';\nimport nonIterableRest from './_non_iterable_rest.mjs';\nimport unsupportedIterableToArray from './_unsupported_iterable_to_array.mjs';\n\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Client = void 0;\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _websocket = _interopRequireDefault(require(\"./lib/client/websocket.browser\"));\n\nvar _client = _interopRequireDefault(require(\"./lib/client\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar Client = /*#__PURE__*/function (_CommonClient) {\n  (0, _inherits2[\"default\"])(Client, _CommonClient);\n\n  var _super = _createSuper(Client);\n\n  function Client() {\n    var address = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"ws://localhost:8080\";\n\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$autoconnect = _ref.autoconnect,\n        autoconnect = _ref$autoconnect === void 0 ? true : _ref$autoconnect,\n        _ref$reconnect = _ref.reconnect,\n        reconnect = _ref$reconnect === void 0 ? true : _ref$reconnect,\n        _ref$reconnect_interv = _ref.reconnect_interval,\n        reconnect_interval = _ref$reconnect_interv === void 0 ? 1000 : _ref$reconnect_interv,\n        _ref$max_reconnects = _ref.max_reconnects,\n        max_reconnects = _ref$max_reconnects === void 0 ? 5 : _ref$max_reconnects;\n\n    var generate_request_id = arguments.length > 2 ? arguments[2] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, Client);\n    return _super.call(this, _websocket[\"default\"], address, {\n      autoconnect: autoconnect,\n      reconnect: reconnect,\n      reconnect_interval: reconnect_interval,\n      max_reconnects: max_reconnects\n    }, generate_request_id);\n  }\n\n  return (0, _createClass2[\"default\"])(Client);\n}(_client[\"default\"]);\n\nexports.Client = Client;","/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar WebSocketBrowserImpl = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(WebSocketBrowserImpl, _EventEmitter);\n\n  var _super = _createSuper(WebSocketBrowserImpl);\n\n  /** Instantiate a WebSocket class\n   * @constructor\n   * @param {String} address - url to a websocket server\n   * @param {(Object)} options - websocket options\n   * @param {(String|Array)} protocols - a list of protocols\n   * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n   */\n  function WebSocketBrowserImpl(address, options, protocols) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, WebSocketBrowserImpl);\n    _this = _super.call(this);\n    _this.socket = new window.WebSocket(address, protocols);\n\n    _this.socket.onopen = function () {\n      return _this.emit(\"open\");\n    };\n\n    _this.socket.onmessage = function (event) {\n      return _this.emit(\"message\", event.data);\n    };\n\n    _this.socket.onerror = function (error) {\n      return _this.emit(\"error\", error);\n    };\n\n    _this.socket.onclose = function (event) {\n      _this.emit(\"close\", event.code, event.reason);\n    };\n\n    return _this;\n  }\n  /**\n   * Sends data through a websocket connection\n   * @method\n   * @param {(String|Object)} data - data to be sent via websocket\n   * @param {Object} optionsOrCallback - ws options\n   * @param {Function} callback - a callback called once the data is sent\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(WebSocketBrowserImpl, [{\n    key: \"send\",\n    value: function send(data, optionsOrCallback, callback) {\n      var cb = callback || optionsOrCallback;\n\n      try {\n        this.socket.send(data);\n        cb();\n      } catch (error) {\n        cb(error);\n      }\n    }\n    /**\n     * Closes an underlying socket\n     * @method\n     * @param {Number} code - status code explaining why the connection is being closed\n     * @param {String} reason - a description why the connection is closing\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, reason) {\n      this.socket.close(code, reason);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener, options) {\n      this.socket.addEventListener(type, listener, options);\n    }\n  }]);\n  return WebSocketBrowserImpl;\n}(_eventemitter.EventEmitter);\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\n\n\nfunction _default(address, options) {\n  return new WebSocketBrowserImpl(address, options);\n}","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n","/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}; // @ts-ignore\n\n\nvar CommonClient = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(CommonClient, _EventEmitter);\n\n  var _super = _createSuper(CommonClient);\n\n  /**\n   * Instantiate a Client class.\n   * @constructor\n   * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n   * @param {String} address - url to a websocket server\n   * @param {Object} options - ws options object with reconnect parameters\n   * @param {Function} generate_request_id - custom generation request Id\n   * @return {CommonClient}\n   */\n  function CommonClient(webSocketFactory) {\n    var _this;\n\n    var address = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"ws://localhost:8080\";\n\n    var _a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var generate_request_id = arguments.length > 3 ? arguments[3] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, CommonClient);\n\n    var _a$autoconnect = _a.autoconnect,\n        autoconnect = _a$autoconnect === void 0 ? true : _a$autoconnect,\n        _a$reconnect = _a.reconnect,\n        reconnect = _a$reconnect === void 0 ? true : _a$reconnect,\n        _a$reconnect_interval = _a.reconnect_interval,\n        reconnect_interval = _a$reconnect_interval === void 0 ? 1000 : _a$reconnect_interval,\n        _a$max_reconnects = _a.max_reconnects,\n        max_reconnects = _a$max_reconnects === void 0 ? 5 : _a$max_reconnects,\n        rest_options = __rest(_a, [\"autoconnect\", \"reconnect\", \"reconnect_interval\", \"max_reconnects\"]);\n\n    _this = _super.call(this);\n    _this.webSocketFactory = webSocketFactory;\n    _this.queue = {};\n    _this.rpc_id = 0;\n    _this.address = address;\n    _this.autoconnect = autoconnect;\n    _this.ready = false;\n    _this.reconnect = reconnect;\n    _this.reconnect_interval = reconnect_interval;\n    _this.max_reconnects = max_reconnects;\n    _this.rest_options = rest_options;\n    _this.current_reconnects = 0;\n\n    _this.generate_request_id = generate_request_id || function () {\n      return ++_this.rpc_id;\n    };\n\n    if (_this.autoconnect) _this._connect(_this.address, Object.assign({\n      autoconnect: _this.autoconnect,\n      reconnect: _this.reconnect,\n      reconnect_interval: _this.reconnect_interval,\n      max_reconnects: _this.max_reconnects\n    }, _this.rest_options));\n    return _this;\n  }\n  /**\n   * Connects to a defined server if not connected already.\n   * @method\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(CommonClient, [{\n    key: \"connect\",\n    value: function connect() {\n      if (this.socket) return;\n\n      this._connect(this.address, Object.assign({\n        autoconnect: this.autoconnect,\n        reconnect: this.reconnect,\n        reconnect_interval: this.reconnect_interval,\n        max_reconnects: this.max_reconnects\n      }, this.rest_options));\n    }\n    /**\n     * Calls a registered RPC method on server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object|Array} params - optional method parameters\n     * @param {Number} timeout - RPC reply timeout value\n     * @param {Object} ws_opts - options passed to ws\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"call\",\n    value: function call(method, params, timeout, ws_opts) {\n      var _this2 = this;\n\n      if (!ws_opts && \"object\" === (0, _typeof2[\"default\"])(timeout)) {\n        ws_opts = timeout;\n        timeout = null;\n      }\n\n      return new Promise(function (resolve, reject) {\n        if (!_this2.ready) return reject(new Error(\"socket not ready\"));\n\n        var rpc_id = _this2.generate_request_id(method, params);\n\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null,\n          id: rpc_id\n        };\n\n        _this2.socket.send(JSON.stringify(message), ws_opts, function (error) {\n          if (error) return reject(error);\n          _this2.queue[rpc_id] = {\n            promise: [resolve, reject]\n          };\n\n          if (timeout) {\n            _this2.queue[rpc_id].timeout = setTimeout(function () {\n              delete _this2.queue[rpc_id];\n              reject(new Error(\"reply timeout\"));\n            }, timeout);\n          }\n        });\n      });\n    }\n    /**\n     * Logins with the other side of the connection.\n     * @method\n     * @param {Object} params - Login credentials object\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(params) {\n        var resp;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.call(\"rpc.login\", params);\n\n              case 2:\n                resp = _context.sent;\n\n                if (resp) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"authentication failed\");\n\n              case 5:\n                return _context.abrupt(\"return\", resp);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n    /**\n     * Fetches a list of client's methods registered on server.\n     * @method\n     * @return {Array}\n     */\n\n  }, {\n    key: \"listMethods\",\n    value: function () {\n      var _listMethods = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.call(\"__listMethods\");\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function listMethods() {\n        return _listMethods.apply(this, arguments);\n      }\n\n      return listMethods;\n    }()\n    /**\n     * Sends a JSON-RPC 2.0 notification to server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object} params - optional method parameters\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"notify\",\n    value: function notify(method, params) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this3.ready) return reject(new Error(\"socket not ready\"));\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null\n        };\n\n        _this3.socket.send(JSON.stringify(message), function (error) {\n          if (error) return reject(error);\n          resolve();\n        });\n      });\n    }\n    /**\n     * Subscribes for a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context3.next = 3;\n                return this.call(\"rpc.on\", event);\n\n              case 3:\n                result = _context3.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed subscribing to an event '\" + event + \"' with: \" + result[event]);\n\n              case 6:\n                return _context3.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function subscribe(_x2) {\n        return _subscribe.apply(this, arguments);\n      }\n\n      return subscribe;\n    }()\n    /**\n     * Unsubscribes from a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function () {\n      var _unsubscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context4.next = 3;\n                return this.call(\"rpc.off\", event);\n\n              case 3:\n                result = _context4.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed unsubscribing from an event with: \" + result);\n\n              case 6:\n                return _context4.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function unsubscribe(_x3) {\n        return _unsubscribe.apply(this, arguments);\n      }\n\n      return unsubscribe;\n    }()\n    /**\n     * Closes a WebSocket connection gracefully.\n     * @method\n     * @param {Number} code - socket close code\n     * @param {String} data - optional data to be sent before closing\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, data) {\n      this.socket.close(code || 1000, data);\n    }\n    /**\n     * Connection/Message handler.\n     * @method\n     * @private\n     * @param {String} address - WebSocket API address\n     * @param {Object} options - ws options object\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"_connect\",\n    value: function _connect(address, options) {\n      var _this4 = this;\n\n      this.socket = this.webSocketFactory(address, options);\n      this.socket.addEventListener(\"open\", function () {\n        _this4.ready = true;\n\n        _this4.emit(\"open\");\n\n        _this4.current_reconnects = 0;\n      });\n      this.socket.addEventListener(\"message\", function (_ref) {\n        var message = _ref.data;\n        if (message instanceof ArrayBuffer) message = Buffer.from(message).toString();\n\n        try {\n          message = JSON.parse(message);\n        } catch (error) {\n          return;\n        } // check if any listeners are attached and forward event\n\n\n        if (message.notification && _this4.listeners(message.notification).length) {\n          if (!Object.keys(message.params).length) return _this4.emit(message.notification);\n          var args = [message.notification];\n          if (message.params.constructor === Object) args.push(message.params);else // using for-loop instead of unshift/spread because performance is better\n            for (var i = 0; i < message.params.length; i++) {\n              args.push(message.params[i]);\n            } // run as microtask so that pending queue messages are resolved first\n          // eslint-disable-next-line prefer-spread\n\n          return Promise.resolve().then(function () {\n            _this4.emit.apply(_this4, args);\n          });\n        }\n\n        if (!_this4.queue[message.id]) {\n          // general JSON RPC 2.0 events\n          if (message.method && message.params) {\n            // run as microtask so that pending queue messages are resolved first\n            return Promise.resolve().then(function () {\n              _this4.emit(message.method, message.params);\n            });\n          }\n\n          return;\n        } // reject early since server's response is invalid\n\n\n        if (\"error\" in message === \"result\" in message) _this4.queue[message.id].promise[1](new Error(\"Server response malformed. Response must include either \\\"result\\\"\" + \" or \\\"error\\\", but not both.\"));\n        if (_this4.queue[message.id].timeout) clearTimeout(_this4.queue[message.id].timeout);\n        if (message.error) _this4.queue[message.id].promise[1](message.error);else _this4.queue[message.id].promise[0](message.result);\n        delete _this4.queue[message.id];\n      });\n      this.socket.addEventListener(\"error\", function (error) {\n        return _this4.emit(\"error\", error);\n      });\n      this.socket.addEventListener(\"close\", function (_ref2) {\n        var code = _ref2.code,\n            reason = _ref2.reason;\n        if (_this4.ready) // Delay close event until internal state is updated\n          setTimeout(function () {\n            return _this4.emit(\"close\", code, reason);\n          }, 0);\n        _this4.ready = false;\n        _this4.socket = undefined;\n        if (code === 1000) return;\n        _this4.current_reconnects++;\n        if (_this4.reconnect && (_this4.max_reconnects > _this4.current_reconnects || _this4.max_reconnects === 0)) setTimeout(function () {\n          return _this4._connect(address, options);\n        }, _this4.reconnect_interval);\n      });\n    }\n  }]);\n  return CommonClient;\n}(_eventemitter.EventEmitter);\n\nexports[\"default\"] = CommonClient;","'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.shake256 = exports.shake128 = exports.keccak_512 = exports.keccak_384 = exports.keccak_256 = exports.keccak_224 = exports.sha3_512 = exports.sha3_384 = exports.sha3_256 = exports.sha3_224 = exports.Keccak = exports.keccakP = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst _u64_js_1 = require(\"./_u64.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _7n = BigInt(7);\nconst _256n = BigInt(256);\nconst _0x71n = BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = _u64_js_1.default.split(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => s > 32 ? _u64_js_1.default.rotlBH(h, l, s) : _u64_js_1.default.rotlSH(h, l, s);\nconst rotlL = (h, l, s) => s > 32 ? _u64_js_1.default.rotlBL(h, l, s) : _u64_js_1.default.rotlSL(h, l, s);\n// Same as keccakf1600, but allows to skip some rounds\nfunction keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nexports.keccakP = keccakP;\nclass Keccak extends utils_js_1.Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        _assert_js_1.default.number(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = (0, utils_js_1.u32)(this.state);\n    }\n    keccak() {\n        keccakP(this.state32, this.rounds);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        _assert_js_1.default.exists(this);\n        const { blockLen, state } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        _assert_js_1.default.exists(this, false);\n        _assert_js_1.default.bytes(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        _assert_js_1.default.number(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        _assert_js_1.default.output(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nexports.Keccak = Keccak;\nconst gen = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructor)(() => new Keccak(blockLen, suffix, outputLen));\nexports.sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexports.sha3_256 = gen(0x06, 136, 256 / 8);\nexports.sha3_384 = gen(0x06, 104, 384 / 8);\nexports.sha3_512 = gen(0x06, 72, 512 / 8);\nexports.keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexports.keccak_256 = gen(0x01, 136, 256 / 8);\nexports.keccak_384 = gen(0x01, 104, 384 / 8);\nexports.keccak_512 = gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructorWithOpts)((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nexports.shake128 = genShake(0x1f, 168, 128 / 8);\nexports.shake256 = genShake(0x1f, 136, 256 / 8);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hmac = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// HMAC (RFC 2104)\nclass HMAC extends utils_js_1.Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        _assert_js_1.default.hash(hash);\n        const key = (0, utils_js_1.toBytes)(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new TypeError('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        _assert_js_1.default.exists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        _assert_js_1.default.exists(this);\n        _assert_js_1.default.bytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nconst hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nexports.hmac = hmac;\nexports.hmac.create = (hash, key) => new HMAC(hash, key);\n","/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _3n = BigInt(3);\nconst _8n = BigInt(8);\nconst CURVE = Object.freeze({\n    a: _0n,\n    b: BigInt(7),\n    P: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n    n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n    h: _1n,\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n});\nexport { CURVE };\nfunction weistrass(x) {\n    const { a, b } = CURVE;\n    const x2 = mod(x * x);\n    const x3 = mod(x2 * x);\n    return mod(x3 + a * x + b);\n}\nconst USE_ENDOMORPHISM = CURVE.a === _0n;\nclass ShaError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\nclass JacobianPoint {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('JacobianPoint#fromAffine: expected Point');\n        }\n        return new JacobianPoint(p.x, p.y, _1n);\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);\n    }\n    equals(other) {\n        if (!(other instanceof JacobianPoint))\n            throw new TypeError('JacobianPoint expected');\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        return U1 === U2 && S1 === S2;\n    }\n    negate() {\n        return new JacobianPoint(this.x, mod(-this.y), this.z);\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(B * B);\n        const x1b = X1 + B;\n        const D = mod(_2n * (mod(x1b * x1b) - A - C));\n        const E = mod(_3n * A);\n        const F = mod(E * E);\n        const X3 = mod(F - _2n * D);\n        const Y3 = mod(E * (D - X3) - _8n * C);\n        const Z3 = mod(_2n * Y1 * Z1);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    add(other) {\n        if (!(other instanceof JacobianPoint))\n            throw new TypeError('JacobianPoint expected');\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        if (X2 === _0n || Y2 === _0n)\n            return this;\n        if (X1 === _0n || Y1 === _0n)\n            return other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        const H = mod(U2 - U1);\n        const r = mod(S2 - S1);\n        if (H === _0n) {\n            if (r === _0n) {\n                return this.double();\n            }\n            else {\n                return JacobianPoint.ZERO;\n            }\n        }\n        const HH = mod(H * H);\n        const HHH = mod(H * HH);\n        const V = mod(U1 * HH);\n        const X3 = mod(r * r - HHH - _2n * V);\n        const Y3 = mod(r * (V - X3) - S1 * HHH);\n        const Z3 = mod(Z1 * Z2 * H);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiplyUnsafe(scalar) {\n        const P0 = JacobianPoint.ZERO;\n        if (typeof scalar === 'bigint' && scalar === _0n)\n            return P0;\n        let n = normalizeScalar(scalar);\n        if (n === _1n)\n            return this;\n        if (!USE_ENDOMORPHISM) {\n            let p = P0;\n            let d = this;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        }\n        let { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);\n        let k1p = P0;\n        let k2p = P0;\n        let d = this;\n        while (k1 > _0n || k2 > _0n) {\n            if (k1 & _1n)\n                k1p = k1p.add(d);\n            if (k2 & _1n)\n                k2p = k2p.add(d);\n            d = d.double();\n            k1 >>= _1n;\n            k2 >>= _1n;\n        }\n        if (k1neg)\n            k1p = k1p.negate();\n        if (k2neg)\n            k2p = k2p.negate();\n        k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n        return k1p.add(k2p);\n    }\n    precomputeWindow(W) {\n        const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(JacobianPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = JacobianPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = JacobianPoint.ZERO;\n        let f = JacobianPoint.ZERO;\n        const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            if (wbits === 0) {\n                let pr = precomputes[offset];\n                if (window % 2)\n                    pr = pr.negate();\n                f = f.add(pr);\n            }\n            else {\n                let cached = precomputes[offset + Math.abs(wbits) - 1];\n                if (wbits < 0)\n                    cached = cached.negate();\n                p = p.add(cached);\n            }\n        }\n        return { p, f };\n    }\n    multiply(scalar, affinePoint) {\n        let n = normalizeScalar(scalar);\n        let point;\n        let fake;\n        if (USE_ENDOMORPHISM) {\n            const { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);\n            let { p: k1p, f: f1p } = this.wNAF(k1, affinePoint);\n            let { p: k2p, f: f2p } = this.wNAF(k2, affinePoint);\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n            point = k1p.add(k2p);\n            fake = f1p.add(f2p);\n        }\n        else {\n            const { p, f } = this.wNAF(n, affinePoint);\n            point = p;\n            fake = f;\n        }\n        return JacobianPoint.normalizeZ([point, fake])[0];\n    }\n    toAffine(invZ = invert(this.z)) {\n        const { x, y, z } = this;\n        const iz1 = invZ;\n        const iz2 = mod(iz1 * iz1);\n        const iz3 = mod(iz2 * iz1);\n        const ax = mod(x * iz2);\n        const ay = mod(y * iz3);\n        const zz = mod(z * iz1);\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n}\nJacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);\nJacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);\nconst pointPrecomputes = new WeakMap();\nexport class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    hasEvenY() {\n        return this.y % _2n === _0n;\n    }\n    static fromCompressedHex(bytes) {\n        const isShort = bytes.length === 32;\n        const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));\n        if (!isValidFieldElement(x))\n            throw new Error('Point is not on curve');\n        const y2 = weistrass(x);\n        let y = sqrtMod(y2);\n        const isYOdd = (y & _1n) === _1n;\n        if (isShort) {\n            if (isYOdd)\n                y = mod(-y);\n        }\n        else {\n            const isFirstByteOdd = (bytes[0] & 1) === 1;\n            if (isFirstByteOdd !== isYOdd)\n                y = mod(-y);\n        }\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromUncompressedHex(bytes) {\n        const x = bytesToNumber(bytes.subarray(1, 33));\n        const y = bytesToNumber(bytes.subarray(33, 65));\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        const len = bytes.length;\n        const header = bytes[0];\n        if (len === 32 || (len === 33 && (header === 0x02 || header === 0x03))) {\n            return this.fromCompressedHex(bytes);\n        }\n        if (len === 65 && header === 0x04)\n            return this.fromUncompressedHex(bytes);\n        throw new Error(`Point.fromHex: received invalid point. Expected 32-33 compressed bytes or 65 uncompressed bytes, not ${len}`);\n    }\n    static fromPrivateKey(privateKey) {\n        return Point.BASE.multiply(normalizePrivateKey(privateKey));\n    }\n    static fromSignature(msgHash, signature, recovery) {\n        msgHash = ensureBytes(msgHash);\n        const h = truncateHash(msgHash);\n        const { r, s } = normalizeSignature(signature);\n        if (recovery !== 0 && recovery !== 1) {\n            throw new Error('Cannot recover signature: invalid recovery bit');\n        }\n        const prefix = recovery & 1 ? '03' : '02';\n        const R = Point.fromHex(prefix + numTo32bStr(r));\n        const { n } = CURVE;\n        const rinv = invert(r, n);\n        const u1 = mod(-h * rinv, n);\n        const u2 = mod(s * rinv, n);\n        const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);\n        if (!Q)\n            throw new Error('Cannot recover signature: point at infinify');\n        Q.assertValidity();\n        return Q;\n    }\n    toRawBytes(isCompressed = false) {\n        return hexToBytes(this.toHex(isCompressed));\n    }\n    toHex(isCompressed = false) {\n        const x = numTo32bStr(this.x);\n        if (isCompressed) {\n            const prefix = this.hasEvenY() ? '02' : '03';\n            return `${prefix}${x}`;\n        }\n        else {\n            return `04${x}${numTo32bStr(this.y)}`;\n        }\n    }\n    toHexX() {\n        return this.toHex(true).slice(2);\n    }\n    toRawX() {\n        return this.toRawBytes(true).slice(1);\n    }\n    assertValidity() {\n        const msg = 'Point is not on elliptic curve';\n        const { x, y } = this;\n        if (!isValidFieldElement(x) || !isValidFieldElement(y))\n            throw new Error(msg);\n        const left = mod(y * y);\n        const right = weistrass(x);\n        if (mod(left - right) !== _0n)\n            throw new Error(msg);\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(this.x, mod(-this.y));\n    }\n    double() {\n        return JacobianPoint.fromAffine(this).double().toAffine();\n    }\n    add(other) {\n        return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n    multiplyAndAddUnsafe(Q, a, b) {\n        const P = JacobianPoint.fromAffine(this);\n        const aP = a === _0n || a === _1n || this !== Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);\n        const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);\n        const sum = aP.add(bQ);\n        return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _0n);\nfunction sliceDER(s) {\n    return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;\n}\nfunction parseDERInt(data) {\n    if (data.length < 2 || data[0] !== 0x02) {\n        throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);\n    }\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) {\n        throw new Error(`Invalid signature integer: wrong length`);\n    }\n    if (res[0] === 0x00 && res[1] <= 0x7f) {\n        throw new Error('Invalid signature integer: trailing length');\n    }\n    return { data: bytesToNumber(res), left: data.subarray(len + 2) };\n}\nfunction parseDERSignature(data) {\n    if (data.length < 2 || data[0] != 0x30) {\n        throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);\n    }\n    if (data[1] !== data.length - 2) {\n        throw new Error('Invalid signature: incorrect length');\n    }\n    const { data: r, left: sBytes } = parseDERInt(data.subarray(2));\n    const { data: s, left: rBytesLeft } = parseDERInt(sBytes);\n    if (rBytesLeft.length) {\n        throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);\n    }\n    return { r, s };\n}\nexport class Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromCompact(hex) {\n        const arr = hex instanceof Uint8Array;\n        const name = 'Signature.fromCompact';\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`${name}: Expected string or Uint8Array`);\n        const str = arr ? bytesToHex(hex) : hex;\n        if (str.length !== 128)\n            throw new Error(`${name}: Expected 64-byte hex`);\n        return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));\n    }\n    static fromDER(hex) {\n        const arr = hex instanceof Uint8Array;\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);\n        const { r, s } = parseDERSignature(arr ? hex : hexToBytes(hex));\n        return new Signature(r, s);\n    }\n    static fromHex(hex) {\n        return this.fromDER(hex);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isWithinCurveOrder(r))\n            throw new Error('Invalid Signature: r must be 0 < r < n');\n        if (!isWithinCurveOrder(s))\n            throw new Error('Invalid Signature: s must be 0 < s < n');\n    }\n    hasHighS() {\n        const HALF = CURVE.n >> _1n;\n        return this.s > HALF;\n    }\n    normalizeS() {\n        return this.hasHighS() ? new Signature(this.r, CURVE.n - this.s) : this;\n    }\n    toDERRawBytes(isCompressed = false) {\n        return hexToBytes(this.toDERHex(isCompressed));\n    }\n    toDERHex(isCompressed = false) {\n        const sHex = sliceDER(numberToHexUnpadded(this.s));\n        if (isCompressed)\n            return sHex;\n        const rHex = sliceDER(numberToHexUnpadded(this.r));\n        const rLen = numberToHexUnpadded(rHex.length / 2);\n        const sLen = numberToHexUnpadded(sHex.length / 2);\n        const length = numberToHexUnpadded(rHex.length / 2 + sHex.length / 2 + 4);\n        return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;\n    }\n    toRawBytes() {\n        return this.toDERRawBytes();\n    }\n    toHex() {\n        return this.toDERHex();\n    }\n    toCompactRawBytes() {\n        return hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n}\nfunction concatBytes(...arrays) {\n    if (!arrays.every((b) => b instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nfunction numTo32bStr(num) {\n    if (typeof num !== 'bigint')\n        throw new Error('Expected bigint');\n    if (!(_0n <= num && num < POW_2_256))\n        throw new Error('Expected number < 2^256');\n    return num.toString(16).padStart(64, '0');\n}\nfunction numTo32b(num) {\n    const b = hexToBytes(numTo32bStr(num));\n    if (b.length !== 32)\n        throw new Error('Error: expected 32 bytes');\n    return b;\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToNumber: expected string, got ' + typeof hex);\n    }\n    return BigInt(`0x${hex}`);\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex' + hex.length);\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction bytesToNumber(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction ensureBytes(hex) {\n    return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n}\nfunction normalizeScalar(num) {\n    if (typeof num === 'number' && Number.isSafeInteger(num) && num > 0)\n        return BigInt(num);\n    if (typeof num === 'bigint' && isWithinCurveOrder(num))\n        return num;\n    throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');\n}\nfunction mod(a, b = CURVE.P) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction sqrtMod(x) {\n    const { P } = CURVE;\n    const _6n = BigInt(6);\n    const _11n = BigInt(11);\n    const _22n = BigInt(22);\n    const _23n = BigInt(23);\n    const _44n = BigInt(44);\n    const _88n = BigInt(88);\n    const b2 = (x * x * x) % P;\n    const b3 = (b2 * b2 * x) % P;\n    const b6 = (pow2(b3, _3n) * b3) % P;\n    const b9 = (pow2(b6, _3n) * b3) % P;\n    const b11 = (pow2(b9, _2n) * b2) % P;\n    const b22 = (pow2(b11, _11n) * b11) % P;\n    const b44 = (pow2(b22, _22n) * b22) % P;\n    const b88 = (pow2(b44, _44n) * b44) % P;\n    const b176 = (pow2(b88, _88n) * b88) % P;\n    const b220 = (pow2(b176, _44n) * b44) % P;\n    const b223 = (pow2(b220, _3n) * b3) % P;\n    const t1 = (pow2(b223, _23n) * b22) % P;\n    const t2 = (pow2(t1, _6n) * b2) % P;\n    return pow2(t2, _2n);\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const scratch = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = mod(acc * scratch[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return scratch;\n}\nconst divNearest = (a, b) => (a + b / _2n) / b;\nconst ENDO = {\n    a1: BigInt('0x3086d221a7d46bcde86c90e49284eb15'),\n    b1: -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3'),\n    a2: BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8'),\n    b2: BigInt('0x3086d221a7d46bcde86c90e49284eb15'),\n    POW_2_128: BigInt('0x100000000000000000000000000000000'),\n};\nfunction splitScalarEndo(k) {\n    const { n } = CURVE;\n    const { a1, b1, a2, b2, POW_2_128 } = ENDO;\n    const c1 = divNearest(b2 * k, n);\n    const c2 = divNearest(-b1 * k, n);\n    let k1 = mod(k - c1 * a1 - c2 * a2, n);\n    let k2 = mod(-c1 * b1 - c2 * b2, n);\n    const k1neg = k1 > POW_2_128;\n    const k2neg = k2 > POW_2_128;\n    if (k1neg)\n        k1 = n - k1;\n    if (k2neg)\n        k2 = n - k2;\n    if (k1 > POW_2_128 || k2 > POW_2_128) {\n        throw new Error('splitScalarEndo: Endomorphism failed, k=' + k);\n    }\n    return { k1neg, k1, k2neg, k2 };\n}\nfunction truncateHash(hash) {\n    const { n } = CURVE;\n    const byteLength = hash.length;\n    const delta = byteLength * 8 - 256;\n    let h = bytesToNumber(hash);\n    if (delta > 0)\n        h = h >> BigInt(delta);\n    if (h >= n)\n        h -= n;\n    return h;\n}\nlet _sha256Sync;\nlet _hmacSha256Sync;\nclass HmacDrbg {\n    constructor() {\n        this.v = new Uint8Array(32).fill(1);\n        this.k = new Uint8Array(32).fill(0);\n        this.counter = 0;\n    }\n    hmac(...values) {\n        return utils.hmacSha256(this.k, ...values);\n    }\n    hmacSync(...values) {\n        return _hmacSha256Sync(this.k, ...values);\n    }\n    checkSync() {\n        if (typeof _hmacSha256Sync !== 'function')\n            throw new ShaError('hmacSha256Sync needs to be set');\n    }\n    incr() {\n        if (this.counter >= 1000)\n            throw new Error('Tried 1,000 k values for sign(), all were invalid');\n        this.counter += 1;\n    }\n    async reseed(seed = new Uint8Array()) {\n        this.k = await this.hmac(this.v, Uint8Array.from([0x00]), seed);\n        this.v = await this.hmac(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = await this.hmac(this.v, Uint8Array.from([0x01]), seed);\n        this.v = await this.hmac(this.v);\n    }\n    reseedSync(seed = new Uint8Array()) {\n        this.checkSync();\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x00]), seed);\n        this.v = this.hmacSync(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x01]), seed);\n        this.v = this.hmacSync(this.v);\n    }\n    async generate() {\n        this.incr();\n        this.v = await this.hmac(this.v);\n        return this.v;\n    }\n    generateSync() {\n        this.checkSync();\n        this.incr();\n        this.v = this.hmacSync(this.v);\n        return this.v;\n    }\n}\nfunction isWithinCurveOrder(num) {\n    return _0n < num && num < CURVE.n;\n}\nfunction isValidFieldElement(num) {\n    return _0n < num && num < CURVE.P;\n}\nfunction kmdToSig(kBytes, m, d) {\n    const k = bytesToNumber(kBytes);\n    if (!isWithinCurveOrder(k))\n        return;\n    const { n } = CURVE;\n    const q = Point.BASE.multiply(k);\n    const r = mod(q.x, n);\n    if (r === _0n)\n        return;\n    const s = mod(invert(k, n) * mod(m + d * r, n), n);\n    if (s === _0n)\n        return;\n    const sig = new Signature(r, s);\n    const recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n);\n    return { sig, recovery };\n}\nfunction normalizePrivateKey(key) {\n    let num;\n    if (typeof key === 'bigint') {\n        num = key;\n    }\n    else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {\n        num = BigInt(key);\n    }\n    else if (typeof key === 'string') {\n        if (key.length !== 64)\n            throw new Error('Expected 32 bytes of private key');\n        num = hexToNumber(key);\n    }\n    else if (key instanceof Uint8Array) {\n        if (key.length !== 32)\n            throw new Error('Expected 32 bytes of private key');\n        num = bytesToNumber(key);\n    }\n    else {\n        throw new TypeError('Expected valid private key');\n    }\n    if (!isWithinCurveOrder(num))\n        throw new Error('Expected private key: 0 < key < n');\n    return num;\n}\nfunction normalizePublicKey(publicKey) {\n    if (publicKey instanceof Point) {\n        publicKey.assertValidity();\n        return publicKey;\n    }\n    else {\n        return Point.fromHex(publicKey);\n    }\n}\nfunction normalizeSignature(signature) {\n    if (signature instanceof Signature) {\n        signature.assertValidity();\n        return signature;\n    }\n    try {\n        return Signature.fromDER(signature);\n    }\n    catch (error) {\n        return Signature.fromCompact(signature);\n    }\n}\nexport function getPublicKey(privateKey, isCompressed = false) {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n}\nexport function recoverPublicKey(msgHash, signature, recovery, isCompressed = false) {\n    return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);\n}\nfunction isProbPub(item) {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && item.length;\n    if (arr)\n        return len === 33 || len === 65;\n    if (str)\n        return len === 66 || len === 130;\n    if (item instanceof Point)\n        return true;\n    return false;\n}\nexport function getSharedSecret(privateA, publicB, isCompressed = false) {\n    if (isProbPub(privateA))\n        throw new TypeError('getSharedSecret: first arg must be private key');\n    if (!isProbPub(publicB))\n        throw new TypeError('getSharedSecret: second arg must be public key');\n    const b = normalizePublicKey(publicB);\n    b.assertValidity();\n    return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);\n}\nfunction bits2int(bytes) {\n    const slice = bytes.length > 32 ? bytes.slice(0, 32) : bytes;\n    return bytesToNumber(slice);\n}\nfunction bits2octets(bytes) {\n    const z1 = bits2int(bytes);\n    const z2 = mod(z1, CURVE.n);\n    return int2octets(z2 < _0n ? z1 : z2);\n}\nfunction int2octets(num) {\n    return numTo32b(num);\n}\nfunction initSigArgs(msgHash, privateKey, extraEntropy) {\n    if (msgHash == null)\n        throw new Error(`sign: expected valid message hash, not \"${msgHash}\"`);\n    const h1 = ensureBytes(msgHash);\n    const d = normalizePrivateKey(privateKey);\n    const seedArgs = [int2octets(d), bits2octets(h1)];\n    if (extraEntropy != null) {\n        if (extraEntropy === true)\n            extraEntropy = utils.randomBytes(32);\n        const e = ensureBytes(extraEntropy);\n        if (e.length !== 32)\n            throw new Error('sign: Expected 32 bytes of extra data');\n        seedArgs.push(e);\n    }\n    const seed = concatBytes(...seedArgs);\n    const m = bits2int(h1);\n    return { seed, m, d };\n}\nfunction finalizeSig(recSig, opts) {\n    let { sig, recovery } = recSig;\n    const { canonical, der, recovered } = Object.assign({ canonical: true, der: true }, opts);\n    if (canonical && sig.hasHighS()) {\n        sig = sig.normalizeS();\n        recovery ^= 1;\n    }\n    const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();\n    return recovered ? [hashed, recovery] : hashed;\n}\nasync function sign(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    let sig;\n    const drbg = new HmacDrbg();\n    await drbg.reseed(seed);\n    while (!(sig = kmdToSig(await drbg.generate(), m, d)))\n        await drbg.reseed();\n    return finalizeSig(sig, opts);\n}\nfunction signSync(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    let sig;\n    const drbg = new HmacDrbg();\n    drbg.reseedSync(seed);\n    while (!(sig = kmdToSig(drbg.generateSync(), m, d)))\n        drbg.reseedSync();\n    return finalizeSig(sig, opts);\n}\nexport { sign, signSync };\nconst vopts = { strict: true };\nexport function verify(signature, msgHash, publicKey, opts = vopts) {\n    let sig;\n    try {\n        sig = normalizeSignature(signature);\n        msgHash = ensureBytes(msgHash);\n    }\n    catch (error) {\n        return false;\n    }\n    const { r, s } = sig;\n    if (opts.strict && sig.hasHighS())\n        return false;\n    const h = truncateHash(msgHash);\n    let P;\n    try {\n        P = normalizePublicKey(publicKey);\n    }\n    catch (error) {\n        return false;\n    }\n    const { n } = CURVE;\n    const sinv = invert(s, n);\n    const u1 = mod(h * sinv, n);\n    const u2 = mod(r * sinv, n);\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);\n    if (!R)\n        return false;\n    const v = mod(R.x, n);\n    return v === r;\n}\nfunction schnorrChallengeFinalize(ch) {\n    return mod(bytesToNumber(ch), CURVE.n);\n}\nclass SchnorrSignature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        if (bytes.length !== 64)\n            throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);\n        const r = bytesToNumber(bytes.subarray(0, 32));\n        const s = bytesToNumber(bytes.subarray(32, 64));\n        return new SchnorrSignature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isValidFieldElement(r) || !isWithinCurveOrder(s))\n            throw new Error('Invalid signature');\n    }\n    toHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n    toRawBytes() {\n        return hexToBytes(this.toHex());\n    }\n}\nfunction schnorrGetPublicKey(privateKey) {\n    return Point.fromPrivateKey(privateKey).toRawX();\n}\nclass InternalSchnorrSignature {\n    constructor(message, privateKey, auxRand = utils.randomBytes()) {\n        if (message == null)\n            throw new TypeError(`sign: Expected valid message, not \"${message}\"`);\n        this.m = ensureBytes(message);\n        const { x, scalar } = this.getScalar(normalizePrivateKey(privateKey));\n        this.px = x;\n        this.d = scalar;\n        this.rand = ensureBytes(auxRand);\n        if (this.rand.length !== 32)\n            throw new TypeError('sign: Expected 32 bytes of aux randomness');\n    }\n    getScalar(priv) {\n        const point = Point.fromPrivateKey(priv);\n        const scalar = point.hasEvenY() ? priv : CURVE.n - priv;\n        return { point, scalar, x: point.toRawX() };\n    }\n    initNonce(d, t0h) {\n        return numTo32b(d ^ bytesToNumber(t0h));\n    }\n    finalizeNonce(k0h) {\n        const k0 = mod(bytesToNumber(k0h), CURVE.n);\n        if (k0 === _0n)\n            throw new Error('sign: Creation of signature failed. k is zero');\n        const { point: R, x: rx, scalar: k } = this.getScalar(k0);\n        return { R, rx, k };\n    }\n    finalizeSig(R, k, e, d) {\n        return new SchnorrSignature(R.x, mod(k + e * d, CURVE.n)).toRawBytes();\n    }\n    error() {\n        throw new Error('sign: Invalid signature produced');\n    }\n    async calc() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHash;\n        const t = this.initNonce(d, await tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(await tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(await tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!(await schnorrVerify(sig, m, px)))\n            this.error();\n        return sig;\n    }\n    calcSync() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHashSync;\n        const t = this.initNonce(d, tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!schnorrVerifySync(sig, m, px))\n            this.error();\n        return sig;\n    }\n}\nasync function schnorrSign(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calc();\n}\nfunction schnorrSignSync(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calcSync();\n}\nfunction initSchnorrVerify(signature, message, publicKey) {\n    const raw = signature instanceof SchnorrSignature;\n    const sig = raw ? signature : SchnorrSignature.fromHex(signature);\n    if (raw)\n        sig.assertValidity();\n    return {\n        ...sig,\n        m: ensureBytes(message),\n        P: normalizePublicKey(publicKey),\n    };\n}\nfunction finalizeSchnorrVerify(r, P, s, e) {\n    const R = Point.BASE.multiplyAndAddUnsafe(P, normalizePrivateKey(s), mod(-e, CURVE.n));\n    if (!R || !R.hasEvenY() || R.x !== r)\n        return false;\n    return true;\n}\nasync function schnorrVerify(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(await utils.taggedHash(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        return false;\n    }\n}\nfunction schnorrVerifySync(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(utils.taggedHashSync(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        if (error instanceof ShaError)\n            throw error;\n        return false;\n    }\n}\nexport const schnorr = {\n    Signature: SchnorrSignature,\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    signSync: schnorrSignSync,\n    verifySync: schnorrVerifySync,\n};\nPoint.BASE._setWindowSize(8);\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nconst TAGS = {\n    challenge: 'BIP0340/challenge',\n    aux: 'BIP0340/aux',\n    nonce: 'BIP0340/nonce',\n};\nconst TAGGED_HASH_PREFIXES = {};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    mod,\n    invert,\n    isValidPrivateKey(privateKey) {\n        try {\n            normalizePrivateKey(privateKey);\n            return true;\n        }\n        catch (error) {\n            return false;\n        }\n    },\n    _bigintTo32Bytes: numTo32b,\n    _normalizePrivateKey: normalizePrivateKey,\n    hashToPrivateKey: (hash) => {\n        hash = ensureBytes(hash);\n        if (hash.length < 40 || hash.length > 1024)\n            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n        const num = mod(bytesToNumber(hash), CURVE.n - _1n) + _1n;\n        return numTo32b(num);\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return Uint8Array.from(randomBytes(bytesLength));\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => {\n        return utils.hashToPrivateKey(utils.randomBytes(40));\n    },\n    sha256: async (...messages) => {\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-256', concatBytes(...messages));\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHash } = crypto.node;\n            const hash = createHash('sha256');\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha256 function\");\n        }\n    },\n    hmacSha256: async (key, ...messages) => {\n        if (crypto.web) {\n            const ckey = await crypto.web.subtle.importKey('raw', key, { name: 'HMAC', hash: { name: 'SHA-256' } }, false, ['sign']);\n            const message = concatBytes(...messages);\n            const buffer = await crypto.web.subtle.sign('HMAC', ckey, message);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHmac } = crypto.node;\n            const hash = createHmac('sha256', key);\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have hmac-sha256 function\");\n        }\n    },\n    sha256Sync: undefined,\n    hmacSha256Sync: undefined,\n    taggedHash: async (tag, ...messages) => {\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = await utils.sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return utils.sha256(tagP, ...messages);\n    },\n    taggedHashSync: (tag, ...messages) => {\n        if (typeof _sha256Sync !== 'function')\n            throw new ShaError('sha256Sync is undefined, you need to set it');\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = _sha256Sync(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return _sha256Sync(tagP, ...messages);\n    },\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point === Point.BASE ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_3n);\n        return cached;\n    },\n};\nObject.defineProperties(utils, {\n    sha256Sync: {\n        configurable: false,\n        get() {\n            return _sha256Sync;\n        },\n        set(val) {\n            if (!_sha256Sync)\n                _sha256Sync = val;\n        },\n    },\n    hmacSha256Sync: {\n        configurable: false,\n        get() {\n            return _hmacSha256Sync;\n        },\n        set(val) {\n            if (!_hmacSha256Sync)\n                _hmacSha256Sync = val;\n        },\n    },\n});\n"],"names":["createChainIdMiddleware","chainId","req","res","next","end","method","result","createProviderConfigMiddleware","providerConfig","createConfigMiddleware","mergeMiddleware","createGetAccountsMiddleware","_ref","getAccounts","createAsyncMiddleware","_ref2","$parcel$interopDefault","$23m6n","$jKrOi","mark","request","response","accounts","wrap","_context","prev","abrupt","Error","sent","undefined","stop","_callee","_x","_x2","_x3","apply","this","arguments","createRequestAccountsMiddleware","_ref3","requestAccounts","_ref4","_context2","_callee2","_x4","_x5","_x6","createGenericJRPCMiddleware","targetMethod","handler","_ref5","_context3","_callee3","_x7","_x8","_x9","createSolanaMiddleware","providerHandlers","signTransaction","signAndSendTransaction","signAllTransactions","signMessage","getPrivateKey","getSecretKey","BaseInjectedProvider","_BaseProvider","$7Bnhe","_lookupNetwork","_setupProvider","_switchChain","_super","_createSuper","config","state","$jSX0P","call","chainConfig","_objectSpread","chainNamespace","CHAIN_NAMESPACES","SOLANA","$gRxD9","key","value","_","Promise","resolve","injectedProvider","engine","solanaMiddleware","configMiddleware","injectedProviderProxy","provider","JRPCEngine","getProviderHandlers","push","getInjectedProviderProxy","providerFromEngine","updateProviderEngineProxy","lookupNetwork","update","BaseProvider","getBaseProviderHandlers","_signAndSendTransaction","_signAllTransactions","_signMessage","_signTransaction","_getSecretKey","_getPrivateKey","_getAccounts","_requestAccounts","publicKey","bs58","encode","toBytes","ethErrors","rpc","methodNotSupported","_callee4","_context4","_callee5","transaction","_context5","params","message","_callee6","sigData","_context6","display","signature","_callee7","_req$params","_req$params2","_context7","length","invalidParams","_callee8","txRes","_context8","createInjectedProviderProxyMiddleware","_next","PhantomInjectedProvider","_BaseInjectedProvider","SlopeInjectedProxyProvider","getProviderEngineProxy","_yield$injectedProvid","data","connect","_yield$injectedProvid2","txMessage","_yield$injectedProvid3","invalidRequest","serializeMessage","PublicKey","decode","addSignature","Buffer","from","_yield$injectedProvid4","conn","custom","code","Connection","rpcTarget","sendRawTransaction","serialize","_data$signatures","allTxns","unsignedTx","i","_yield$injectedProvid5","msg","signatures","getSlopeHandlers","bind","SolflareInjectedProvider","solflareProviderHandlers","getSolflareHandlers","SolletInjectedProvider","sign","getSolletHandlers","getTorusHandlers","_req$params3","sendTransaction","_req$params4","_req$params5","transactions","TorusInjectedProvider","_handleInjectedProviderUpdate","_setupEngine","handleInjectedProviderUpdate","setupEngine","connectedChainId","connectedHexChainId","isHexStrict","toString","concat","parseInt","WalletInitializationError","rpcConnectionError","emit","_this","on","configure","setupProvider","$eb24424914b1436e$var$_getProviderHandlers","_callee9","privKey","keyPairGenerator","keyPair","_context9","Keypair","fromSecretKey","toBase58","secretKey","partialSign","signedMsg","nacl","detached","_providerEngineProxy","sig","_req$params6","txns","_iterator","_step","tx","s","n","done","err","e","f","SolanaPrivateKeyProvider","_updateAccount","_enable","$eb24424914b1436e$var$_createSuper","$eb24424914b1436e$var$_objectSpread","privateKey","_createJsonRpcClient","networkMiddleware","fetchMiddleware","createFetchMiddleware","getChainSwitchMiddleware","getAccountMiddleware","t0","t1","t2","getChainConfig","health","_switchSolanaChain","_addNewChainConfig","_ref6","addNewChainConfig","switchSolanaChain","chainSwitchHandlers","chainName","rpcUrls","blockExplorerUrls","nativeCurrency","addChain","ticker","symbol","tickerName","name","displayName","blockExplorer","switchChain","_updatePrivatekey","updatePrivatekey","_this2","accountHandlers","updateAccount","providerFactory","SolanaWallet","$6n7GL","_request","_yield$this$provider$","signedTransaction","signedTransactions","args","$jzxXn","parcelRequire","module","exports","ALPHABET","decodeUnsafe","source","TypeError","$e3fba04c57c6fbb2$require$_Buffer","alloc","psz","zeroes","LEADER","size","FACTOR","b256","Uint8Array","carry","BASE_MAP","charCodeAt","it3","BASE","it4","vch","allocUnsafe","fill","j","x","charAt","xc","Math","log","iFACTOR","Array","isArray","isBuffer","pbegin","pend","b58","it1","it2","str","repeat","string","buffer","ed25519","sha512Sync","m","sha512","concatBytes","$jLWle","default","randomPrivateKey","generateKeypair","privateScalar","getPublicKey","set","isOnCurve","fromHex","slice","verify","toBuffer","arr","byteOffset","byteLength","$892fb1cd891adab3$export$eabc71f011df675a","Struct","properties","Object","assign","SOLANA_SCHEMA","deserialize","decodeUnchecked","deserializeUnchecked","Map","PUBLIC_KEY_LENGTH","uniquePublicKeyCounter","$892fb1cd891adab3$export$ca8b6604d6ce14de","_bn","isPublicKeyData","decoded","BN","equals","eq","toJSON","b","toArrayLike","zeroPad","copy","unique","createWithSeed","fromPublicKey","seed","programId","$1zs4k","sha256","createProgramAddressSync","seeds","forEach","publicKeyBytes","createProgramAddress","findProgramAddressSync","address","nonce","seedsWithNonce","findProgramAddress","pubkeyData","kind","fields","PACKET_DATA_SIZE","$892fb1cd891adab3$export$718fcd78527f88ed","Error1","TransactionExpiredBlockheightExceededError","defineProperty","prototype","$892fb1cd891adab3$export$b822204c22e46bdf","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","$892fb1cd891adab3$export$109914c107623102","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","writable","readonly","get","index","_iteratorNormalCompletion","_didIteratorError","_iteratorError","Symbol","iterator","keySegment","return","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","map","instruction","programIdIndex","accountKeyIndexes","keys","meta","pubkey","property","BufferLayout","rustString","rsl","_decode","_encode","rslShim","offset","chars","span","getAlloc","type","getItemAlloc","item","field","elementLayout","layout","decodeLength","bytes","len","elem","shift","encodeLength","rem_len","$892fb1cd891adab3$var$assert","condition","TransactionStatus","$892fb1cd891adab3$var$CompiledKeys","CompiledKeys","payer","keyMetaMap","getMessageComponents","mapEntries","entries","assert","writableSigners","filter","param","isSigner","isWritable","readonlySigners","writableNonSigners","readonlyNonSigners","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","extractTableLookup","lookupTable","ref","$hNZKs","drainKeysFoundInLookupTable","addresses","keyMeta","isInvoked","writableIndexes","drainedWritableKeys","ref1","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","_value","lookupTableIndex","findIndex","entry","delete","_loop","compile","getOrInsertDefault","payerKeyMeta","ix","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","accountMeta","err1","$892fb1cd891adab3$export$f69c19e57285b83a","Message","accountKeys","recentBlockhash","indexToProgramIds","account","version","compiledInstructions","addressTableLookups","getAccountKeys","isAccountSigner","isAccountWritable","numSignedAccounts","isProgramId","has","programIds","values","nonProgramIds","numKeys","keyCount","shortvec","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","Layout","signData","compiledKeys","payerKey","byteArray","accountCount","dataSlice","$892fb1cd891adab3$export$ee274c70e0fae590","MessageV0","numAccountKeysFromLookups","count","lookup","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","reduce","tableLookup","tableAccount","find","_step2","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","serializedMessageLength","prefix","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","lookupTableAccounts","extractResult","addressTableLookup","maskedPrefix","splice","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","DEFAULT_SIGNATURE","$892fb1cd891adab3$export$a7a3aa8360ac9f59","TransactionInstruction","opts","$892fb1cd891adab3$export$febc5573c75cefb0","Transaction","feePayer","lastValidBlockHeight","nonceInfo","_message","_json","hasOwnProperty","blockhash","nonceInstruction","signers","add","_len","items","_key","compileMessage","JSON","stringify","console","warn","accountMetas","$ebKTL","includes","uniqueMetas","pubkeyString","uniqueIndex","sort","y","localeCompare","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","indexOf","invariant","_compile","every","pair","getEstimatedFee","connection","getFeeForMessage","_state","setSigners","seen","Set","uniqueSigners","signer","_partialSign","_addSignature","sigpair","verifySignatures","_verifySignatures","requireAllSignatures","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","options","sendOptions","status","skipPreflight","preflightCommitment","commitment","maxRetries","minContextSlot","confirmTransaction","sleep","ms","setTimeout","encodeData","allocLength","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","$892fb1cd891adab3$export$ed1c2356ce604759","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","u64","blob","encodeDecode","bigIntLayout","src","toBigIntLE","bigInt","toBufferLE","SYSTEM_INSTRUCTION_LAYOUTS","freeze","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","UpgradeNonceAccount","$892fb1cd891adab3$export$d8c4e17726848113","SystemProgram","createAccount","lamports","space","fromPubkey","newAccountPubkey","transfer","BigInt","basePubkey","toPubkey","base","accountPubkey","createAccountWithSeed","createNonceAccount","noncePubkey","initParams","nonceInitialize","authorized","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","newAuthorizedPubkey","allocate","$892fb1cd891adab3$export$3b0d6d7590275603","Loader","getMinNumSignatures","ceil","chunkSize","load","program","balanceNeeded","programInfo","dataLayout","array","getMinimumBalanceForRentExemption","getAccountInfo","executable","error","owner","bytesLength","bytesLengthPadding","_rpcEndpoint","all","BPF_LOADER_PROGRAM_ID","$892fb1cd891adab3$var$objToString","$892fb1cd891adab3$var$objKeys","obj","$892fb1cd891adab3$var$stringify","val","isArrayProp","max","propVal","toStr","$dTym2","isFinite","returnVal","trailingZeros","$892fb1cd891adab3$export$df8ed3e830b1d591","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","$892fb1cd891adab3$export$121e803f723b3045","SendTransactionError","logs","$892fb1cd891adab3$export$ea1b1a1bba5c14ad","SolanaJSONRPCError","customMessage","$892fb1cd891adab3$var$fetchImpl","globalThis","fetch","$892fb1cd891adab3$export$5b2310da10e607da","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","typeIndex","decodeData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","PublicKeyFromString","coerce","instance","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","extractCommitmentFromConfig","commitmentOrConfig","specifiedConfig","createRpcResult","union","pick","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","$9OS8c","create","jsonRpcResultAndContext","context","number","notificationResultAndContext","versionedMessageFromResponse","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","rewardType","GetParsedBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","COMMON_HTTP_HEADERS","$892fb1cd891adab3$var$_process$env$npm_pack","process","$892fb1cd891adab3$export$98b66c25bb38499d","endpoint","wsEndpoint","httpHeaders","disableRetryOnRateLimit","client","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","confirmTransactionInitialTimeout","putativeUrl","test","assertEndpointUrl","matches","match","hostish","portWithColon","rest","protocol","startsWith","startPort","websocketPort","makeWebsocketUrl","url","customFetch","fetchWithMiddleware","fetchImpl","info","init","modifiedFetchArgs","reject","modifiedInfo","modifiedInit","clientBrowser","RpcClient","callback","too_many_requests_retries","waitTime","text","body","agent","headers","statusText","ok","createRpcClient","requests","batch","methodName","createRpcBatchRequest","RpcWebSocketClient","autoconnect","max_reconnects","Infinity","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","getBalanceAndContext","unsafeRes","_buildArgs","getBalance","then","catch","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","configArg","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getMultipleParsedAccounts","publicKeys","rawConfig","getMultipleAccountsInfoAndContext","getMultipleAccountsInfo","getStakeActivation","getProgramAccounts","configOrCommitment","encoding","configWithoutEncoding","getParsedProgramAccounts","strategy","rawSignature","decodedSignature","subscriptionCommitment","timeoutId","subscriptionId","confirmationPromise","expiryPromise","outcome","onSignature","__type","PROCESSED","timeoutMs","TIMED_OUT","checkBlockHeight","getBlockHeight","_e","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","race","clearTimeout","removeSignatureListener","getClusterNodes","getVoteAccounts","getSlot","getSlotLeader","getSlotLeaders","startSlot","limit","getSignatureStatus","getSignatureStatuses","getTransactionCount","getTotalSupply","excludeNonCirculatingAccountsList","getInflationGovernor","getInflationReward","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getRecentBlockhashAndContext","getRecentPerformanceSamples","getFeeCalculatorForBlockhash","wireMessage","getRecentBlockhash","getLatestBlockhash","getLatestBlockhashAndContext","getVersion","getGenesisHash","getBlock","_buildArgsAtLeastConfirmed","getParsedBlock","getBlockProduction","extra","c","getTransaction","getParsedTransaction","getParsedTransactions","getTransactions","getConfirmedBlock","block","getBlocks","endSlot","getBlockSignatures","transactionDetails","getConfirmedBlockSignatures","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","highestConfirmedRoot","until","before","getConfirmedSignaturesForAddress2","getSignaturesForAddress","getAddressLookupTable","accountInfo","getNonceAndContext","getNonce","requestAirdrop","to","_blockhashWithExpiryBlockHeight","disableCache","timeSinceFetch","expired","Date","now","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","MS_PER_SLOT","getStakeMinimumDelegation","simulateTransaction","transactionOrMessage","configOrSigners","includeAccounts","encodedTransaction","originalTx","traceIndent","logTrace","sigVerify","join","signersOrOptions","rawTransaction","sendEncodedTransaction","setInterval","notify","_updateSubscriptions","Number","MAX_SAFE_INTEGER","clearInterval","hash","activeWebSocketGeneration","isCurrentConnectionStillActive","close","callbacks","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbackArgs","cb","notification","_makeSubscription","subscriptionConfig","clientSubscriptionId","fastStableStringify","existingSubscription","onAccountChange","removeAccountChangeListener","_unsubscribeClientSubscription","accountId","onProgramAccountChange","filters","removeProgramAccountChangeListener","onLogs","mentions","removeOnLogsListener","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","removeRootChangeListener","$892fb1cd891adab3$export$c53bca448cf33676","keypair","_keypair","generate","skipValidation","computedPublicKey","ii","fromSeed","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","bigintLayout","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","$892fb1cd891adab3$export$5147a345798de168","AddressLookupTableProgram","createLookupTable","recentSlot","lookupTableAddress","bumpSeed","freezeLookupTable","extendLookupTable","addr","deactivateLookupTable","closeLookupTable","recipient","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","$892fb1cd891adab3$export$11585db5942bcdb7","ComputeBudgetProgram","requestUnits","requestHeapFrame","setComputeUnitLimit","setComputeUnitPrice","microLamports","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","secp256k1","hmacSha256Sync","msgs","h","hmac","digest","isValidPrivateKey","publicKeyCreate","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","keccak_256","recoveryId","createInstructionWithEthAddress","ethAddress","_instructionIndex","rawAddress","substr","ethAddressOffset","ethAddressInstructionIndex","msgHash","pkey","messageHash","ecdsaSign","der","recovered","STAKE_CONFIG_ID","$892fb1cd891adab3$export$e7f3941ade35598c","Lockup","unixTimestamp","custodian","STAKE_INSTRUCTION_LAYOUTS","Initialize","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","$892fb1cd891adab3$export$df86f933e9f8fb15","Staker","Withdrawer","StakeProgram","initialize","stakePubkey","lockup","staker","withdrawer","delegate","authorize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorizeWithSeed","authorityBase","authoritySeed","authorityOwner","splitInstruction","splitStakePubkey","split","splitWithSeed","merge","sourceStakePubKey","withdraw","deactivate","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","$892fb1cd891adab3$export$83db2bc702bee1eb","Voter","VoteProgram","initializeAccount","voteInit","authorizedVoter","authorizedWithdrawer","voteAuthorizationType","currentAuthorityDerivedKeyBasePubkey","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","voteAuthorizeWithSeedArgs","authorizedWithdrawerPubkey","safeWithdraw","currentVoteAccountBalance","rentExemptMinimum","website","details","keybaseUsername","$lpfU5","$40485a46f228ca96$export$2e2bcd8739ae039","excluded","target","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","$7ae51b565511fb1f$export$2e2bcd8739ae039","sourceKeys","$8y9hR","sha384","sha512_256","SHA512","$6650a4bfbfa1d1d0$var$ref","$4cMch","$6650a4bfbfa1d1d0$var$SHA512_Kh","$6650a4bfbfa1d1d0$var$SHA512_Kl","$6650a4bfbfa1d1d0$var$SHA512_W_H","Uint32Array","$6650a4bfbfa1d1d0$var$SHA512_W_L","$6650a4bfbfa1d1d0$var$SHA512","_SHA2","Ah","Al","Bh","Bl","Ch","Cl","Dh","Dl","Eh","El","Fh","Fl","Gh","Gl","Hh","Hl","view","getUint32","i1","W15h","W15l","s0h","rotrSH","shrSH","s0l","rotrSL","shrSL","W2h","W2l","s1h","rotrBH","s1l","rotrBL","SUMl","add4L","SUMh","add4H","i2","sigma1h","sigma1l","CHIh","CHIl","T1ll","add5L","T1h","add5H","T1l","sigma0h","sigma0l","MAJh","MAJl","l","All","add3L","add3H","ref2","ref3","ref4","ref5","ref6","ref7","ref8","ref9","$jOnpb","SHA2","$6650a4bfbfa1d1d0$var$SHA512_256","SHA512_256","outputLen","$6650a4bfbfa1d1d0$var$SHA384","SHA384","$bdetq","wrapConstructor","$e6c4d7978e8321d9$var$SHA2","_Hash","blockLen","padOffset","isLE","finished","pos","destroyed","createView","$4hg6I","exists","take","min","subarray","dataView","roundClean","out","output","setBigUint64","_32n","_u32_max","wh","wl","setUint32","$e6c4d7978e8321d9$var$setBigUint64","oview","v","digestInto","destroy","_to","constructor","Hash","$31d53e86a08baf8f$var$number","isSafeInteger","$31d53e86a08baf8f$var$bool","$31d53e86a08baf8f$var$bytes","lengths","$31d53e86a08baf8f$var$hash","$31d53e86a08baf8f$var$exists","checkFinished","$31d53e86a08baf8f$var$output","bool","$31d53e86a08baf8f$var$assert","randomBytes","wrapConstructorWithOpts","checkOpts","utf8ToBytes","asyncLoop","nextTick","hexToBytes","bytesToHex","rotr","u32","u8","DataView","word","$829c22c8ec251a06$var$hexes","padStart","uint8a","hex","hexByte","byte","isNaN","$829c22c8ec251a06$var$nextTick","$829c22c8ec251a06$var$_asyncLoop","iters","tick","ts","diff","$829c22c8ec251a06$var$utf8ToBytes","TextEncoder","$829c22c8ec251a06$var$toBytes","arrays","a","pad","$829c22c8ec251a06$var$Hash","_cloneInto","defaults","hashConstructor","hashC","tmp","hashCons","$lSFPc","crypto","web","getRandomValues","node","self","toBig","fromBig","$30fdab52992ac0ce$var$U32_MASK64","$30fdab52992ac0ce$var$_32n","$30fdab52992ac0ce$var$fromBig","le","$30fdab52992ac0ce$var$split","lst","$30fdab52992ac0ce$var$add","$30fdab52992ac0ce$var$u64","rotr32H","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","low","$b0f499b2424d7e2e$var$_0n","$b0f499b2424d7e2e$var$_1n","$b0f499b2424d7e2e$var$_2n","$b0f499b2424d7e2e$var$CU_O","$b0f499b2424d7e2e$export$8ff8607b70325343","d","P","Gx","Gy","$b0f499b2424d7e2e$var$POW_2_256","$b0f499b2424d7e2e$var$SQRT_M1","$b0f499b2424d7e2e$var$SQRT_AD_MINUS_ONE","$b0f499b2424d7e2e$var$INVSQRT_A_MINUS_D","$b0f499b2424d7e2e$var$ONE_MINUS_D_SQ","$b0f499b2424d7e2e$var$D_MINUS_ONE_SQ","$b0f499b2424d7e2e$export$c82dbe8d384844da","ExtendedPoint","z","t","other","$b0f499b2424d7e2e$var$assertExtPoint","X1","Y1","Z1","X2","Y2","Z2","X1Z2","$b0f499b2424d7e2e$var$mod","X2Z1","Y1Z2","Y2Z1","A","B","C","D","x1y1","E","G","F","H","X3","Y3","T3","T1","T2","double","negate","W","windows","points","p","window","affinePoint","$b0f499b2424d7e2e$export$baf26146a414f24a","_WINDOW_SIZE","precomputes","$b0f499b2424d7e2e$var$pointPrecomputes","precomputeWindow","normalizeZ","ZERO","windowSize","mask","maxNumber","shiftBy","wbits","pr","cached","abs","scalar","wNAF","$b0f499b2424d7e2e$var$normalizeScalar","P0","multiplyUnsafe","invZ","$b0f499b2424d7e2e$var$invert","ax","ay","zz","$b0f499b2424d7e2e$var$legacyRist","toInv","nums","inverted","acc","num","reduceRight","$b0f499b2424d7e2e$var$invertBatch","toAffine","toAffineBatch","fromAffine","$b0f499b2424d7e2e$var$assertRstPoint","$b0f499b2424d7e2e$export$5e87c4f36f27816d","RistrettoPoint","ep","_ep","u1","u2","u2sq","invsqrt","$b0f499b2424d7e2e$var$invertSqrt","D1","D2","zInv","$b0f499b2424d7e2e$var$edIsNegative","_y","$b0f499b2424d7e2e$var$numberTo32BytesLE","$b0f499b2424d7e2e$var$bytesToHex","toRawBytes","toHex","one","two","subtract","multiply","r0","r","Ns","$b0f499b2424d7e2e$var$uvRatio","Ns_D_is_sq","isValid","s_","Nt","s2","W0","W1","W2","W3","r1","$b0f499b2424d7e2e$var$bytes255ToNumberLE","$b0f499b2424d7e2e$var$ensureBytes","R1","calcElligatorRistrettoMap","r2","R2","emsg","b1","b2","$b0f499b2424d7e2e$var$equalBytes","u1_2","u2_2","I","Dx","Dy","WeakMap","Point","isTorsionFree","strict","normed","$b0f499b2424d7e2e$var$bytesToNumberLE","y2","u","isXOdd","isLastByteOdd","$b0f499b2424d7e2e$var$getExtendedPublicKey","point","$b0f499b2424d7e2e$export$848620f5f2f26e86","Signature","assertValidity","$b0f499b2424d7e2e$var$concatBytes","$b0f499b2424d7e2e$var$hexes","$b0f499b2424d7e2e$var$hexToBytes","$b0f499b2424d7e2e$var$numberTo32BytesBE","reverse","$b0f499b2424d7e2e$var$_sha512Sync","$b0f499b2424d7e2e$var$MAX_255B","modulo","q","gcd","$b0f499b2424d7e2e$var$pow2","power","$b0f499b2424d7e2e$var$pow_2_252_3","_5n","_10n","_20n","_40n","_80n","b4","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","v3","v7","vx2","root1","root2","useRoot1","useRoot2","noRoot","$b0f499b2424d7e2e$var$modlLE","expectedLength","$b0f499b2424d7e2e$var$adjustBytes25519","$b0f499b2424d7e2e$var$checkPrivateKey","$b0f499b2424d7e2e$var$getKeyFromHash","hashed","head","pointBytes","$b0f499b2424d7e2e$var$sha512s","$b0f499b2424d7e2e$var$_getExtendedPublicKey","$b0f499b2424d7e2e$export$eab97d15b1788b8d","$b0f499b2424d7e2e$var$getExtendedPublicKeySync","$b0f499b2424d7e2e$var$prepareVerification","SB","pub","$b0f499b2424d7e2e$var$finishVerification","k","kA","$b0f499b2424d7e2e$export$92d6409d68f0739a","getExtendedPublicKey","R","_setWindowSize","$b0f499b2424d7e2e$var$crypto","$aqbQf","mod","invert","TORSION_SUBGROUP","hashToPrivateScalar","messages","_arguments","subtle","createHash","precompute","defineProperties","configurable","$083559e8591830d8$var$Maj","$083559e8591830d8$var$SHA256_K","$083559e8591830d8$var$IV","$083559e8591830d8$var$SHA256_W","$083559e8591830d8$var$SHA256","SHA256","W15","s0","s1","$1f876b2d27fa1bad$var$__createBinding","o","k2","enumerable","$1f876b2d27fa1bad$var$__setModuleDefault","$1f876b2d27fa1bad$var$__decorate","decorators","desc","getOwnPropertyDescriptor","Reflect","decorate","$1f876b2d27fa1bad$var$__importStar","__esModule","$1f876b2d27fa1bad$var$__importDefault","BinaryReader","BinaryWriter","BorshError","baseDecode","baseEncode","$1f876b2d27fa1bad$var$bn_js_1","$1f876b2d27fa1bad$var$bs58_1","$1f876b2d27fa1bad$var$encoding","$1f876b2d27fa1bad$var$textDecoder","TextDecoder","fatal","$1f876b2d27fa1bad$require$Buffer","$1f876b2d27fa1bad$var$INITIAL_LENGTH","$1f876b2d27fa1bad$var$BorshError","fieldPath","originalMessage","fieldName","$1f876b2d27fa1bad$var$BinaryWriter","buf","maybeResize","writeUInt8","writeUInt16LE","writeUInt32LE","writeBuffer","toArray","writeU32","fn","$1f876b2d27fa1bad$var$handlingRangeError","propertyKey","propertyDescriptor","originalMethod","RangeError","$1f876b2d27fa1bad$var$BinaryReader","readUInt8","readUInt16LE","readUInt32LE","readBuffer","readU32","$1f876b2d27fa1bad$var$capitalizeFirstLetter","toUpperCase","$1f876b2d27fa1bad$var$serializeField","fieldType","writer","writeFixedArray","writeArray","writeU8","$1f876b2d27fa1bad$var$serializeStruct","addToFieldPath","borshSerialize","structSchema","_param","idx","_idx","$1f876b2d27fa1bad$var$deserializeField","reader","readFixedArray","readArray","readU8","$1f876b2d27fa1bad$var$deserializeStruct","classType","borshDeserialize","fieldName1","fieldValue","$d0ZZj","Writer","Reader","$546df882278ec527$export$88fb0cfd153261a7","$546df882278ec527$export$9c6b53e35bc51b5c","$546df882278ec527$var$inRange","$546df882278ec527$var$ToDictionary","$546df882278ec527$var$Stream","tokens","endOfStream","read","prepend","token","pop","$546df882278ec527$var$finished","$546df882278ec527$var$decoderError","opt_code_point","$546df882278ec527$var$DEFAULT_ENCODING","$546df882278ec527$var$TextDecoder","String","toLowerCase","_streaming","_BOMseen","_decoder","_fatal","Boolean","_ignoreBOM","$546df882278ec527$var$TextEncoder","_encoder","_options","$546df882278ec527$var$UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","stream","bite","code_point","$546df882278ec527$var$UTF8Encoder","temp","input","ArrayBuffer","input_stream","code_points","cp","fromCharCode","$546df882278ec527$var$codePointsToString","opt_string","$546df882278ec527$var$stringToCodePoints","$118o8","$9a0a804b755d8f09$var$checkUint8Array","$9a0a804b755d8f09$var$uint8ArrayToBuffer","$gzLuY","checkUint8Array","uint8ArrayToBuffer","$9a0a804b755d8f09$var$Layout","isInteger","rv","$9a0a804b755d8f09$var$nameWithProperty","lo","nameWithProperty","bindConstructorLayout","Class","layout_","boundConstructor_","makeDestinationObject","$9a0a804b755d8f09$var$ExternalLayout","ExternalLayout","$9a0a804b755d8f09$var$GreedyCount","GreedyCount","elementSpan","rem","$9a0a804b755d8f09$var$OffsetLayout","OffsetLayout","$9a0a804b755d8f09$var$UInt","$9a0a804b755d8f09$var$UIntBE","UInt","readUIntLE","writeUIntLE","UIntBE","readUIntBE","writeUIntBE","$9a0a804b755d8f09$var$Int","Int","readIntLE","writeIntLE","$9a0a804b755d8f09$var$IntBE","IntBE","readIntBE","writeIntBE","$9a0a804b755d8f09$var$V2E32","$9a0a804b755d8f09$var$divmodInt64","hi32","lo32","$9a0a804b755d8f09$var$roundedInt64","$9a0a804b755d8f09$var$NearUInt64","NearUInt64","$9a0a804b755d8f09$var$NearUInt64BE","NearUInt64BE","readUInt32BE","writeUInt32BE","$9a0a804b755d8f09$var$NearInt64","NearInt64","readInt32LE","writeInt32LE","$9a0a804b755d8f09$var$NearInt64BE","NearInt64BE","readInt32BE","writeInt32BE","$9a0a804b755d8f09$var$Float","Float","readFloatLE","writeFloatLE","$9a0a804b755d8f09$var$FloatBE","FloatBE","readFloatBE","writeFloatBE","$9a0a804b755d8f09$var$Double","Double","readDoubleLE","writeDoubleLE","$9a0a804b755d8f09$var$DoubleBE","DoubleBE","readDoubleBE","writeDoubleBE","$9a0a804b755d8f09$var$Sequence","Layout1","Sequence","isCount","getSpan","elo","$9a0a804b755d8f09$var$Structure","Structure","decodePrefixes","fd","fsp","dest","firstOffset","lastOffset","lastWrote","fv","$9a0a804b755d8f09$var$UnionDiscriminator","UnionDiscriminator","$9a0a804b755d8f09$var$UnionLayoutDiscriminator","UnionLayoutDiscriminator","$9a0a804b755d8f09$var$Union","Union","discr","defaultLayout","discriminator","replicate","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","tag","vlo1","dlo","clo","contentOffset","variant","$9a0a804b755d8f09$var$VariantLayout","vb","VariantLayout","fromArray","$9a0a804b755d8f09$var$fixBitwiseResult","$9a0a804b755d8f09$var$BitStructure","BitStructure","msb","_packedSetValue","_packedGetValue","bits","bf","$9a0a804b755d8f09$var$BitField","$9a0a804b755d8f09$var$Boolean","BitField","container","totalBits","usedBits","sum","valueMask","start","wordMask","wordValue","$9FpQT","$2zNXU","$9a0a804b755d8f09$var$Blob","Blob","srcBuffer","write","$9a0a804b755d8f09$var$CString","CString","srcb","$9a0a804b755d8f09$var$UTF8","UTF8","maxSpan","$9a0a804b755d8f09$var$Constant","Constant","greedy","u16","u24","u40","u48","nu64","u16be","u24be","u32be","u40be","u48be","nu64be","s8","s16","s24","s32","s40","s48","ns64","s16be","s24be","s32be","s40be","s48be","ns64be","f32","f32be","f64","f64be","struct","seq","unionLayoutDiscriminator","cstr","utf8","constant","reversed","$ca729932e46b6cf2$require$Buffer","toBigIntBE","width","toBufferBE","StructError","failure","failures","path","_cached","isObject","print","shiftIterator","toFailures","toFailure","branch","refinement","run","ctx","valid","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","_coerce","_mask","coercer","validator","refiner","props","is","validate","tuples","define","Element","description","never","Key","Value","Elements","Never","Structs","S","$59ET4","$3606102c3da38ed6$export$2e2bcd8739ae039","$aVtMw","$ezjYu","$dZeW6","Client","$9c63a7793146b81f$var$_createClass2","$6wr06","$9c63a7793146b81f$var$_classCallCheck2","$9c63a7793146b81f$var$_inherits2","$9c63a7793146b81f$var$_possibleConstructorReturn2","$9c63a7793146b81f$var$_getPrototypeOf2","$9c63a7793146b81f$var$_websocket","$9c63a7793146b81f$var$_createSuper","Derived","hasNativeReflectConstruct","construct","sham","Proxy","valueOf","$9c63a7793146b81f$var$_isNativeReflectConstruct","Super","NewTarget","$9c63a7793146b81f$var$Client","_CommonClient","_ref$autoconnect","_ref$reconnect","reconnect","_ref$reconnect_interv","reconnect_interval","_ref$max_reconnects","generate_request_id","$3ee538eb98aba474$var$WebSocketBrowserImpl","$3ee538eb98aba474$var$_classCallCheck2","$3ee538eb98aba474$var$_createClass2","$3ee538eb98aba474$var$_inherits2","$3ee538eb98aba474$var$_possibleConstructorReturn2","$3ee538eb98aba474$var$_getPrototypeOf2","$3ee538eb98aba474$var$_createSuper","$3ee538eb98aba474$var$_isNativeReflectConstruct","_EventEmitter","WebSocketBrowserImpl","protocols","socket","WebSocket","onopen","onmessage","event","onerror","onclose","reason","optionsOrCallback","send","listener","addEventListener","EventEmitter","$4d34497a6210a94d$var$has","$4d34497a6210a94d$var$prefix","$4d34497a6210a94d$var$Events","$4d34497a6210a94d$var$EE","once","$4d34497a6210a94d$var$addListener","emitter","evt","_events","_eventsCount","$4d34497a6210a94d$var$clearEvent","$4d34497a6210a94d$var$EventEmitter","__proto__","eventNames","events","names","listeners","handlers","ee","listenerCount","a1","a2","a3","a4","a5","removeListener","removeAllListeners","off","addListener","prefixed","$984423be7e0c631e$var$_regenerator","$984423be7e0c631e$var$_asyncToGenerator2","$984423be7e0c631e$var$_typeof2","$984423be7e0c631e$var$_classCallCheck2","$984423be7e0c631e$var$_createClass2","$984423be7e0c631e$var$_inherits2","$984423be7e0c631e$var$_possibleConstructorReturn2","$984423be7e0c631e$var$_getPrototypeOf2","$984423be7e0c631e$var$_createSuper","$984423be7e0c631e$var$_isNativeReflectConstruct","$984423be7e0c631e$var$__rest","$984423be7e0c631e$var$CommonClient","CommonClient","_unsubscribe","_subscribe","_listMethods","_login","webSocketFactory","_a","_a$autoconnect","_a$reconnect","_a$reconnect_interval","_a$max_reconnects","rest_options","queue","rpc_id","ready","current_reconnects","_connect","timeout","ws_opts","promise","resp","_this3","_this4","$984423be7e0c631e$require$Buffer","parse","$6CXim","$441df22d6e86a5a9$var$ClientBrowser","callServer","reviver","replacer","generator","$441df22d6e86a5a9$require$uuid","notificationIdNull","isBatch","hasCallback","$ktlUA","_parseResponse","responseText","isError","$ee778342c7a8200b$require$uuid","shake256","shake128","keccak_512","keccak_384","keccak_224","sha3_512","sha3_384","sha3_256","sha3_224","Keccak","keccakP","$a07c0a27998e1113$var$SHA3_PI","$a07c0a27998e1113$var$SHA3_ROTL","$a07c0a27998e1113$var$_SHA3_IOTA","$a07c0a27998e1113$var$_0n","$a07c0a27998e1113$var$_1n","$a07c0a27998e1113$var$_2n","$a07c0a27998e1113$var$_7n","$a07c0a27998e1113$var$_256n","$a07c0a27998e1113$var$_0x71n","$a07c0a27998e1113$var$round","$a07c0a27998e1113$var$R","$a07c0a27998e1113$var$x","$a07c0a27998e1113$var$y","$a07c0a27998e1113$var$ref","$a07c0a27998e1113$var$t","$a07c0a27998e1113$var$j","$a07c0a27998e1113$var$ref1","$a07c0a27998e1113$var$SHA3_IOTA_H","$a07c0a27998e1113$var$SHA3_IOTA_L","$a07c0a27998e1113$var$rotlH","$a07c0a27998e1113$var$rotlL","$a07c0a27998e1113$var$keccakP","rounds","round","x1","idx1","idx0","B0","B1","Th","Tl","curH","curL","Th1","Tl1","PI","y1","x2","x3","$a07c0a27998e1113$var$Keccak","suffix","enableXOF","posOut","state32","keccak","finish","bufferOut","writeInto","xofInto","$a07c0a27998e1113$var$gen","$a07c0a27998e1113$var$genShake","dkLen","$75c0c4c6f45ed63f$var$HMAC","HMAC","iHash","oHash","getPrototypeOf","$04c83ae3c87e7df0$var$_0n","$04c83ae3c87e7df0$var$_1n","$04c83ae3c87e7df0$var$_2n","$04c83ae3c87e7df0$var$_3n","$04c83ae3c87e7df0$var$_8n","$04c83ae3c87e7df0$export$8ff8607b70325343","beta","$04c83ae3c87e7df0$var$weistrass","$04c83ae3c87e7df0$var$mod","$04c83ae3c87e7df0$var$USE_ENDOMORPHISM","$04c83ae3c87e7df0$var$ShaError","ShaError","$04c83ae3c87e7df0$var$JacobianPoint","JacobianPoint","Z1Z1","Z2Z2","U1","U2","S1","S2","x1b","HH","HHH","V","$04c83ae3c87e7df0$var$normalizeScalar","$04c83ae3c87e7df0$var$splitScalarEndo","k1neg","k1","k2neg","k1p","k2p","d1","$04c83ae3c87e7df0$export$baf26146a414f24a","$04c83ae3c87e7df0$var$pointPrecomputes","fake","f1p","f2p","$04c83ae3c87e7df0$var$invert","iz1","iz2","iz3","scratch","$04c83ae3c87e7df0$var$invertBatch","isCompressed","$04c83ae3c87e7df0$var$hexToBytes","$04c83ae3c87e7df0$var$numTo32bStr","hasEvenY","$04c83ae3c87e7df0$var$isValidFieldElement","left","Q","aP","bQ","isShort","$04c83ae3c87e7df0$var$bytesToNumber","_6n","_11n","_22n","_23n","_44n","_88n","b3","b6","$04c83ae3c87e7df0$var$pow2","b9","b11","b22","b44","b88","b176","b220","b223","$04c83ae3c87e7df0$var$sqrtMod","isYOdd","$04c83ae3c87e7df0$var$ensureBytes","fromCompressedHex","fromUncompressedHex","$04c83ae3c87e7df0$var$normalizePrivateKey","recovery","$04c83ae3c87e7df0$var$truncateHash","$04c83ae3c87e7df0$var$normalizeSignature","rinv","multiplyAndAddUnsafe","$04c83ae3c87e7df0$var$sliceDER","$04c83ae3c87e7df0$var$parseDERInt","$04c83ae3c87e7df0$var$bytesToHex","$04c83ae3c87e7df0$export$848620f5f2f26e86","$04c83ae3c87e7df0$var$isWithinCurveOrder","HALF","hasHighS","toDERHex","sHex","$04c83ae3c87e7df0$var$numberToHexUnpadded","rHex","rLen","sLen","toDERRawBytes","toCompactHex","$04c83ae3c87e7df0$var$hexToNumber","rBytesLeft","$04c83ae3c87e7df0$var$parseDERSignature","fromDER","$04c83ae3c87e7df0$var$concatBytes","$04c83ae3c87e7df0$var$hexes","$04c83ae3c87e7df0$var$POW_2_256","$04c83ae3c87e7df0$var$numTo32b","$04c83ae3c87e7df0$var$_sha256Sync","$04c83ae3c87e7df0$var$_hmacSha256Sync","$04c83ae3c87e7df0$var$divNearest","$04c83ae3c87e7df0$var$ENDO","POW_2_128","c1","c2","delta","$04c83ae3c87e7df0$var$HmacDrbg","HmacDrbg","counter","_utils","$04c83ae3c87e7df0$export$eab97d15b1788b8d","hmacSha256","checkSync","hmacSync","incr","$04c83ae3c87e7df0$var$kmdToSig","kBytes","fromCompact","$04c83ae3c87e7df0$export$889def73691f9837","fromPrivateKey","$04c83ae3c87e7df0$var$bits2int","$04c83ae3c87e7df0$var$int2octets","$04c83ae3c87e7df0$var$initSigArgs","extraEntropy","z1","z2","h1","seedArgs","$04c83ae3c87e7df0$var$finalizeSig","recSig","canonical","normalizeS","toCompactRawBytes","$04c83ae3c87e7df0$export$6ff6692656050317","drbg","reseedSync","generateSync","$04c83ae3c87e7df0$var$crypto","$04c83ae3c87e7df0$var$TAGGED_HASH_PREFIXES","_bigintTo32Bytes","_normalizePrivateKey","hashToPrivateKey","ckey","createHmac","importKey","sha256Sync","taggedHash","tagP","tagH","taggedHashSync"],"version":3,"file":"solanaProvider.esm.56c9da35.js.map"}